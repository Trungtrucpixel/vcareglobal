{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a comprehensive business management application for \"Phúc An Đường\" (appears to be a Vietnamese business), built as a full-stack web application. The system provides a multi-role dashboard for managing cards/benefits, branches with KPIs, staff equity tracking, cash flow monitoring, and system administration. It features role-based access control with support for admin, staff, customer, branch, and shareholder roles.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nTesting approach: Skip full automated UI tests, check basic functionality only to save resource costs.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript, using Vite for build tooling and development\n- **UI Library**: Shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **Styling**: Tailwind CSS with custom design tokens and Bootstrap integration for additional components\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Authentication**: Passport.js with local strategy, using express-session for session management\n- **Password Security**: Node.js crypto module with scrypt for password hashing\n- **API Design**: RESTful endpoints with proper HTTP status codes and error handling\n- **Middleware**: Custom logging middleware for API request monitoring\n\n## Data Storage Solutions\n- **Database**: PostgreSQL with Neon serverless database hosting\n- **ORM**: Drizzle ORM for type-safe database operations and schema management\n- **Session Store**: PostgreSQL-backed session storage using connect-pg-simple\n- **Schema Management**: Drizzle Kit for database migrations and schema synchronization\n\n### Recent Database Enhancements (January 2025)\n- **PAD Token System**: Added `pad_token` field to users table (100 PAD = 1 triệu VNĐ) for digital asset tracking\n- **Multi-Role Support**: New `roles` and `user_roles` tables enabling users to have multiple roles simultaneously (Sáng lập, Thiên thần, Phát triển, Đồng hành, Khách hàng, Góp tài sản, Sweat Equity)\n- **Asset Contributions**: New `asset_contributions` table for tracking non-cash investments with valuation, PAD tokens, and contract documents\n- **Enhanced Transactions**: Added `contribution_type` (cash/asset/effort/card) and `pad_token_amount` fields to transactions table\n- **Profit Distribution Types**: Enhanced `profit_distribution` with `distribution_type` to differentiate between capital-based (30%) and labor-based (19%) profit sharing\n\n## Authentication and Authorization\n- **Strategy**: Session-based authentication with Passport.js local strategy\n- **Password Security**: Salted and hashed passwords using Node.js scrypt\n- **Role-Based Access**: Multi-role system (admin, staff, customer, branch, shareholder)\n- **Session Management**: Express-session with PostgreSQL store for persistent sessions\n- **Route Protection**: Custom protected route components for frontend authorization\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **WebSocket Support**: Real-time database connections using ws library\n\n### UI and Styling\n- **Radix UI**: Comprehensive primitive components for accessible UI elements\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **Bootstrap**: Additional component styling and icons\n- **Lucide React**: Icon library for consistent iconography\n- **React Icons**: Additional icon sets including Bootstrap icons\n\n### Development and Build Tools\n- **Vite**: Modern build tool with HMR and optimized production builds\n- **TypeScript**: Static type checking across the entire application\n- **ESBuild**: Fast JavaScript bundler for server-side code\n- **PostCSS**: CSS processing with Autoprefixer for vendor prefixes\n\n### Third-Party Libraries\n- **Chart.js**: Data visualization for dashboard analytics and KPI charts\n- **Date-fns**: Date manipulation and formatting utilities\n- **Zod**: Runtime type validation for forms and API data\n- **Class Variance Authority**: Type-safe CSS class composition\n- **CMDK**: Command palette component for enhanced user interaction\n\n### Development Environment\n- **Replit Integration**: Custom Vite plugins for Replit development environment\n- **Error Handling**: Runtime error overlay for development debugging\n- **Hot Module Replacement**: Fast development iteration with Vite HMR","size_bytes":4721},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"#43B0A5\", // Using the exact primary color from design\n          foreground: \"var(--primary-foreground)\",\n          dark: \"#369289\",\n          light: \"#5BC0B5\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"#43B0A5\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2852},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to true if using HTTPS\n      sameSite: 'lax',\n      maxAge: 1000 * 60 * 60 * 24, // 24 hours\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy({ usernameField: 'email' }, async (username, password, done) => {\n      const user = await storage.getUserByEmail(username); // Using email as username\n      if (!user || !(await comparePasswords(password, user.password))) {\n        return done(null, false);\n      } else {\n        return done(null, user);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    const user = await storage.getUser(id);\n    done(null, user);\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    const existingUser = await storage.getUserByEmail(req.body.email);\n    if (existingUser) {\n      return res.status(400).send(\"Username already exists\");\n    }\n\n    const user = await storage.createUser({\n      ...req.body,\n      password: await hashPassword(req.body.password),\n    });\n\n    req.login(user, (err) => {\n      if (err) return next(err);\n      // Return user data without password hash and force customer role\n      const userResponse = {\n        id: user.id,\n        email: user.email,\n        role: 'customer', // Force new registrations to customer role for security\n        status: user.status\n      };\n      res.status(201).json(userResponse);\n    });\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    // Return user data without password hash\n    const user = req.user as any;\n    const userResponse = {\n      id: user.id,\n      email: user.email,\n      role: user.role,\n      status: user.status\n    };\n    res.status(200).json(userResponse);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    // Return user data without password hash\n    const user = req.user as any;\n    const userResponse = {\n      id: user.id,\n      email: user.email,\n      role: user.role,\n      status: user.status\n    };\n    res.json(userResponse);\n  });\n}\n","size_bytes":3609},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth } from \"./auth\";\nimport { \n  insertCardSchema, \n  insertBranchSchema, \n  insertStaffSchema, \n  insertTransactionSchema, \n  insertKpiSchema, \n  insertStaffKpiSchema, \n  insertReferralSchema,\n  profitSharingValidationSchema,\n  profitSharingProcessSchema,\n  profitDistributionValidationSchema,\n  quarterlyPeriodSchema,\n  validateQuarterBoundaries\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Legacy validation schema for KPI endpoints (keeping backward compatibility)\nconst legacyKpiValidationSchema = z.object({\n  branchId: z.string().min(1, \"Branch ID is required\"),\n  period: z.enum([\"month\", \"quarter\", \"year\"], { \n    errorMap: () => ({ message: \"Period must be 'month', 'quarter', or 'year'\" }) \n  }).default(\"month\"),\n  periodValue: z.string().min(1, \"Period value is required\").default(\"2024-11\")\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication\n  setupAuth(app);\n\n  // Card routes\n  app.get(\"/api/cards\", async (req, res) => {\n    try {\n      const cards = await storage.getCards();\n      res.json(cards);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch cards\" });\n    }\n  });\n\n  app.post(\"/api/cards\", async (req, res) => {\n    try {\n      const cardData = insertCardSchema.parse(req.body);\n      \n      // Tính PAD Token (100 PAD = 1 triệu VNĐ)\n      const price = parseFloat(cardData.price);\n      const padToken = (price / 1000000) * 100; // VNĐ to triệu, then * 100\n      \n      // Set consultation sessions dựa trên loại thẻ\n      const consultationSessionsMap: Record<string, number> = {\n        \"Standard\": 12,\n        \"Silver\": 15,\n        \"Gold\": 18,\n        \"Platinum\": 21,\n        \"Diamond\": 24\n      };\n      const consultationSessions = consultationSessionsMap[cardData.cardType] || 12;\n      \n      // Enrich card data với PAD Token và consultation sessions\n      const enrichedCardData = {\n        ...cardData,\n        padToken: padToken.toString(),\n        consultationSessions\n      };\n      \n      const card = await storage.createCard(enrichedCardData);\n      \n      // Auto-upgrade role nếu user đã xác thực\n      if (req.isAuthenticated() && req.user && card.ownerId) {\n        const userId = card.ownerId;\n        \n        // Tính tổng giá trị góp từ thẻ\n        const userCards = await storage.getCards();\n        const totalCardValue = userCards\n          .filter(c => c.ownerId === userId)\n          .reduce((sum, c) => sum + parseFloat(c.price), 0);\n        \n        // Nếu tổng > 101 triệu, auto-upgrade từ Khách hàng → Thiên thần\n        if (totalCardValue > 101000000) {\n          const user = await storage.getUser(userId);\n          if (user && user.role === \"customer\") {\n            await storage.updateUser(userId, { role: \"shareholder\" });\n            console.log(`✅ Auto-upgraded user ${user.email} from customer to shareholder (total cards: ${(totalCardValue/1000000).toFixed(1)}M VNĐ)`);\n          }\n        }\n      }\n      \n      res.status(201).json(card);\n    } catch (error) {\n      console.error(\"Card creation error:\", error);\n      res.status(400).json({ message: \"Invalid card data\" });\n    }\n  });\n\n  app.put(\"/api/cards/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      const card = await storage.updateCard(id, updateData);\n      if (!card) {\n        return res.status(404).json({ message: \"Card not found\" });\n      }\n      res.json(card);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update card\" });\n    }\n  });\n\n  app.delete(\"/api/cards/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteCard(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Card not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete card\" });\n    }\n  });\n\n  // Branch routes\n  app.get(\"/api/branches\", async (req, res) => {\n    try {\n      const branches = await storage.getBranches();\n      res.json(branches);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch branches\" });\n    }\n  });\n\n  app.post(\"/api/branches\", async (req, res) => {\n    try {\n      const branchData = insertBranchSchema.parse(req.body);\n      const branch = await storage.createBranch(branchData);\n      res.status(201).json(branch);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid branch data\" });\n    }\n  });\n\n  // Staff routes\n  app.get(\"/api/staff\", async (req, res) => {\n    try {\n      const staff = await storage.getStaff();\n      res.json(staff);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch staff\" });\n    }\n  });\n\n  app.post(\"/api/staff\", async (req, res) => {\n    try {\n      const staffData = insertStaffSchema.parse(req.body);\n      const staffMember = await storage.createStaffMember(staffData);\n      res.status(201).json(staffMember);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid staff data\" });\n    }\n  });\n\n  app.put(\"/api/staff/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      const staffMember = await storage.updateStaffMember(id, updateData);\n      if (!staffMember) {\n        return res.status(404).json({ message: \"Staff member not found\" });\n      }\n      res.json(staffMember);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update staff member\" });\n    }\n  });\n\n  app.delete(\"/api/staff/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteStaffMember(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Staff member not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete staff member\" });\n    }\n  });\n\n  // Transaction routes\n  app.get(\"/api/transactions\", async (req, res) => {\n    try {\n      const transactions = await storage.getTransactions();\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.post(\"/api/transactions\", async (req, res) => {\n    try {\n      const transactionData = insertTransactionSchema.parse(req.body);\n      const transaction = await storage.createTransaction(transactionData);\n      \n      // AUTOMATION: Automatically process referral commissions for income transactions\n      const { referralCode } = req.body;\n      if (referralCode && transaction.type === \"income\") {\n        try {\n          const referral = await storage.processFirstTransaction(referralCode, transaction.id);\n          if (referral) {\n            console.log(`✅ Automatically processed referral commission for code: ${referralCode}, transaction: ${transaction.id}`);\n          }\n        } catch (referralError) {\n          // Log referral processing errors but don't fail the transaction\n          console.error(`⚠️ Referral processing failed for code ${referralCode}:`, referralError instanceof Error ? referralError.message : 'Unknown error');\n        }\n      }\n      \n      res.status(201).json(transaction);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid transaction data\" });\n    }\n  });\n\n  // Dashboard metrics\n  app.get(\"/api/dashboard/metrics\", async (req, res) => {\n    try {\n      const transactions = await storage.getTransactions();\n      const cards = await storage.getCards();\n      const branches = await storage.getBranches();\n      const staff = await storage.getStaff();\n\n      // Calculate total revenue from income transactions\n      const totalRevenue = transactions\n        .filter(t => t.type === \"income\")\n        .reduce((sum, t) => sum + parseFloat(t.amount), 0);\n\n      // Get current user's PAD Token (if authenticated)\n      let userPadToken = 0;\n      if (req.isAuthenticated() && req.user) {\n        const currentUser = await storage.getUser((req.user as any).id);\n        userPadToken = currentUser?.padToken ? parseFloat(currentUser.padToken.toString()) : 0;\n      }\n\n      const metrics = {\n        totalRevenue: totalRevenue.toLocaleString('vi-VN'),\n        activeCards: cards.filter(c => c.status === \"active\").length,\n        branches: branches.length,\n        staff: staff.length,\n        padToken: userPadToken\n      };\n\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard metrics\" });\n    }\n  });\n\n  // Revenue chart data\n  app.get(\"/api/dashboard/revenue-chart\", async (req, res) => {\n    try {\n      // Mock revenue data for 6 months\n      const revenueData = {\n        labels: ['Tháng 1', 'Tháng 2', 'Tháng 3', 'Tháng 4', 'Tháng 5', 'Tháng 6'],\n        data: [120, 150, 180, 140, 200, 245]\n      };\n      res.json(revenueData);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch revenue chart data\" });\n    }\n  });\n\n  // Business overview data for enhanced dashboard\n  app.get(\"/api/dashboard/business-overview\", async (req, res) => {\n    try {\n      const businessData = {\n        quarterlyData: {\n          labels: ['Q1 2024', 'Q2 2024', 'Q3 2024', 'Q4 2024'],\n          revenue: [1000, 1200, 950, 1100],\n          expenses: [600, 720, 570, 660], \n          profitAfterTax: [300, 360, 285, 330]\n        },\n        cardMaxoutStatus: [\n          { type: 'VIP Gold', current: 85, max: 100, percentage: 85 },\n          { type: 'VIP Silver', current: 45, max: 75, percentage: 60 },\n          { type: 'Member', current: 120, max: 200, percentage: 60 }\n        ],\n        profitAllocation: {\n          roles: 49,\n          operations: 30,\n          expansion: 21,\n          capitalBased: 30,\n          laborBased: 19\n        },\n        profitAllocationBreakdown: {\n          capital: {\n            percentage: 30,\n            roles: ['Sáng lập', 'Thiên thần', 'Phát triển', 'Đồng hành', 'Góp tài sản', 'Khách hàng']\n          },\n          labor: {\n            percentage: 19,\n            roles: ['Sweat Equity', 'Chi nhánh đạt KPI']\n          }\n        },\n        roiPredictions: [\n          { role: 'Sáng lập', investment: 300, sixMonths: 12000, oneYear: 15000, threeYears: 25000, fiveYears: 40000, fiveYearROI: 597 },\n          { role: 'Thiên thần', investment: 150, sixMonths: 12000, oneYear: 15000, threeYears: 25000, fiveYears: 40000, fiveYearROI: 500 },\n          { role: 'Phát triển', investment: 100, sixMonths: 12000, oneYear: 15000, threeYears: 25000, fiveYears: 40000, fiveYearROI: 400 },\n          { role: 'Đồng hành', investment: 50, sixMonths: 12000, oneYear: 15000, threeYears: 25000, fiveYears: 40000, fiveYearROI: 380 },\n          { role: 'Góp tài sản', investment: 200, sixMonths: 12000, oneYear: 15000, threeYears: 25000, fiveYears: 40000, fiveYearROI: 450 }\n        ],\n        alerts: [\n          { type: 'danger', message: 'Chi nhánh Quận 3 có KPI thấp (65%)', severity: 'high' },\n          { type: 'warning', message: 'Thẻ VIP Gold sắp đạt giới hạn (85%)', severity: 'medium' }\n        ],\n        topBranches: [\n          { rank: 1, name: 'Branch A', score: 95, kpi: 95 },\n          { rank: 2, name: 'Branch B', score: 87, kpi: 87 },\n          { rank: 3, name: 'Branch C', score: 82, kpi: 82 }\n        ]\n      };\n      res.json(businessData);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch business overview data\" });\n    }\n  });\n\n  // Check-in routes\n  app.post(\"/api/cards/:id/checkin\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { sessionType, notes } = req.body;\n      \n      const card = await storage.getCard(id);\n      if (!card) {\n        return res.status(404).json({ message: \"Card not found\" });\n      }\n\n      // Update card's remaining sessions and last check-in\n      const updatedCard = await storage.updateCard(id, {\n        remainingSessions: Math.max(0, (card.remainingSessions || 0) - 1)\n      });\n      \n      res.json({ success: true, card: updatedCard, message: \"Check-in successful\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to process check-in\" });\n    }\n  });\n\n  // Card types and pricing\n  app.get(\"/api/cards/types\", async (req, res) => {\n    try {\n      const cardTypes = [\n        { type: \"Standard\", price: 2000000, maxSessions: 5 },\n        { type: \"Silver\", price: 10000000, maxSessions: 15 },\n        { type: \"Gold\", price: 30000000, maxSessions: 30 },\n        { type: \"Platinum\", price: 70000000, maxSessions: 50 },\n        { type: \"Diamond\", price: 100000000, maxSessions: 80 }\n      ];\n      res.json(cardTypes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch card types\" });\n    }\n  });\n\n  // Card benefits analysis\n  app.get(\"/api/cards/:id/benefits\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const card = await storage.getCard(id);\n      \n      if (!card) {\n        return res.status(404).json({ message: \"Card not found\" });\n      }\n      \n      const price = parseFloat(card.price);\n      const currentShares = parseFloat(card.currentShares || \"0\");\n      const maxoutLimit = price * 2.1; // 210% of card value\n      const shareValue = currentShares * 1000000; // 1M VND = 1 share\n      \n      let status = \"active\";\n      if (shareValue >= maxoutLimit * 0.9) {\n        status = \"near_maxout\";\n      } else if (shareValue >= maxoutLimit) {\n        status = \"stopped\";\n      }\n      \n      const benefits = {\n        cardId: id,\n        cardType: card.cardType,\n        price: price,\n        currentShares: currentShares,\n        shareValue: shareValue,\n        maxoutLimit: maxoutLimit,\n        maxoutPercentage: (shareValue / maxoutLimit) * 100,\n        status: status,\n        connectionCommission: parseFloat(card.connectionCommission || \"8\"),\n        vipSupport: parseFloat(card.vipSupport || \"5\"),\n        profitSharePercentage: parseFloat(card.profitSharePercentage || \"49\"),\n        padToken: parseFloat(card.padToken || \"0\"),\n        consultationSessions: card.consultationSessions || 12,\n        isNearMaxout: shareValue >= maxoutLimit * 0.9\n      };\n      \n      res.json(benefits);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to calculate benefits\" });\n    }\n  });\n\n  // KPI routes (protected)\n  app.get(\"/api/kpis\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const kpis = await storage.getKpis();\n      res.json(kpis);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch KPIs\" });\n    }\n  });\n\n  app.get(\"/api/kpis/branch/:branchId\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const { branchId } = req.params;\n      const kpis = await storage.getKpisByBranch(branchId);\n      res.json(kpis);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch branch KPIs\" });\n    }\n  });\n\n  app.get(\"/api/kpis/period/:period/:periodValue\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const { period, periodValue } = req.params;\n      const kpis = await storage.getKpisByPeriod(period, periodValue);\n      res.json(kpis);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch period KPIs\" });\n    }\n  });\n\n  // Branch performance and ranking (protected)\n  app.get(\"/api/branches/performance\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const { period = \"month\", periodValue = \"2024-11\" } = req.query;\n      const branches = await storage.getBranches();\n      const branchPerformance = [];\n      \n      for (const branch of branches) {\n        const kpiScore = await storage.calculateBranchKpi(branch.id, period as string, periodValue as string);\n        const kpis = await storage.getKpisByBranch(branch.id);\n        const currentKpis = kpis.filter(k => k.period === period && k.periodValue === periodValue);\n        \n        // Revenue predictions based on franchise tier\n        const revenuePredictions = {\n          sixMonths: 80000000,    // 80 triệu/tháng\n          oneYear: 120000000,     // 120 triệu/tháng\n          threeYears: 200000000,  // 200 triệu/tháng\n          fiveYears: 350000000    // 350 triệu/tháng\n        };\n        \n        branchPerformance.push({\n          ...branch,\n          kpiScore,\n          cardSales: currentKpis.reduce((sum, k) => sum + (k.cardSales || 0), 0),\n          revisitRate: currentKpis.length > 0 ? \n            currentKpis.reduce((sum, k) => sum + parseFloat(k.revisitRate || \"0\"), 0) / currentKpis.length : 0,\n          deviceRevenue: currentKpis.reduce((sum, k) => sum + parseFloat(k.deviceRevenue || \"0\"), 0),\n          totalRevenue: currentKpis.reduce((sum, k) => sum + parseFloat(k.totalRevenue || \"0\"), 0),\n          isUnderperforming: kpiScore < 70,\n          padTokenValue: parseFloat(branch.padToken || \"20000\"), // 200 shares = 20,000 PAD\n          revenuePredictions\n        });\n      }\n      \n      // Sort by KPI score descending for ranking\n      branchPerformance.sort((a, b) => b.kpiScore - a.kpiScore);\n      \n      res.json(branchPerformance);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch branch performance\" });\n    }\n  });\n\n  // KPI alerts for underperforming branches (protected)\n  app.get(\"/api/kpis/alerts\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const { period = \"month\", periodValue = \"2024-11\" } = req.query;\n      const branches = await storage.getBranches();\n      const alerts = [];\n      \n      for (const branch of branches) {\n        const kpiScore = await storage.calculateBranchKpi(branch.id, period as string, periodValue as string);\n        \n        if (kpiScore < 70) {\n          alerts.push({\n            type: \"danger\",\n            severity: kpiScore < 50 ? \"critical\" : \"high\",\n            message: `Chi nhánh ${branch.name} có KPI thấp (${kpiScore}%)`,\n            branchId: branch.id,\n            branchName: branch.name,\n            kpiScore: kpiScore\n          });\n        } else if (kpiScore < 80) {\n          alerts.push({\n            type: \"warning\",\n            severity: \"medium\",\n            message: `Chi nhánh ${branch.name} cần cải thiện KPI (${kpiScore}%)`,\n            branchId: branch.id,\n            branchName: branch.name,\n            kpiScore: kpiScore\n          });\n        }\n      }\n      \n      res.json(alerts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch KPI alerts\" });\n    }\n  });\n\n  // Create new KPI record (protected)\n  app.post(\"/api/kpis\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const kpiData = insertKpiSchema.parse(req.body);\n      const kpi = await storage.createKpi(kpiData);\n      res.status(201).json(kpi);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid KPI data\" });\n    }\n  });\n\n  // Profit sharing validation (protected) - Updated for quarterly-only processing\n  app.post(\"/api/profit-sharing/validate\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      // Validate request body with new quarterly-only schema\n      const validationResult = profitSharingValidationSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: \"Invalid request data\", \n          errors: validationResult.error.issues.map(issue => ({\n            field: issue.path.join('.'),\n            message: issue.message\n          }))\n        });\n      }\n      \n      const { period, periodValue } = validationResult.data;\n      \n      // Validate quarter boundaries\n      const { isValid } = validateQuarterBoundaries(periodValue);\n      if (!isValid) {\n        return res.status(400).json({ \n          message: \"Invalid quarter period\",\n          errors: [{ field: \"periodValue\", message: \"Period value must be in format YYYY-Q[1-4]\" }]\n        });\n      }\n      \n      // Check if profit sharing already exists for this period\n      const existingProfitSharing = await storage.getProfitSharingByPeriod(period, periodValue);\n      const alreadyProcessed = existingProfitSharing && existingProfitSharing.distributionStatus === \"completed\";\n      \n      // Calculate quarterly profit for validation\n      let profitData;\n      try {\n        profitData = await storage.calculateQuarterlyProfit(period, periodValue);\n      } catch (error) {\n        return res.status(400).json({ \n          message: \"Failed to calculate quarterly profit\",\n          error: error instanceof Error ? error.message : 'Unknown error'\n        });\n      }\n      \n      const validation = {\n        period,\n        periodValue,\n        isValid: true,\n        alreadyProcessed,\n        profitData,\n        profitSharePool: profitData.profit * 0.49,\n        canProcess: profitData.profit > 0 && !alreadyProcessed,\n        message: alreadyProcessed ? \n          `Profit sharing for ${periodValue} has already been processed` :\n          profitData.profit > 0 ?\n            `Ready to process profit sharing for ${periodValue} with ${(profitData.profit * 0.49).toLocaleString('vi-VN')} VND profit pool` :\n            `Cannot process profit sharing for ${periodValue}: No profit to distribute`\n      };\n      \n      res.json(validation);\n    } catch (error) {\n      console.error(\"Error validating profit sharing:\", error);\n      res.status(500).json({ message: \"Failed to validate profit sharing\" });\n    }\n  });\n\n  // Staff KPI routes (protected)\n  app.get(\"/api/staff-kpis\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const staffKpis = await storage.getStaffKpis();\n      res.json(staffKpis);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch staff KPIs\" });\n    }\n  });\n\n  app.get(\"/api/staff-kpis/staff/:staffId\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const { staffId } = req.params;\n      const staffKpis = await storage.getStaffKpisByStaff(staffId);\n      res.json(staffKpis);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch staff KPIs\" });\n    }\n  });\n\n  app.get(\"/api/staff-kpis/period/:period/:periodValue\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const { period, periodValue } = req.params;\n      const staffKpis = await storage.getStaffKpisByPeriod(period, periodValue);\n      res.json(staffKpis);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch staff KPIs for period\" });\n    }\n  });\n\n  app.post(\"/api/staff-kpis\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const staffKpiData = insertStaffKpiSchema.parse(req.body);\n      const staffKpi = await storage.createStaffKpi(staffKpiData);\n      res.status(201).json(staffKpi);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid staff KPI data\" });\n    }\n  });\n\n  app.put(\"/api/staff-kpis/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      const staffKpi = await storage.updateStaffKpi(id, updateData);\n      if (!staffKpi) {\n        return res.status(404).json({ message: \"Staff KPI not found\" });\n      }\n      res.json(staffKpi);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update staff KPI\" });\n    }\n  });\n\n  // Staff KPI calculation and share processing\n  app.get(\"/api/staff-kpis/calculate/:staffId/:period/:periodValue\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const { staffId, period, periodValue } = req.params;\n      const points = await storage.calculateStaffKpiPoints(staffId, period, periodValue);\n      const slotsEarned = Math.floor(points / 50); // ≥50 points = 1 slot\n      const sharesEarned = slotsEarned * 50; // 1 slot = 50 shares\n      \n      res.json({\n        staffId,\n        period,\n        periodValue,\n        totalPoints: points,\n        slotsEarned,\n        sharesEarned,\n        isEligible: points >= 50\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to calculate staff KPI points\" });\n    }\n  });\n\n  app.post(\"/api/staff-kpis/process-quarterly-shares\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const { period, periodValue } = req.body;\n      \n      if (!period || !periodValue) {\n        return res.status(400).json({ message: \"Period and periodValue are required\" });\n      }\n      \n      await storage.processQuarterlyShares(period, periodValue);\n      res.json({ \n        message: `Successfully processed quarterly shares for ${period} ${periodValue}`,\n        period,\n        periodValue\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to process quarterly shares\" });\n    }\n  });\n\n  // Referral routes (protected)\n  app.get(\"/api/referrals\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const referrals = await storage.getReferrals();\n      res.json(referrals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch referrals\" });\n    }\n  });\n\n  app.get(\"/api/referrals/referrer/:referrerId\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const { referrerId } = req.params;\n      const referrals = await storage.getReferralsByReferrer(referrerId);\n      \n      // Calculate summary statistics\n      const totalReferrals = referrals.length;\n      const totalContributionValue = referrals.reduce((sum, r) => sum + parseFloat(r.contributionValue || \"0\"), 0);\n      const totalCommissionEarned = referrals.reduce((sum, r) => sum + parseFloat(r.commissionAmount || \"0\"), 0);\n      const totalCommissionPaid = referrals.reduce((sum, r) => sum + parseFloat(r.commissionPaid || \"0\"), 0);\n      const pendingCommission = totalCommissionEarned - totalCommissionPaid;\n      \n      res.json({\n        referrals,\n        summary: {\n          totalReferrals,\n          totalContributionValue,\n          totalCommissionEarned,\n          totalCommissionPaid,\n          pendingCommission\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch referrals by referrer\" });\n    }\n  });\n\n  app.get(\"/api/referrals/code/:referralCode\", async (req, res) => {\n    try {\n      const { referralCode } = req.params;\n      const referral = await storage.getReferralByCode(referralCode);\n      \n      if (!referral) {\n        return res.status(404).json({ message: \"Referral code not found\" });\n      }\n      \n      res.json(referral);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch referral by code\" });\n    }\n  });\n\n  app.post(\"/api/referrals\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const referralData = insertReferralSchema.parse(req.body);\n      const referral = await storage.createReferral(referralData);\n      res.status(201).json(referral);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid referral data\" });\n    }\n  });\n\n  app.put(\"/api/referrals/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      const referral = await storage.updateReferral(id, updateData);\n      if (!referral) {\n        return res.status(404).json({ message: \"Referral not found\" });\n      }\n      res.json(referral);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update referral\" });\n    }\n  });\n\n  // Generate referral code for staff\n  app.post(\"/api/referrals/generate-code\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const { staffId } = req.body;\n      \n      if (!staffId) {\n        return res.status(400).json({ message: \"Staff ID is required\" });\n      }\n      \n      const referralCode = await storage.generateReferralCode(staffId);\n      res.json({ \n        staffId,\n        referralCode,\n        referralUrl: `${req.protocol}://${req.get('host')}/referral/${referralCode}`\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate referral code\" });\n    }\n  });\n\n  // Calculate referral commission\n  app.get(\"/api/referrals/commission/:referralId\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const { referralId } = req.params;\n      const commission = await storage.calculateReferralCommission(referralId);\n      res.json({ referralId, commission });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to calculate referral commission\" });\n    }\n  });\n\n  // Process first transaction for referral - SECURED: No client-controlled amounts\n  app.post(\"/api/referrals/process-transaction\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const { referralCode, transactionId } = req.body;\n      \n      if (!referralCode || !transactionId) {\n        return res.status(400).json({ \n          message: \"Missing required fields: referralCode, transactionId\" \n        });\n      }\n      \n      const referral = await storage.processFirstTransaction(referralCode, transactionId);\n      if (!referral) {\n        return res.status(404).json({ message: \"Referral code not found\" });\n      }\n      \n      res.json(referral);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : \"Failed to process first transaction\";\n      res.status(400).json({ message: errorMessage });\n    }\n  });\n\n  // Mark commission as paid - SECURED: Admin/Finance only\n  app.post(\"/api/referrals/:referralId/mark-paid\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    // AUTHORIZATION: Only admin and finance roles can process payments\n    const user = req.user as any;\n    if (!user || (user.role !== 'admin' && user.role !== 'finance')) {\n      return res.status(403).json({ message: \"Access denied. Only admin and finance users can process commission payments.\" });\n    }\n    \n    try {\n      const { referralId } = req.params;\n      const { paidAmount } = req.body;\n      \n      if (typeof paidAmount !== 'number' || paidAmount <= 0) {\n        return res.status(400).json({ message: \"Invalid paid amount\" });\n      }\n      \n      const referral = await storage.markCommissionPaid(referralId, paidAmount);\n      if (!referral) {\n        return res.status(404).json({ message: \"Referral not found\" });\n      }\n      \n      res.json(referral);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : \"Failed to mark commission as paid\";\n      res.status(400).json({ message: errorMessage });\n    }\n  });\n\n  // Process all commission payments for a referrer - SECURED: Admin/Finance only\n  app.post(\"/api/referrals/process-payments/:referrerId\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    // AUTHORIZATION: Only admin and finance roles can process payments\n    const user = req.user as any;\n    if (!user || (user.role !== 'admin' && user.role !== 'finance')) {\n      return res.status(403).json({ message: \"Access denied. Only admin and finance users can process commission payments.\" });\n    }\n    \n    try {\n      const { referrerId } = req.params;\n      const totalPaid = await storage.processCommissionPayments(referrerId);\n      \n      res.json({ \n        referrerId,\n        totalPaid,\n        message: `Successfully processed commission payments totaling ${totalPaid.toLocaleString('vi-VN')} VND`\n      });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : \"Failed to process commission payments\";\n      res.status(500).json({ message: errorMessage });\n    }\n  });\n\n  // Profit sharing routes\n  // Get all profit sharings\n  app.get(\"/api/profit-sharings\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const profitSharings = await storage.getProfitSharings();\n      res.json(profitSharings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch profit sharings\" });\n    }\n  });\n\n  // Get profit sharing by period\n  app.get(\"/api/profit-sharings/period/:period/:periodValue\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const { period, periodValue } = req.params;\n      const profitSharing = await storage.getProfitSharingByPeriod(period, periodValue);\n      \n      if (!profitSharing) {\n        return res.status(404).json({ message: \"Profit sharing not found for this period\" });\n      }\n      \n      res.json(profitSharing);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch profit sharing\" });\n    }\n  });\n\n  // Calculate quarterly profit\n  app.get(\"/api/profit-sharings/calculate/:period/:periodValue\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const { period, periodValue } = req.params;\n      const profitData = await storage.calculateQuarterlyProfit(period, periodValue);\n      \n      res.json({\n        period,\n        periodValue,\n        ...profitData,\n        profitSharePool: profitData.profit * 0.49\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to calculate quarterly profit\" });\n    }\n  });\n\n  // Process quarterly profit sharing\n  app.post(\"/api/profit-sharings/process\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    // Role-based access control for sensitive profit operations\n    const user = req.user as any;\n    if (!user || ![\"admin\", \"finance\"].includes(user.role)) {\n      return res.status(403).json({ message: \"Insufficient permissions. Admin or finance role required.\" });\n    }\n    \n    try {\n      // Validate request with enhanced schema\n      const validationResult = profitSharingProcessSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: \"Invalid request data\", \n          errors: validationResult.error.issues.map(issue => ({\n            field: issue.path.join('.'),\n            message: issue.message\n          }))\n        });\n      }\n      \n      const { period, periodValue } = validationResult.data;\n      \n      console.log(`🔄 Processing profit sharing for ${periodValue}`);\n      \n      const profitSharing = await storage.processQuarterlyProfitSharing(period, periodValue);\n      \n      // Get the created distributions for response\n      const distributions = await storage.getProfitDistributionsBySharing(profitSharing.id);\n      \n      res.json({\n        profitSharing,\n        distributions,\n        summary: {\n          totalProfit: parseFloat(profitSharing.netProfit || \"0\"),\n          profitSharePool: parseFloat(profitSharing.profitSharePool || \"0\"),\n          totalShares: profitSharing.totalShares,\n          profitPerShare: parseFloat(profitSharing.profitPerShare || \"0\"),\n          distributionsCreated: distributions.length,\n          totalDistributed: distributions.reduce((sum, d) => sum + parseFloat(d.distributionAmount || \"0\"), 0)\n        }\n      });\n    } catch (error: any) {\n      console.error(\"❌ Profit sharing processing failed:\", error);\n      res.status(400).json({ \n        message: error.message || \"Failed to process quarterly profit sharing\",\n        error: error.message\n      });\n    }\n  });\n\n  // Get profit distributions\n  app.get(\"/api/profit-distributions\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const distributions = await storage.getProfitDistributions();\n      res.json(distributions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch profit distributions\" });\n    }\n  });\n\n  // Get profit distributions by sharing ID\n  app.get(\"/api/profit-distributions/sharing/:profitSharingId\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const { profitSharingId } = req.params;\n      const distributions = await storage.getProfitDistributionsBySharing(profitSharingId);\n      res.json(distributions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch profit distributions\" });\n    }\n  });\n\n  // Mark distribution as paid\n  app.post(\"/api/profit-distributions/:distributionId/mark-paid\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    // Role-based access control for payment operations\n    const user = req.user as any;\n    if (!user || ![\"admin\", \"finance\"].includes(user.role)) {\n      return res.status(403).json({ message: \"Insufficient permissions. Admin or finance role required.\" });\n    }\n    \n    try {\n      const { distributionId } = req.params;\n      \n      // Validate distribution ID format\n      const validationResult = z.string().uuid().safeParse(distributionId);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: \"Invalid distribution ID format\",\n          error: \"Distribution ID must be a valid UUID\"\n        });\n      }\n      \n      const distribution = await storage.markDistributionPaid(distributionId);\n      \n      if (!distribution) {\n        return res.status(404).json({ message: \"Distribution not found\" });\n      }\n      \n      res.json({\n        distribution,\n        message: `Successfully marked distribution as paid: ${parseFloat(distribution.distributionAmount || \"0\").toLocaleString('vi-VN')} VND`\n      });\n    } catch (error: any) {\n      console.error(\"❌ Failed to mark distribution as paid:\", error);\n      res.status(400).json({ \n        message: error.message || \"Failed to mark distribution as paid\",\n        error: error.message\n      });\n    }\n  });\n\n  // Process all distribution payments for a profit sharing\n  app.post(\"/api/profit-distributions/process-payments/:profitSharingId\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    // Role-based access control for payment operations\n    const user = req.user as any;\n    if (!user || ![\"admin\", \"finance\"].includes(user.role)) {\n      return res.status(403).json({ message: \"Insufficient permissions. Admin or finance role required.\" });\n    }\n    \n    try {\n      const { profitSharingId } = req.params;\n      \n      // Validate profit sharing ID format\n      const validationResult = z.string().uuid().safeParse(profitSharingId);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: \"Invalid profit sharing ID format\",\n          error: \"Profit sharing ID must be a valid UUID\"\n        });\n      }\n      \n      console.log(`💰 Processing all distribution payments for profit sharing: ${profitSharingId}`);\n      \n      const totalPaid = await storage.processAllDistributionPayments(profitSharingId);\n      \n      // Get updated distributions for response\n      const distributions = await storage.getProfitDistributionsBySharing(profitSharingId);\n      const paidDistributions = distributions.filter(d => d.paymentStatus === \"paid\");\n      \n      res.json({\n        profitSharingId,\n        totalPaid,\n        paymentsProcessed: paidDistributions.length,\n        distributionsSummary: distributions.map(d => ({\n          id: d.id,\n          staffName: d.staffName,\n          amount: parseFloat(d.distributionAmount || \"0\"),\n          status: d.paymentStatus,\n          paidAt: d.paidAt\n        })),\n        message: `Successfully processed ${paidDistributions.length} distribution payments totaling ${totalPaid.toLocaleString('vi-VN')} VND`\n      });\n    } catch (error: any) {\n      console.error(\"❌ Failed to process distribution payments:\", error);\n      res.status(400).json({ \n        message: error.message || \"Failed to process distribution payments\",\n        error: error.message\n      });\n    }\n  });\n\n  // Investment package routes\n  // Get all investment packages\n  app.get(\"/api/investment-packages\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const packages = await storage.getInvestmentPackages();\n      res.json(packages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch investment packages\" });\n    }\n  });\n\n  // Get active investment packages\n  app.get(\"/api/investment-packages/active\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const packages = await storage.getActiveInvestmentPackages();\n      res.json(packages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch active investment packages\" });\n    }\n  });\n\n  // Create investment package (admin only)\n  app.post(\"/api/investment-packages\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const user = req.user as any;\n    if (!user || user.role !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n    \n    try {\n      const packageData = req.body;\n      const newPackage = await storage.createInvestmentPackage(packageData);\n      res.json(newPackage);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create investment package\" });\n    }\n  });\n\n  // Cash flow transaction routes\n  // Get cash flow transactions for current user\n  app.get(\"/api/cash-flow/transactions\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const user = req.user as any;\n      const transactions = await storage.getCashFlowTransactions(user.id);\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  // Get all cash flow transactions (admin only)\n  app.get(\"/api/cash-flow/transactions/all\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const user = req.user as any;\n    if (!user || ![\"admin\", \"finance\"].includes(user.role)) {\n      return res.status(403).json({ message: \"Admin or finance access required\" });\n    }\n    \n    try {\n      const transactions = await storage.getCashFlowTransactions();\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch all transactions\" });\n    }\n  });\n\n  // Create deposit/investment request\n  app.post(\"/api/cash-flow/deposit\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const user = req.user as any;\n      const { type, amount, description, packageId } = req.body;\n      \n      if (!type || !amount || !description || !packageId) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n      \n      const transaction = await storage.createCashFlowTransaction({\n        type,\n        amount: amount.toString(),\n        description,\n        userId: user.id,\n        packageId,\n        status: \"pending\"\n      });\n      \n      res.json(transaction);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create deposit request\" });\n    }\n  });\n\n  // Create withdrawal request\n  app.post(\"/api/cash-flow/withdraw\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    try {\n      const user = req.user as any;\n      const { amount, description } = req.body;\n      \n      if (!amount || !description) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n      \n      if (amount < 5000000) {\n        return res.status(400).json({ message: \"Minimum withdrawal amount is 5,000,000 VND\" });\n      }\n      \n      // Calculate tax (10% if amount > 10M)\n      const taxAmount = storage.calculateWithdrawalTax(amount);\n      \n      const transaction = await storage.createCashFlowTransaction({\n        type: \"withdraw\",\n        amount: amount.toString(),\n        description,\n        userId: user.id,\n        status: \"pending\",\n        taxAmount: taxAmount.toString()\n      });\n      \n      res.json(transaction);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create withdrawal request\" });\n    }\n  });\n\n  // Approve transaction (admin only)\n  app.post(\"/api/cash-flow/transactions/:transactionId/approve\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const user = req.user as any;\n    if (!user || ![\"admin\", \"finance\"].includes(user.role)) {\n      return res.status(403).json({ message: \"Admin or finance access required\" });\n    }\n    \n    try {\n      const { transactionId } = req.params;\n      const transaction = await storage.approveCashFlowTransaction(transactionId, user.id);\n      \n      if (!transaction) {\n        return res.status(404).json({ message: \"Transaction not found\" });\n      }\n      \n      res.json(transaction);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to approve transaction\" });\n    }\n  });\n\n  // Reject transaction (admin only)\n  app.post(\"/api/cash-flow/transactions/:transactionId/reject\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const user = req.user as any;\n    if (!user || ![\"admin\", \"finance\"].includes(user.role)) {\n      return res.status(403).json({ message: \"Admin or finance access required\" });\n    }\n    \n    try {\n      const { transactionId } = req.params;\n      const { reason } = req.body;\n      const transaction = await storage.rejectCashFlowTransaction(transactionId, user.id, reason);\n      \n      if (!transaction) {\n        return res.status(404).json({ message: \"Transaction not found\" });\n      }\n      \n      res.json(transaction);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to reject transaction\" });\n    }\n  });\n\n  // Admin routes - only accessible to admin users\n  \n  // Get all users (admin only)\n  app.get(\"/api/admin/users\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const user = req.user as any;\n    if (!user || user.role !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n    \n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Update user role (admin only)\n  app.post(\"/api/admin/users/:userId/role\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const user = req.user as any;\n    if (!user || user.role !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n    \n    try {\n      const { userId } = req.params;\n      const { role } = req.body;\n      \n      if (!role || ![\"admin\", \"accountant\", \"branch\", \"customer\", \"staff\", \"shareholder\"].includes(role)) {\n        return res.status(400).json({ message: \"Invalid role\" });\n      }\n      \n      const updatedUser = await storage.updateUserRole(userId, role, user.id);\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json(updatedUser);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update user role\" });\n    }\n  });\n\n  // Get pending transactions (admin only)\n  app.get(\"/api/admin/transactions/pending\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const user = req.user as any;\n    if (!user || ![\"admin\", \"accountant\"].includes(user.role)) {\n      return res.status(403).json({ message: \"Admin or accountant access required\" });\n    }\n    \n    try {\n      const transactions = await storage.getPendingTransactions();\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch pending transactions\" });\n    }\n  });\n\n  // Get system configurations (admin only)\n  app.get(\"/api/admin/configs\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const user = req.user as any;\n    if (!user || user.role !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n    \n    try {\n      const configs = await storage.getSystemConfigs();\n      res.json(configs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch system configs\" });\n    }\n  });\n\n  // Update system configuration (admin only)\n  app.post(\"/api/admin/configs/:configKey\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const user = req.user as any;\n    if (!user || user.role !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n    \n    try {\n      const { configKey } = req.params;\n      const { configValue, description } = req.body;\n      \n      if (!configValue) {\n        return res.status(400).json({ message: \"Config value is required\" });\n      }\n      \n      const config = await storage.updateSystemConfig(configKey, configValue, description, user.id);\n      res.json(config);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update system config\" });\n    }\n  });\n\n  // Get audit logs (admin only)\n  app.get(\"/api/admin/audit-logs\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const user = req.user as any;\n    if (!user || user.role !== \"admin\") {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n    \n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 100;\n      const logs = await storage.getAuditLogs(limit);\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch audit logs\" });\n    }\n  });\n\n  // Export report data (admin only)\n  app.post(\"/api/admin/reports/export\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    const user = req.user as any;\n    if (!user || ![\"admin\", \"accountant\"].includes(user.role)) {\n      return res.status(403).json({ message: \"Admin or accountant access required\" });\n    }\n    \n    try {\n      const { reportType, dateFrom, dateTo } = req.body;\n      \n      if (!reportType || ![\"finance\", \"tax\", \"transactions\", \"users\"].includes(reportType)) {\n        return res.status(400).json({ message: \"Invalid report type\" });\n      }\n      \n      const data = await storage.exportReportData(reportType, dateFrom, dateTo);\n      \n      // Log the export\n      await storage.createAuditLog({\n        userId: user.id,\n        action: \"report_export\",\n        entityType: \"report\",\n        entityId: null,\n        oldValue: null,\n        newValue: JSON.stringify({ reportType, dateFrom, dateTo }),\n        ipAddress: req.ip || null,\n        userAgent: req.get(\"User-Agent\") || null,\n      });\n      \n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to export report data\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":51720},"server/storage.ts":{"content":"import { \n  type User, type InsertUser,\n  type Card, type InsertCard,\n  type Branch, type InsertBranch,\n  type Staff, type InsertStaff,\n  type Transaction, type InsertTransaction,\n  type Kpi, type InsertKpi,\n  type StaffKpi, type InsertStaffKpi,\n  type Referral, type InsertReferral,\n  type ProfitSharing, type InsertProfitSharing,\n  type ProfitDistribution, type InsertProfitDistribution,\n  type InvestmentPackage, type InsertInvestmentPackage,\n  type SystemConfig, type InsertSystemConfig,\n  type AuditLog, type InsertAuditLog,\n  type UserBalance, type InsertUserBalance,\n  type DepositRequest, type InsertDepositRequest,\n  type UserSharesHistory, type InsertUserSharesHistory,\n  type BusinessTierConfig, type InsertBusinessTierConfig,\n  type UserRoleUpdate, type TransactionApproval, type SystemConfigUpdate, type ReportExport,\n  type BusinessTierUpgrade, type QrCheckin, type EnhancedWithdrawal, type UserProfileUpdate,\n  validateQuarterBoundaries, determineBusinessTier, calculateShares, calculateWithdrawalTax\n} from \"@shared/schema\";\nimport { randomUUID, scrypt, randomBytes } from \"crypto\";\nimport { promisify } from \"util\";\nimport session from \"express-session\";\nimport createMemoryStore from \"memorystore\";\n\nconst MemoryStore = createMemoryStore(session);\n\n// Use the same password hashing as auth.ts\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\n// Monetary utility functions to ensure consistent integer VND handling\nfunction toIntegerVnd(amountString: string): number {\n  return Math.floor(parseFloat(amountString || \"0\"));\n}\n\nfunction fromIntegerVnd(amountInteger: number): string {\n  return Math.floor(amountInteger).toString();\n}\n\nfunction validatePercentageConfig(value: string): number {\n  const num = parseFloat(value);\n  if (isNaN(num) || num < 0 || num > 100) {\n    throw new Error(`Invalid percentage config: ${value}. Must be between 0-100.`);\n  }\n  return num / 100;\n}\n\ntype SessionStore = session.Store & {\n  get: (sid: string, callback: (err: any, session?: session.SessionData | null) => void) => void;\n  set: (sid: string, session: session.SessionData, callback?: (err?: any) => void) => void;\n  destroy: (sid: string, callback?: (err?: any) => void) => void;\n};\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined>;\n  \n  // Card operations\n  getCards(): Promise<Card[]>;\n  getCard(id: string): Promise<Card | undefined>;\n  createCard(card: InsertCard): Promise<Card>;\n  updateCard(id: string, card: Partial<InsertCard>): Promise<Card | undefined>;\n  deleteCard(id: string): Promise<boolean>;\n  \n  // Branch operations\n  getBranches(): Promise<Branch[]>;\n  getBranch(id: string): Promise<Branch | undefined>;\n  createBranch(branch: InsertBranch): Promise<Branch>;\n  updateBranch(id: string, branch: Partial<InsertBranch>): Promise<Branch | undefined>;\n  \n  // Staff operations\n  getStaff(): Promise<Staff[]>;\n  getStaffMember(id: string): Promise<Staff | undefined>;\n  createStaffMember(staff: InsertStaff): Promise<Staff>;\n  updateStaffMember(id: string, staff: Partial<InsertStaff>): Promise<Staff | undefined>;\n  deleteStaffMember(id: string): Promise<boolean>;\n  \n  // Transaction operations\n  getTransactions(): Promise<Transaction[]>;\n  getTransaction(id: string): Promise<Transaction | undefined>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  \n  // KPI operations\n  getKpis(): Promise<Kpi[]>;\n  getKpisByBranch(branchId: string): Promise<Kpi[]>;\n  getKpisByPeriod(period: string, periodValue: string): Promise<Kpi[]>;\n  createKpi(kpi: InsertKpi): Promise<Kpi>;\n  updateKpi(id: string, kpi: Partial<InsertKpi>): Promise<Kpi | undefined>;\n  calculateBranchKpi(branchId: string, period: string, periodValue: string): Promise<number>;\n  \n  // Staff KPI operations\n  getStaffKpis(): Promise<StaffKpi[]>;\n  getStaffKpisByStaff(staffId: string): Promise<StaffKpi[]>;\n  getStaffKpisByPeriod(period: string, periodValue: string): Promise<StaffKpi[]>;\n  createStaffKpi(staffKpi: InsertStaffKpi): Promise<StaffKpi>;\n  updateStaffKpi(id: string, staffKpi: Partial<InsertStaffKpi>): Promise<StaffKpi | undefined>;\n  calculateStaffKpiPoints(staffId: string, period: string, periodValue: string): Promise<number>;\n  processQuarterlyShares(period: string, periodValue: string): Promise<void>;\n  \n  // Referral operations\n  getReferrals(): Promise<Referral[]>;\n  getReferralsByReferrer(referrerId: string): Promise<Referral[]>;\n  getReferralByCode(referralCode: string): Promise<Referral | undefined>;\n  createReferral(referral: InsertReferral): Promise<Referral>;\n  updateReferral(id: string, referral: Partial<InsertReferral>): Promise<Referral | undefined>;\n  generateReferralCode(staffId: string): Promise<string>;\n  calculateReferralCommission(referralId: string): Promise<number>;\n  processFirstTransaction(referralCode: string, transactionId: string): Promise<Referral | undefined>;\n  markCommissionPaid(referralId: string, paidAmount: number): Promise<Referral | undefined>;\n  processCommissionPayments(referrerId: string): Promise<number>;\n\n  // Profit sharing operations\n  getProfitSharings(): Promise<ProfitSharing[]>;\n  getProfitSharing(id: string): Promise<ProfitSharing | undefined>;\n  getProfitSharingByPeriod(period: string, periodValue: string): Promise<ProfitSharing | undefined>;\n  createProfitSharing(profitSharing: InsertProfitSharing): Promise<ProfitSharing>;\n  updateProfitSharing(id: string, profitSharing: Partial<InsertProfitSharing>): Promise<ProfitSharing | undefined>;\n  calculateQuarterlyProfit(period: string, periodValue: string): Promise<{ revenue: number; expenses: number; profit: number }>;\n  processQuarterlyProfitSharing(period: string, periodValue: string): Promise<ProfitSharing>;\n\n  // Profit distribution operations\n  getProfitDistributions(): Promise<ProfitDistribution[]>;\n  getProfitDistributionsBySharing(profitSharingId: string): Promise<ProfitDistribution[]>;\n  createProfitDistribution(distribution: InsertProfitDistribution): Promise<ProfitDistribution>;\n  updateProfitDistribution(id: string, distribution: Partial<InsertProfitDistribution>): Promise<ProfitDistribution | undefined>;\n  markDistributionPaid(distributionId: string): Promise<ProfitDistribution | undefined>;\n  processAllDistributionPayments(profitSharingId: string): Promise<number>;\n\n  // Investment package operations\n  getInvestmentPackages(): Promise<InvestmentPackage[]>;\n  getInvestmentPackage(id: string): Promise<InvestmentPackage | undefined>;\n  getActiveInvestmentPackages(): Promise<InvestmentPackage[]>;\n  createInvestmentPackage(packageData: InsertInvestmentPackage): Promise<InvestmentPackage>;\n  updateInvestmentPackage(id: string, packageData: Partial<InsertInvestmentPackage>): Promise<InvestmentPackage | undefined>;\n  \n  // Cash flow operations\n  createCashFlowTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  getCashFlowTransactions(userId?: string): Promise<Transaction[]>;\n  getCashFlowTransactionsByType(type: string): Promise<Transaction[]>;\n  approveCashFlowTransaction(transactionId: string, approvedBy: string): Promise<Transaction | undefined>;\n  rejectCashFlowTransaction(transactionId: string, approvedBy: string, reason?: string): Promise<Transaction | undefined>;\n  calculateWithdrawalTax(amount: number): number;\n  \n  // Admin operations\n  getAllUsers(): Promise<User[]>;\n  updateUserRole(userId: string, role: string, updatedBy: string): Promise<User | undefined>;\n  getSystemConfigs(): Promise<SystemConfig[]>;\n  getSystemConfig(configKey: string): Promise<SystemConfig | undefined>;\n  updateSystemConfig(configKey: string, configValue: string, description?: string, updatedBy?: string): Promise<SystemConfig>;\n  getAuditLogs(limit?: number): Promise<AuditLog[]>;\n  createAuditLog(auditLog: InsertAuditLog): Promise<AuditLog>;\n  getPendingTransactions(): Promise<Transaction[]>;\n  exportReportData(reportType: string, dateFrom?: string, dateTo?: string): Promise<any[]>;\n  \n  // Business logic operations\n  // User balances\n  getUserBalance(userId: string): Promise<UserBalance | undefined>;\n  createUserBalance(balance: InsertUserBalance): Promise<UserBalance>;\n  updateUserBalance(userId: string, balance: Partial<InsertUserBalance>): Promise<UserBalance | undefined>;\n  addToUserBalance(userId: string, amount: number, description: string): Promise<UserBalance>;\n  \n  // Deposit requests \n  getDepositRequests(): Promise<DepositRequest[]>;\n  getDepositRequest(id: string): Promise<DepositRequest | undefined>;\n  getUserDepositRequests(userId: string): Promise<DepositRequest[]>;\n  createDepositRequest(request: InsertDepositRequest): Promise<DepositRequest>;\n  approveDepositRequest(requestId: string, approvedBy: string): Promise<DepositRequest | undefined>;\n  rejectDepositRequest(requestId: string, approvedBy: string, reason: string): Promise<DepositRequest | undefined>;\n  \n  // User shares history\n  getUserSharesHistory(userId: string): Promise<UserSharesHistory[]>;\n  createUserSharesHistory(history: InsertUserSharesHistory): Promise<UserSharesHistory>;\n  \n  // Business tier configs\n  getBusinessTierConfigs(): Promise<BusinessTierConfig[]>;\n  getBusinessTierConfig(tierName: string): Promise<BusinessTierConfig | undefined>;\n  createBusinessTierConfig(config: InsertBusinessTierConfig): Promise<BusinessTierConfig>;\n  updateBusinessTierConfig(tierName: string, config: Partial<InsertBusinessTierConfig>): Promise<BusinessTierConfig | undefined>;\n  \n  // Business tier operations\n  upgradeUserBusinessTier(userId: string, newTier: string, investmentAmount: number): Promise<User | undefined>;\n  calculateUserShares(userId: string, amount: number): Promise<number>;\n  updateUserShares(userId: string, shareAmount: number, description: string, transactionType: string): Promise<void>;\n  checkMaxoutLimit(userId: string): Promise<{ reached: boolean; limit: number; current: number }>;\n  \n  // QR check-in operations\n  createQrCheckin(checkin: { cardId: string; sessionType: string; notes?: string }): Promise<void>;\n  updateCardSessions(cardId: string, decrement: number): Promise<Card | undefined>;\n  \n  // Enhanced withdrawal operations  \n  createWithdrawalRequest(userId: string, amount: number, description: string): Promise<Transaction>;\n  validateWithdrawalBalance(userId: string, amount: number): Promise<{ valid: boolean; availableBalance: number }>;\n  \n  // Quarterly profit sharing with maxout\n  processQuarterlyProfitSharingWithMaxout(period: string, periodValue: string, respectMaxout: boolean): Promise<ProfitSharing>;\n  \n  // Session store\n  sessionStore: SessionStore;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private cards: Map<string, Card>;\n  private branches: Map<string, Branch>;\n  private staff: Map<string, Staff>;\n  private transactions: Map<string, Transaction>;\n  private kpis: Map<string, Kpi>;\n  private staffKpis: Map<string, StaffKpi>;\n  private referrals: Map<string, Referral>;\n  private profitSharings: Map<string, ProfitSharing>;\n  private profitDistributions: Map<string, ProfitDistribution>;\n  private investmentPackages: Map<string, InvestmentPackage>;\n  private systemConfigs: Map<string, SystemConfig>;\n  private auditLogs: Map<string, AuditLog>;\n  private userBalances: Map<string, UserBalance>;\n  private depositRequests: Map<string, DepositRequest>;\n  private userSharesHistory: Map<string, UserSharesHistory>;\n  private businessTierConfigs: Map<string, BusinessTierConfig>;\n  public sessionStore: SessionStore;\n\n  constructor() {\n    this.users = new Map();\n    this.cards = new Map();\n    this.branches = new Map();\n    this.staff = new Map();\n    this.transactions = new Map();\n    this.kpis = new Map();\n    this.staffKpis = new Map();\n    this.referrals = new Map();\n    this.profitSharings = new Map();\n    this.profitDistributions = new Map();\n    this.investmentPackages = new Map();\n    this.systemConfigs = new Map();\n    this.auditLogs = new Map();\n    this.userBalances = new Map();\n    this.depositRequests = new Map();\n    this.userSharesHistory = new Map();\n    this.businessTierConfigs = new Map();\n    this.sessionStore = new MemoryStore({\n      checkPeriod: 86400000,\n    });\n    \n    // Initialize with some sample data\n    this.initializeSampleData();\n  }\n\n  private async initializeSampleData() {\n    // Initialize system updater for configurations\n    let systemUpdater = 'system';\n    \n    // Create default admin user (only in development)\n    if (process.env.NODE_ENV === 'development') {\n      const adminPassword = process.env.DEFAULT_ADMIN_PASSWORD || 'admin123';\n      const hashedPassword = await hashPassword(adminPassword);\n      \n      const defaultAdmin: User = {\n        id: 'admin-default-001',\n        name: 'Admin',\n        email: 'admin@phuan.com',\n        password: hashedPassword,\n        role: 'admin',\n        status: 'active',\n        refCode: null,\n        businessTier: null,\n        investmentAmount: '0',\n        totalShares: '0',\n        maxoutReached: false,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      this.users.set(defaultAdmin.id, defaultAdmin);\n      systemUpdater = defaultAdmin.id; // Use admin ID as updater in DEV\n      console.log('✅ Created default admin user: admin@phuan.com (DEV mode)');\n    }\n\n    // Create sample branches\n    const branch1 = await this.createBranch({\n      name: \"Chi nhánh Quận 1\",\n      address: \"123 Nguyễn Huệ, Q1\",\n      monthlyRevenue: \"890000\",\n      staffCount: 8\n    });\n    \n    const branch2 = await this.createBranch({\n      name: \"Chi nhánh Quận 3\", \n      address: \"456 Nam Kỳ Khởi Nghĩa, Q3\",\n      monthlyRevenue: \"720000\",\n      staffCount: 6\n    });\n\n    // Create sample staff with meaningful share holdings\n    const staff1 = await this.createStaffMember({\n      name: \"Nguyễn Văn An\",\n      email: \"nva@phuanduong.com\",\n      position: \"Quản lý chi nhánh\",\n      branchId: branch1.id,\n      equityPercentage: \"5.2\",\n      shares: 250  // 250 shares = 250M VND value\n    });\n\n    const staff2 = await this.createStaffMember({\n      name: \"Trần Thị Bình\",\n      email: \"ttb@phuanduong.com\", \n      position: \"Trưởng phòng KD\",\n      branchId: branch2.id,\n      equityPercentage: \"3.8\",\n      shares: 150  // 150 shares = 150M VND value\n    });\n\n    const staff3 = await this.createStaffMember({\n      name: \"Lê Minh Cường\",\n      email: \"lmc@phuanduong.com\", \n      position: \"Chuyên viên cao cấp\",\n      branchId: branch1.id,\n      equityPercentage: \"2.1\",\n      shares: 100  // 100 shares = 100M VND value\n    });\n\n    const staff4 = await this.createStaffMember({\n      name: \"Phạm Thu Hoa\",\n      email: \"pth@phuanduong.com\", \n      position: \"Nhân viên kinh doanh\",\n      branchId: branch2.id,\n      equityPercentage: \"1.2\",\n      shares: 50   // 50 shares = 50M VND value\n    });\n\n    // Create sample cards\n    await this.createCard({\n      cardNumber: \"1234-5678-9012-3456\",\n      cardType: \"Gold\",\n      customerName: \"Nguyễn Văn A\",\n      price: \"50000000\", // 50M VND\n      remainingSessions: 10,\n      status: \"active\"\n    });\n\n    await this.createCard({\n      cardNumber: \"1234-5678-9012-7890\",\n      cardType: \"Silver\", \n      customerName: \"Trần Thị B\",\n      price: \"20000000\", // 20M VND\n      remainingSessions: 5,\n      status: \"active\"\n    });\n\n    // Create sample transactions\n    await this.createTransaction({\n      type: \"income\",\n      amount: \"150000\",\n      description: \"Thanh toán thẻ VIP\",\n      branchId: branch1.id,\n      cardId: Array.from(this.cards.values())[0]?.id\n    });\n\n    await this.createTransaction({\n      type: \"expense\",\n      amount: \"50000\",\n      description: \"Chi phí vận hành\",\n      branchId: branch1.id,\n      cardId: null\n    });\n\n    // Create sample KPI data\n    await this.createKpi({\n      branchId: branch1.id,\n      period: \"month\",\n      periodValue: \"2024-11\",\n      cardSales: 15,\n      cardSalesRevenue: \"450000000\", // 450M VND\n      revisitRate: \"85.5\", // 85.5%\n      deviceRevenue: \"120000000\", // 120M VND\n      totalRevenue: \"570000000\",\n      expenses: \"200000000\",\n      kpiScore: \"88.5\" // 88.5% KPI score\n    });\n\n    await this.createKpi({\n      branchId: branch2.id,\n      period: \"month\",\n      periodValue: \"2024-11\", \n      cardSales: 8,\n      cardSalesRevenue: \"240000000\", // 240M VND\n      revisitRate: \"65.2\", // 65.2% - below target\n      deviceRevenue: \"80000000\", // 80M VND\n      totalRevenue: \"320000000\",\n      expenses: \"150000000\",\n      kpiScore: \"68.5\" // 68.5% KPI score - below 70% threshold\n    });\n\n    // Create comprehensive staff KPIs for multiple quarters\n    await this.createStaffKpi({\n      staffId: staff1.id,\n      period: \"quarter\",\n      periodValue: \"2024-Q3\",\n      cardSales: 15,\n      customerRetention: \"85.2\",\n      totalPoints: \"160.2\", // 15*5 + 85.2 = 160.2 points\n      score: \"85.0\",\n      slotsEarned: 3, // 160.2 / 50 = 3 slots\n      sharesAwarded: \"150\", // 3 * 50 shares\n      targetRevenue: \"180000000\", // 180M VND target\n      bonusAmount: \"8500000\", // 8.5M VND bonus\n      profitShareAmount: \"12000000\", // 12M VND profit share\n      isProcessed: true\n    });\n\n    await this.createStaffKpi({\n      staffId: staff1.id,\n      period: \"quarter\", \n      periodValue: \"2024-Q4\",\n      cardSales: 18,\n      customerRetention: \"88.7\",\n      totalPoints: \"178.7\", // 18*5 + 88.7 = 178.7 points\n      score: \"92.0\",\n      slotsEarned: 3, // 178.7 / 50 = 3 slots\n      sharesAwarded: \"150\", // 3 * 50 shares\n      targetRevenue: \"200000000\", // 200M VND target\n      bonusAmount: \"12000000\", // 12M VND bonus\n      profitShareAmount: \"15000000\", // 15M VND profit share\n      isProcessed: false\n    });\n\n    await this.createStaffKpi({\n      staffId: staff2.id,\n      period: \"quarter\",\n      periodValue: \"2024-Q3\",\n      cardSales: 8,\n      customerRetention: \"72.3\",\n      totalPoints: \"112.3\", // 8*5 + 72.3 = 112.3 points\n      score: \"75.0\",\n      slotsEarned: 2, // 112.3 / 50 = 2 slots\n      sharesAwarded: \"100\", // 2 * 50 shares\n      targetRevenue: \"120000000\", // 120M VND target\n      bonusAmount: \"5500000\", // 5.5M VND bonus\n      profitShareAmount: \"8000000\", // 8M VND profit share\n      isProcessed: true\n    });\n\n    await this.createStaffKpi({\n      staffId: staff2.id,\n      period: \"quarter\",\n      periodValue: \"2024-Q4\",\n      cardSales: 10,\n      customerRetention: \"78.9\",\n      totalPoints: \"128.9\", // 10*5 + 78.9 = 128.9 points\n      score: \"82.0\", \n      slotsEarned: 2, // 128.9 / 50 = 2 slots\n      sharesAwarded: \"100\", // 2 * 50 shares\n      targetRevenue: \"140000000\", // 140M VND target\n      bonusAmount: \"7200000\", // 7.2M VND bonus\n      profitShareAmount: \"10000000\", // 10M VND profit share\n      isProcessed: false\n    });\n\n    await this.createStaffKpi({\n      staffId: staff3.id,\n      period: \"quarter\",\n      periodValue: \"2024-Q4\",\n      cardSales: 12,\n      customerRetention: \"65.4\",\n      totalPoints: \"125.4\", // 12*5 + 65.4 = 125.4 points\n      score: \"78.5\",\n      slotsEarned: 2, // 125.4 / 50 = 2 slots\n      sharesAwarded: \"100\", // 2 * 50 shares\n      targetRevenue: \"100000000\", // 100M VND target\n      bonusAmount: \"6000000\", // 6M VND bonus\n      profitShareAmount: \"7500000\", // 7.5M VND profit share\n      isProcessed: false\n    });\n\n    await this.createStaffKpi({\n      staffId: staff4.id,\n      period: \"quarter\",\n      periodValue: \"2024-Q4\", \n      cardSales: 6,\n      customerRetention: \"42.1\",\n      totalPoints: \"72.1\", // 6*5 + 42.1 = 72.1 points\n      score: \"65.0\",\n      slotsEarned: 1, // 72.1 / 50 = 1 slot\n      sharesAwarded: \"50\", // 1 * 50 shares  \n      targetRevenue: \"80000000\", // 80M VND target\n      bonusAmount: \"3200000\", // 3.2M VND bonus\n      profitShareAmount: \"4000000\", // 4M VND profit share\n      isProcessed: false\n    });\n\n    // Create sample referrals with enhanced data\n    const referralCode1 = await this.generateReferralCode(staff1.id);\n    await this.createReferral({\n      referrerId: staff1.id,\n      referredUserId: null, // Not yet assigned\n      referralCode: referralCode1,\n      customerName: \"Nguyễn Thanh Long\",\n      firstTransactionId: null,\n      contributionValue: \"45000000\", // 45M VND first transaction\n      commissionRate: \"8.0\",\n      commissionAmount: \"3600000\", // 8% of 45M = 3.6M VND\n      commissionPaid: \"0\",\n      status: \"pending\"\n    });\n\n    const referralCode2 = await this.generateReferralCode(staff2.id);\n    await this.createReferral({\n      referrerId: staff2.id,\n      referredUserId: null,\n      referralCode: referralCode2,\n      customerName: \"Trần Văn Khoa\",\n      firstTransactionId: null,\n      contributionValue: \"30000000\", // 30M VND first transaction\n      commissionRate: \"8.0\",\n      commissionAmount: \"2400000\", // 8% of 30M = 2.4M VND\n      commissionPaid: \"2400000\", // Already paid\n      status: \"completed\"\n    });\n\n    const referralCode3 = await this.generateReferralCode(staff3.id);\n    await this.createReferral({\n      referrerId: staff3.id,\n      referredUserId: null,\n      referralCode: referralCode3,\n      customerName: \"Lê Thị Mai\",\n      firstTransactionId: null,\n      contributionValue: \"20000000\", // 20M VND first transaction\n      commissionRate: \"8.0\",\n      commissionAmount: \"1600000\", // 8% of 20M = 1.6M VND\n      commissionPaid: \"800000\", // Partially paid\n      status: \"pending\"\n    });\n\n    // Update staff timestamps to show recent activity\n    await this.updateStaffMember(staff1.id, { updatedAt: new Date() });\n    await this.updateStaffMember(staff2.id, { updatedAt: new Date(Date.now() - 86400000) }); // 1 day ago\n    await this.updateStaffMember(staff3.id, { updatedAt: new Date(Date.now() - 172800000) }); // 2 days ago  \n    await this.updateStaffMember(staff4.id, { updatedAt: new Date(Date.now() - 259200000) }); // 3 days ago\n\n    // Initialize default system configurations\n    await this.updateSystemConfig(\"maxout_limit_percentage\", \"210\", \"Maximum payout limit as percentage of card price\", systemUpdater);\n    await this.updateSystemConfig(\"kpi_threshold_points\", \"50\", \"Minimum KPI points required per quarter for shares\", systemUpdater);\n    await this.updateSystemConfig(\"profit_share_rate\", \"49\", \"Percentage of quarterly profit distributed to shareholders\", systemUpdater);\n    await this.updateSystemConfig(\"withdrawal_minimum\", \"5000000\", \"Minimum withdrawal amount in VND\", systemUpdater);\n    await this.updateSystemConfig(\"withdrawal_tax_rate\", \"10\", \"Tax rate percentage for withdrawals over 10M VND\", systemUpdater);\n    await this.updateSystemConfig(\"corporate_tax_rate\", \"20\", \"Corporate tax rate percentage on gross profit\", systemUpdater);\n    await this.updateSystemConfig(\"referral_commission_rate\", \"8\", \"Referral commission rate percentage\", systemUpdater);\n    await this.updateSystemConfig(\"shares_per_slot\", \"50\", \"Number of shares awarded per slot\", systemUpdater);\n    \n    // Initialize business tier configs\n    await this.createBusinessTierConfig({\n      tierName: 'founder',\n      minInvestmentAmount: '245000000',\n      shareMultiplier: '1.0',\n      maxShares: null,\n      description: 'Founder tier - unlimited shares for investments ≥245M VND',\n      benefits: 'Unlimited shares, highest profit sharing percentage, voting rights',\n    });\n\n    await this.createBusinessTierConfig({\n      tierName: 'angel',\n      minInvestmentAmount: '100000000', \n      shareMultiplier: '1.0',\n      maxShares: null,\n      description: 'Angel tier - 1M VND = 1 share with 5x payout maxout',\n      benefits: '5x investment payout cap, maxout protection, priority support',\n    });\n\n    await this.createBusinessTierConfig({\n      tierName: 'branch',\n      minInvestmentAmount: '0',\n      shareMultiplier: '1.0', \n      maxShares: '200',\n      description: 'Branch tier - maximum 200 shares based on KPI performance',\n      benefits: 'KPI-based share allocation up to 200 shares, branch management access',\n    });\n\n    await this.createBusinessTierConfig({\n      tierName: 'customer',\n      minInvestmentAmount: '0',\n      shareMultiplier: '1.0',\n      maxShares: null,\n      description: 'Card Customer - 1M VND = 1 share with 210% card price maxout',\n      benefits: '210% card price payout cap, 5% VIP support, card-based benefits',\n    });\n\n    await this.createBusinessTierConfig({\n      tierName: 'staff',\n      minInvestmentAmount: '0',\n      shareMultiplier: '1.0',\n      maxShares: null,\n      description: 'Staff - 50 points = 50 shares per quarter',\n      benefits: 'Performance-based shares, quarterly rewards, internal access',\n    });\n\n    await this.createBusinessTierConfig({\n      tierName: 'affiliate',\n      minInvestmentAmount: '0',\n      shareMultiplier: '0.0',\n      maxShares: '0',\n      description: 'Affiliate - 8% commission on referrals, no shares',\n      benefits: '8% referral commission, no shares allocation',\n    });\n  }\n\n  // User balance operations\n  async getUserBalance(userId: string): Promise<UserBalance | undefined> {\n    return this.userBalances.get(userId);\n  }\n\n  async createUserBalance(balance: InsertUserBalance): Promise<UserBalance> {\n    const userBalance: UserBalance = {\n      ...balance,\n      createdAt: balance.createdAt || new Date(),\n      updatedAt: balance.updatedAt || new Date(),\n    };\n    this.userBalances.set(balance.userId, userBalance);\n    return userBalance;\n  }\n\n  async updateUserBalance(userId: string, balance: Partial<InsertUserBalance>): Promise<UserBalance | undefined> {\n    const existingBalance = this.userBalances.get(userId);\n    if (!existingBalance) return undefined;\n\n    const updatedBalance = { ...existingBalance, ...balance, updatedAt: new Date() };\n    this.userBalances.set(userId, updatedBalance);\n    return updatedBalance;\n  }\n\n  async addToUserBalance(userId: string, amountVnd: number, description: string): Promise<UserBalance> {\n    // Ensure we work with integer VND to avoid floating point errors\n    const amountInteger = Math.floor(amountVnd);\n    \n    let balance = await this.getUserBalance(userId);\n    \n    if (!balance) {\n      // Create new balance if it doesn't exist\n      balance = await this.createUserBalance({\n        userId,\n        availableBalance: amountInteger.toString(),\n        totalShares: \"0\",\n        maxoutReached: false,\n        description,\n      });\n    } else {\n      // Update existing balance using integer arithmetic\n      const currentBalance = Math.floor(parseFloat(balance.availableBalance || \"0\"));\n      const newBalance = currentBalance + amountInteger;\n      balance = await this.updateUserBalance(userId, {\n        availableBalance: newBalance.toString(),\n        description,\n      });\n    }\n    \n    return balance!;\n  }\n\n  // Deposit request operations\n  async getDepositRequests(): Promise<DepositRequest[]> {\n    return Array.from(this.depositRequests.values());\n  }\n\n  async getDepositRequest(id: string): Promise<DepositRequest | undefined> {\n    return this.depositRequests.get(id);\n  }\n\n  async getUserDepositRequests(userId: string): Promise<DepositRequest[]> {\n    return Array.from(this.depositRequests.values()).filter(\n      request => request.userId === userId\n    );\n  }\n\n  async createDepositRequest(request: InsertDepositRequest): Promise<DepositRequest> {\n    const id = randomUUID();\n    const depositRequest: DepositRequest = {\n      ...request,\n      id,\n      status: request.status || 'pending',\n      createdAt: request.createdAt || new Date(),\n      updatedAt: request.updatedAt || new Date(),\n    };\n    this.depositRequests.set(id, depositRequest);\n    return depositRequest;\n  }\n\n  async approveDepositRequest(requestId: string, approvedBy: string): Promise<DepositRequest | undefined> {\n    const request = this.depositRequests.get(requestId);\n    if (!request) return undefined;\n\n    const updatedRequest = {\n      ...request,\n      status: 'approved' as const,\n      approvedBy,\n      approvedAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.depositRequests.set(requestId, updatedRequest);\n\n    // Process the approved deposit - add to balance and update user tier/shares\n    const user = await this.getUser(request.userId);\n    if (user && request.amount) {\n      const amount = parseFloat(request.amount);\n      \n      // Add to user balance\n      await this.addToUserBalance(request.userId, amount, `Approved deposit request: ${request.businessTier}`);\n      \n      // Update user business tier and shares\n      if (request.businessTier) {\n        await this.upgradeUserBusinessTier(request.userId, request.businessTier, amount);\n      }\n\n      // Create shares history record\n      const shareAmount = await this.calculateUserShares(request.userId, amount);\n      await this.createUserSharesHistory({\n        userId: request.userId,\n        changeAmount: shareAmount.toString(),\n        changeType: 'deposit',\n        description: `Deposit approved: ${request.businessTier} tier`,\n        transactionId: requestId,\n      });\n    }\n\n    return updatedRequest;\n  }\n\n  async rejectDepositRequest(requestId: string, approvedBy: string, reason: string): Promise<DepositRequest | undefined> {\n    const request = this.depositRequests.get(requestId);\n    if (!request) return undefined;\n\n    const updatedRequest = {\n      ...request,\n      status: 'rejected' as const,\n      approvedBy,\n      approvedAt: new Date(),\n      notes: reason,\n      updatedAt: new Date(),\n    };\n    this.depositRequests.set(requestId, updatedRequest);\n    return updatedRequest;\n  }\n\n  // User shares history operations\n  async getUserSharesHistory(userId: string): Promise<UserSharesHistory[]> {\n    return Array.from(this.userSharesHistory.values()).filter(\n      history => history.userId === userId\n    );\n  }\n\n  async createUserSharesHistory(history: InsertUserSharesHistory): Promise<UserSharesHistory> {\n    const id = randomUUID();\n    const sharesHistory: UserSharesHistory = {\n      ...history,\n      id,\n      timestamp: history.timestamp || new Date(),\n    };\n    this.userSharesHistory.set(id, sharesHistory);\n    return sharesHistory;\n  }\n\n  // Business tier config operations\n  async getBusinessTierConfigs(): Promise<BusinessTierConfig[]> {\n    return Array.from(this.businessTierConfigs.values());\n  }\n\n  async getBusinessTierConfig(tierName: string): Promise<BusinessTierConfig | undefined> {\n    return this.businessTierConfigs.get(tierName);\n  }\n\n  async createBusinessTierConfig(config: InsertBusinessTierConfig): Promise<BusinessTierConfig> {\n    const businessTierConfig: BusinessTierConfig = {\n      ...config,\n      createdAt: config.createdAt || new Date(),\n      updatedAt: config.updatedAt || new Date(),\n    };\n    this.businessTierConfigs.set(config.tierName, businessTierConfig);\n    return businessTierConfig;\n  }\n\n  async updateBusinessTierConfig(tierName: string, config: Partial<InsertBusinessTierConfig>): Promise<BusinessTierConfig | undefined> {\n    const existingConfig = this.businessTierConfigs.get(tierName);\n    if (!existingConfig) return undefined;\n\n    const updatedConfig = { ...existingConfig, ...config, updatedAt: new Date() };\n    this.businessTierConfigs.set(tierName, updatedConfig);\n    return updatedConfig;\n  }\n\n  // Business tier operations\n  async upgradeUserBusinessTier(userId: string, newTier: string, investmentAmount: number): Promise<User | undefined> {\n    const user = await this.getUser(userId);\n    if (!user) return undefined;\n\n    const tierConfig = await this.getBusinessTierConfig(newTier);\n    if (!tierConfig) return undefined;\n\n    // Calculate shares based on tier rules (1M VND = 1 share base)\n    const shareAmount = await this.calculateUserShares(userId, investmentAmount);\n\n    const updatedUser = await this.updateUser(userId, {\n      businessTier: newTier,\n      investmentAmount: investmentAmount.toString(),\n      totalShares: shareAmount.toString(),\n    });\n\n    // Update user balance with shares\n    await this.updateUserBalance(userId, {\n      totalShares: shareAmount.toString(),\n    });\n\n    return updatedUser;\n  }\n\n  async calculateUserShares(userId: string, amountVnd: number): Promise<number> {\n    const user = await this.getUser(userId);\n    if (!user) return 0;\n\n    const tierConfig = user.businessTier ? await this.getBusinessTierConfig(user.businessTier) : null;\n    \n    // Convert to integer VND to avoid floating point errors\n    const amountInteger = Math.floor(amountVnd);\n    \n    // Base calculation: 1M VND = 1 share (consistent across all tiers except affiliates)\n    const baseShares = Math.floor(amountInteger / 1000000);\n    \n    // Apply tier-specific share multiplier (most are 1.0)\n    const multiplier = tierConfig ? parseFloat(tierConfig.shareMultiplier) : 1.0;\n    const calculatedShares = Math.floor(baseShares * multiplier);\n\n    // Affiliates get no shares\n    if (user.businessTier === 'affiliate') {\n      return 0;\n    }\n\n    // Check max shares limit for specific tiers (e.g., branches have 200 max shares)\n    if (tierConfig?.maxShares) {\n      const maxShares = parseFloat(tierConfig.maxShares);\n      const currentShares = parseFloat(user.totalShares || \"0\");\n      const availableShares = Math.max(0, maxShares - currentShares);\n      const finalShares = Math.min(calculatedShares, availableShares);\n      \n      // Update maxoutReached if user hits their share limit\n      if (currentShares + finalShares >= maxShares) {\n        await this.updateUser(userId, { maxoutReached: true });\n      }\n      \n      return finalShares;\n    }\n\n    return calculatedShares;\n  }\n\n  async updateUserShares(userId: string, shareAmount: number, description: string, transactionType: string): Promise<void> {\n    const user = await this.getUser(userId);\n    if (!user) return;\n\n    const currentShares = parseFloat(user.totalShares || \"0\");\n    const newTotalShares = currentShares + shareAmount;\n\n    await this.updateUser(userId, {\n      totalShares: newTotalShares.toString(),\n    });\n\n    await this.updateUserBalance(userId, {\n      totalShares: newTotalShares.toString(),\n    });\n\n    // Record the change in history\n    await this.createUserSharesHistory({\n      userId,\n      changeAmount: shareAmount.toString(),\n      changeType: transactionType as any,\n      description,\n    });\n  }\n\n  // Centralized cumulative payout computation including ALL payout sources\n  private async calculateCumulativePayouts(userId: string): Promise<number> {\n    // Profit sharing distributions\n    const profitDistributions = Array.from(this.profitDistributions.values()).filter(pd => pd.userId === userId);\n    const totalProfitPayouts = profitDistributions.reduce((sum, pd) => toIntegerVnd(pd.distributionAmount), 0);\n    \n    // Approved withdrawals\n    const approvedWithdrawals = Array.from(this.transactions.values()).filter(t => \n      t.userId === userId && t.type === 'withdrawal' && t.status === 'approved'\n    );\n    const totalWithdrawals = approvedWithdrawals.reduce((sum, t) => toIntegerVnd(t.amount), 0);\n    \n    // Referral commissions (paid out commissions from referrals table)\n    const referralCommissions = Array.from(this.referrals.values()).filter(r => r.referrerId === userId);\n    const totalCommissions = referralCommissions.reduce((sum, r) => toIntegerVnd(r.commissionPaid || \"0\"), 0);\n    \n    // VIP support payouts (5% support for customer tier)\n    const vipSupports = Array.from(this.transactions.values()).filter(t =>\n      t.userId === userId && (t.type === 'vip_support' || t.description?.includes('VIP support')) && t.status === 'approved'\n    );\n    const totalVipSupport = vipSupports.reduce((sum, t) => toIntegerVnd(t.amount), 0);\n    \n    // KPI bonuses and other bonuses\n    const bonuses = Array.from(this.transactions.values()).filter(t =>\n      t.userId === userId && (t.type === 'kpi_bonus' || t.type === 'bonus') && t.status === 'approved'\n    );\n    const totalBonuses = bonuses.reduce((sum, t) => toIntegerVnd(t.amount), 0);\n\n    return totalProfitPayouts + totalWithdrawals + totalCommissions + totalVipSupport + totalBonuses;\n  }\n\n  async checkMaxoutLimit(userId: string): Promise<{ reached: boolean; limit: number; current: number }> {\n    const user = await this.getUser(userId);\n    if (!user) return { reached: false, limit: 0, current: 0 };\n\n    // Get total cumulative payouts from all sources\n    const totalCumulativePayouts = await this.calculateCumulativePayouts(userId);\n\n    // Customer tier: 210% of total card prices owned\n    if (user.businessTier === 'customer') {\n      // Calculate total card prices for this customer\n      const userCards = Array.from(this.cards.values()).filter(card => card.ownerId === userId);\n      const totalCardValue = userCards.reduce((sum, card) => toIntegerVnd(card.price), 0);\n      \n      const maxoutLimit = Math.floor(totalCardValue * 2.1); // 210% of card prices\n      \n      return {\n        reached: totalCumulativePayouts >= maxoutLimit,\n        limit: maxoutLimit,\n        current: totalCumulativePayouts,\n      };\n    }\n\n    // Angel tier: 5x investment amount\n    if (user.businessTier === 'angel') {\n      const investmentAmount = toIntegerVnd(user.investmentAmount || \"0\");\n      const maxoutLimit = investmentAmount * 5; // 5x investment\n      \n      return {\n        reached: totalCumulativePayouts >= maxoutLimit,\n        limit: maxoutLimit,\n        current: totalCumulativePayouts,\n      };\n    }\n\n    // Branch, Staff, and Founders have no payout limits\n    return { reached: false, limit: 0, current: totalCumulativePayouts };\n  }\n\n  // QR check-in operations\n  async createQrCheckin(checkin: { cardId: string; sessionType: string; notes?: string }): Promise<void> {\n    const card = await this.getCard(checkin.cardId);\n    if (!card) return;\n\n    // Create transaction record for QR check-in\n    await this.createTransaction({\n      userId: card.ownerId || \"\",\n      amount: \"0\",\n      type: \"qr_checkin\",\n      description: `QR Check-in: ${checkin.sessionType} ${checkin.notes || \"\"}`,\n      status: \"approved\",\n      approvedBy: \"system\",\n    });\n\n    // Update card's last check-in time\n    await this.updateCard(checkin.cardId, {\n      lastCheckIn: new Date(),\n    });\n\n    // Decrement remaining sessions for certain session types\n    if (checkin.sessionType === 'premium_session') {\n      await this.updateCardSessions(checkin.cardId, 1);\n    }\n  }\n\n  async updateCardSessions(cardId: string, decrement: number): Promise<Card | undefined> {\n    const card = await this.getCard(cardId);\n    if (!card) return undefined;\n\n    const currentSessions = card.remainingSessions || 0;\n    const newSessions = Math.max(0, currentSessions - decrement);\n\n    return await this.updateCard(cardId, {\n      remainingSessions: newSessions,\n    });\n  }\n\n  // Enhanced withdrawal operations\n  async createWithdrawalRequest(userId: string, amount: number, description: string): Promise<Transaction> {\n    const tax = this.calculateWithdrawalTax(amount);\n    const netAmount = amount - tax;\n\n    const transaction = await this.createTransaction({\n      userId,\n      amount: amount.toString(),\n      type: \"withdrawal\",\n      description: `${description} (Tax: ${tax} VND, Net: ${netAmount} VND)`,\n      status: \"pending\",\n      taxAmount: tax.toString(),\n    });\n\n    // Deduct from user balance (pending approval)\n    const balance = await this.getUserBalance(userId);\n    if (balance) {\n      const currentBalance = parseFloat(balance.availableBalance);\n      await this.updateUserBalance(userId, {\n        availableBalance: (currentBalance - amount).toString(),\n        description: `Withdrawal request: ${description}`,\n      });\n    }\n\n    return transaction;\n  }\n\n  async validateWithdrawalBalance(userId: string, amount: number): Promise<{ valid: boolean; availableBalance: number }> {\n    const balance = await this.getUserBalance(userId);\n    if (!balance) return { valid: false, availableBalance: 0 };\n\n    const availableBalance = parseFloat(balance.availableBalance || \"0\");\n    const withdrawalMinimum = 5000000; // 5M VND minimum\n\n    return {\n      valid: availableBalance >= amount && amount >= withdrawalMinimum,\n      availableBalance,\n    };\n  }\n\n  // Quarterly profit sharing with maxout\n  async processQuarterlyProfitSharingWithMaxout(period: string, grossProfitValue: string, respectMaxout: boolean): Promise<ProfitSharing> {\n    const grossProfit = parseFloat(grossProfitValue);\n    \n    // Calculate corporate tax and net profit after tax\n    const corporateTaxConfig = await this.getSystemConfig(\"corporate_tax_rate\");\n    const corporateTaxRate = corporateTaxConfig ? parseFloat(corporateTaxConfig.configValue) / 100 : 0.20; // Default 20%\n    \n    const corporateTax = grossProfit * corporateTaxRate;\n    const netProfitAfterTax = grossProfit - corporateTax;\n    \n    // 49% of net profit after corporate tax goes to shareholders\n    const shareableProfit = netProfitAfterTax * 0.49;\n\n    // Get all users with shares (excluding affiliates who don't get shares)\n    const usersWithShares = Array.from(this.users.values()).filter(user => \n      parseFloat(user.totalShares || \"0\") > 0 && user.businessTier !== 'affiliate'\n    );\n\n    const totalShares = usersWithShares.reduce((sum, user) => \n      sum + parseFloat(user.totalShares || \"0\"), 0\n    );\n\n    // Create profit sharing record\n    const profitSharing = await this.createProfitSharing({\n      period,\n      totalProfit: netProfitAfterTax.toString(),\n      distributableAmount: shareableProfit.toString(), \n      totalShares: totalShares.toString(),\n      status: \"processing\",\n      approvedBy: \"system\",\n    });\n\n    // Process individual distributions with redistribution for maxout cases\n    let totalDistributed = 0;\n    const distributions: Array<{user: any, shares: number, originalPortion: number, finalAmount: number, maxoutApplied: boolean}> = [];\n    \n    // First pass: Calculate initial distributions and track maxout cases\n    for (const user of usersWithShares) {\n      const userShares = parseFloat(user.totalShares || \"0\");\n      const userPortion = totalShares > 0 ? (userShares / totalShares) * shareableProfit : 0;\n      \n      let finalAmount = userPortion;\n      let maxoutApplied = false;\n\n      // Apply maxout check if enabled\n      if (respectMaxout) {\n        const maxoutCheck = await this.checkMaxoutLimit(user.id);\n        if (maxoutCheck.reached) {\n          // Calculate remaining capacity before hitting maxout\n          const remainingCapacity = Math.max(0, maxoutCheck.limit - maxoutCheck.current);\n          finalAmount = Math.min(userPortion, remainingCapacity);\n          maxoutApplied = finalAmount < userPortion;\n        }\n      }\n\n      distributions.push({\n        user, \n        shares: userShares,\n        originalPortion: userPortion,\n        finalAmount,\n        maxoutApplied\n      });\n      \n      totalDistributed += finalAmount;\n    }\n\n    // Iterative redistribution of remaining funds to maximize 49% distribution\n    let remainingPool = shareableProfit - totalDistributed;\n    let redistributionRounds = 0;\n    const maxRedistributionRounds = 10; // Prevent infinite loops\n\n    while (remainingPool > 1 && redistributionRounds < maxRedistributionRounds) {\n      redistributionRounds++;\n      \n      // Find users who can still receive more (not maxed out)\n      const eligibleDistributions = [];\n      for (const dist of distributions) {\n        if (respectMaxout) {\n          const maxoutCheck = await this.checkMaxoutLimit(dist.user.id);\n          const usedCapacity = maxoutCheck.current;\n          const remainingCapacity = Math.max(0, maxoutCheck.limit - usedCapacity - Math.floor(dist.finalAmount));\n          \n          if (remainingCapacity > 0 || !maxoutCheck.reached) {\n            eligibleDistributions.push({ ...dist, remainingCapacity });\n          }\n        } else {\n          eligibleDistributions.push({ ...dist, remainingCapacity: Infinity });\n        }\n      }\n\n      if (eligibleDistributions.length === 0) {\n        break; // No one can receive more funds\n      }\n\n      // Calculate shares for eligible users\n      const totalEligibleShares = eligibleDistributions.reduce((sum, d) => sum + d.shares, 0);\n      \n      let roundDistributed = 0;\n      for (const eligibleDist of eligibleDistributions) {\n        const shareRatio = eligibleDist.shares / totalEligibleShares;\n        const allocation = Math.floor(shareRatio * remainingPool);\n        \n        let actualAllocation = allocation;\n        if (respectMaxout && isFinite(eligibleDist.remainingCapacity)) {\n          actualAllocation = Math.min(allocation, eligibleDist.remainingCapacity);\n        }\n\n        // Find and update the original distribution\n        const originalDist = distributions.find(d => d.user.id === eligibleDist.user.id);\n        if (originalDist && actualAllocation > 0) {\n          originalDist.finalAmount += actualAllocation;\n          roundDistributed += actualAllocation;\n        }\n      }\n\n      remainingPool -= roundDistributed;\n      \n      // If we distributed very little this round, break to avoid infinite loops\n      if (roundDistributed < Math.min(10, remainingPool * 0.01)) {\n        break;\n      }\n    }\n\n    // Handle final remainder with proper treasury booking\n    const finalRemainder = Math.floor(remainingPool);\n    if (finalRemainder > 0) {\n      // Create a treasury rollover transaction for the undistributed remainder\n      await this.createTransaction({\n        userId: 'system',\n        amount: fromIntegerVnd(finalRemainder),\n        type: 'treasury_rollover',\n        description: `Profit sharing Q${period} remainder: ${finalRemainder} VND after ${redistributionRounds} redistribution rounds`,\n        status: 'approved',\n        approvedBy: 'system',\n      });\n\n      // Record audit log for transparency\n      await this.createAuditLog({\n        userId: 'system',\n        action: 'profit_sharing_remainder',\n        entityType: 'profit_sharing',\n        entityId: profitSharing.id,\n        details: `Undistributed remainder: ${finalRemainder} VND booked to treasury rollover after ${redistributionRounds} rounds`,\n      });\n    }\n\n    // Calculate final distribution total for reconciliation\n    const finalDistributionTotal = distributions.reduce((sum, dist) => sum + Math.floor(dist.finalAmount), 0);\n    const totalAccountedFor = finalDistributionTotal + finalRemainder;\n    \n    // Ensure 49% pool is fully accounted for (distributions + remainder = shareableProfit)\n    const reconciliationDifference = Math.floor(shareableProfit) - totalAccountedFor;\n    if (Math.abs(reconciliationDifference) > 1) {\n      await this.createAuditLog({\n        userId: 'system',\n        action: 'profit_sharing_reconciliation_error',\n        entityType: 'profit_sharing', \n        entityId: profitSharing.id,\n        details: `RECONCILIATION ERROR: Expected ${Math.floor(shareableProfit)} VND, accounted ${totalAccountedFor} VND, difference: ${reconciliationDifference} VND`,\n      });\n    }\n\n    // Third pass: Create distribution records and update balances\n    for (const dist of distributions) {\n      const integerAmount = Math.floor(dist.finalAmount);\n      \n      // Create distribution record\n      await this.createProfitDistribution({\n        profitSharingId: profitSharing.id,\n        userId: dist.user.id,\n        shareAmount: dist.shares.toString(),\n        distributionAmount: integerAmount.toString(),\n        maxoutApplied: dist.maxoutApplied,\n        status: \"approved\",\n      });\n\n      // Add to user balance (only if amount > 0)\n      if (integerAmount > 0) {\n        await this.addToUserBalance(dist.user.id, integerAmount, \n          `Quarterly profit sharing Q${period}: ${dist.shares} shares (${dist.maxoutApplied ? 'maxout applied' : 'full amount'})`\n        );\n        \n        // Update maxoutReached status if user hit their limit\n        if (dist.maxoutApplied) {\n          await this.updateUser(dist.user.id, { maxoutReached: true });\n        }\n      }\n    }\n\n    // Update profit sharing status to completed\n    return await this.updateProfitSharing(profitSharing.id, {\n      status: \"completed\",\n      processedAt: new Date(),\n    }) || profitSharing;\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const now = new Date();\n    const user: User = { \n      ...insertUser, \n      id, \n      status: insertUser.status || \"active\",\n      refCode: insertUser.refCode || null,\n      businessTier: insertUser.businessTier || null,\n      investmentAmount: insertUser.investmentAmount || \"0\",\n      totalShares: insertUser.totalShares || \"0\",\n      maxoutReached: insertUser.maxoutReached || false,\n      createdAt: insertUser.createdAt || now,\n      updatedAt: insertUser.updatedAt || now,\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updateData: Partial<InsertUser>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updateData };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Card operations\n  async getCards(): Promise<Card[]> {\n    return Array.from(this.cards.values());\n  }\n\n  async getCard(id: string): Promise<Card | undefined> {\n    return this.cards.get(id);\n  }\n\n  async createCard(insertCard: InsertCard): Promise<Card> {\n    const id = randomUUID();\n    const card: Card = { \n      ...insertCard, \n      id,\n      issuedDate: new Date(),\n      lastCheckIn: null,\n      status: insertCard.status || \"active\",\n      ownerId: insertCard.ownerId || null,\n      remainingSessions: insertCard.remainingSessions || 0,\n      shareHistory: insertCard.shareHistory || \"\",\n      connectionCommission: insertCard.connectionCommission || \"8.0\",\n      vipSupport: insertCard.vipSupport || \"5.0\",\n      currentShares: insertCard.currentShares || \"0\",\n      maxoutLimit: insertCard.maxoutLimit || (parseFloat(insertCard.price) * 2.1).toString()\n    };\n    this.cards.set(id, card);\n    return card;\n  }\n\n  async updateCard(id: string, updateData: Partial<InsertCard>): Promise<Card | undefined> {\n    const card = this.cards.get(id);\n    if (!card) return undefined;\n    \n    const updatedCard = { ...card, ...updateData };\n    this.cards.set(id, updatedCard);\n    return updatedCard;\n  }\n\n  async deleteCard(id: string): Promise<boolean> {\n    return this.cards.delete(id);\n  }\n\n  // Branch operations\n  async getBranches(): Promise<Branch[]> {\n    return Array.from(this.branches.values());\n  }\n\n  async getBranch(id: string): Promise<Branch | undefined> {\n    return this.branches.get(id);\n  }\n\n  async createBranch(insertBranch: InsertBranch): Promise<Branch> {\n    const id = randomUUID();\n    const branch: Branch = { \n      ...insertBranch, \n      id,\n      monthlyRevenue: insertBranch.monthlyRevenue || \"0\",\n      staffCount: insertBranch.staffCount || 0,\n      currentKpi: insertBranch.currentKpi || \"0\",\n      monthlyTarget: insertBranch.monthlyTarget || \"0\"\n    };\n    this.branches.set(id, branch);\n    return branch;\n  }\n\n  async updateBranch(id: string, updateData: Partial<InsertBranch>): Promise<Branch | undefined> {\n    const branch = this.branches.get(id);\n    if (!branch) return undefined;\n    \n    const updatedBranch = { ...branch, ...updateData };\n    this.branches.set(id, updatedBranch);\n    return updatedBranch;\n  }\n\n  // Staff operations\n  async getStaff(): Promise<Staff[]> {\n    return Array.from(this.staff.values());\n  }\n\n  async getStaffMember(id: string): Promise<Staff | undefined> {\n    return this.staff.get(id);\n  }\n\n  async createStaffMember(insertStaff: InsertStaff): Promise<Staff> {\n    const id = randomUUID();\n    const staffMember: Staff = { \n      ...insertStaff, \n      id,\n      branchId: insertStaff.branchId || null,\n      equityPercentage: insertStaff.equityPercentage || \"0\",\n      shares: insertStaff.shares ?? 0,\n      updatedAt: new Date()\n    };\n    this.staff.set(id, staffMember);\n    return staffMember;\n  }\n\n  async updateStaffMember(id: string, updateData: Partial<InsertStaff>): Promise<Staff | undefined> {\n    const staffMember = this.staff.get(id);\n    if (!staffMember) return undefined;\n    \n    const updatedStaff = { ...staffMember, ...updateData };\n    this.staff.set(id, updatedStaff);\n    return updatedStaff;\n  }\n\n  async deleteStaffMember(id: string): Promise<boolean> {\n    return this.staff.delete(id);\n  }\n\n  // Transaction operations\n  async getTransactions(): Promise<Transaction[]> {\n    return Array.from(this.transactions.values());\n  }\n\n  async getTransaction(id: string): Promise<Transaction | undefined> {\n    return this.transactions.get(id);\n  }\n\n  async createTransaction(insertTransaction: InsertTransaction): Promise<Transaction> {\n    const id = randomUUID();\n    const transaction: Transaction = { \n      ...insertTransaction, \n      id,\n      date: new Date(),\n      branchId: insertTransaction.branchId || null,\n      cardId: insertTransaction.cardId || null,\n      userId: insertTransaction.userId || null,\n      referralCode: insertTransaction.referralCode || null,\n      status: insertTransaction.status || \"pending\",\n      taxAmount: insertTransaction.taxAmount || \"0\",\n      documentPath: insertTransaction.documentPath || null,\n      packageId: insertTransaction.packageId || null,\n      approvedBy: insertTransaction.approvedBy || null,\n      approvedAt: insertTransaction.approvedAt || null\n    };\n    this.transactions.set(id, transaction);\n    return transaction;\n  }\n\n  // KPI operations\n  async getKpis(): Promise<Kpi[]> {\n    return Array.from(this.kpis.values());\n  }\n\n  async createKpi(insertKpi: InsertKpi): Promise<Kpi> {\n    const id = randomUUID();\n    const kpi: Kpi = { \n      ...insertKpi, \n      id,\n      branchId: insertKpi.branchId || null,\n      cardSales: insertKpi.cardSales || 0,\n      cardSalesRevenue: insertKpi.cardSalesRevenue || \"0\",\n      revisitRate: insertKpi.revisitRate || \"0\",\n      deviceRevenue: insertKpi.deviceRevenue || \"0\",\n      totalRevenue: insertKpi.totalRevenue || \"0\", \n      expenses: insertKpi.expenses || \"0\",\n      kpiScore: insertKpi.kpiScore || \"0\",\n      createdAt: new Date()\n    };\n    this.kpis.set(id, kpi);\n    return kpi;\n  }\n\n  async getKpisByBranch(branchId: string): Promise<Kpi[]> {\n    return Array.from(this.kpis.values()).filter(kpi => kpi.branchId === branchId);\n  }\n\n  async getKpisByPeriod(period: string, periodValue: string): Promise<Kpi[]> {\n    return Array.from(this.kpis.values()).filter(\n      kpi => kpi.period === period && kpi.periodValue === periodValue\n    );\n  }\n\n  async updateKpi(id: string, updateData: Partial<InsertKpi>): Promise<Kpi | undefined> {\n    const kpi = this.kpis.get(id);\n    if (!kpi) {\n      return undefined;\n    }\n    const updatedKpi = { ...kpi, ...updateData };\n    this.kpis.set(id, updatedKpi);\n    return updatedKpi;\n  }\n\n  async calculateBranchKpi(branchId: string, period: string, periodValue: string): Promise<number> {\n    const kpis = await this.getKpisByBranch(branchId);\n    const periodKpis = kpis.filter(kpi => kpi.period === period && kpi.periodValue === periodValue);\n    \n    if (periodKpis.length === 0) {\n      return 0;\n    }\n    \n    // Calculate weighted KPI score based on revenue, revisit rate, and device revenue\n    const totalRevenue = periodKpis.reduce((sum, kpi) => sum + parseFloat(kpi.totalRevenue || \"0\"), 0);\n    const avgRevisitRate = periodKpis.reduce((sum, kpi) => sum + parseFloat(kpi.revisitRate || \"0\"), 0) / periodKpis.length;\n    const deviceRevenue = periodKpis.reduce((sum, kpi) => sum + parseFloat(kpi.deviceRevenue || \"0\"), 0);\n    \n    // Weighted score: 40% revenue performance, 30% revisit rate, 30% device revenue\n    const branch = await this.getBranch(branchId);\n    const target = parseFloat(branch?.monthlyTarget || \"1000000\"); // Default 1M target\n    \n    const revenueScore = Math.min(100, (totalRevenue / target) * 100);\n    const revisitScore = Math.min(100, avgRevisitRate);\n    const deviceScore = Math.min(100, (deviceRevenue / (target * 0.3)) * 100); // 30% of target for devices\n    \n    return Math.round((revenueScore * 0.4) + (revisitScore * 0.3) + (deviceScore * 0.3));\n  }\n\n  // Staff KPI operations\n  async getStaffKpis(): Promise<StaffKpi[]> {\n    return Array.from(this.staffKpis.values());\n  }\n\n  async getStaffKpisByStaff(staffId: string): Promise<StaffKpi[]> {\n    return Array.from(this.staffKpis.values()).filter(staffKpi => staffKpi.staffId === staffId);\n  }\n\n  async getStaffKpisByPeriod(period: string, periodValue: string): Promise<StaffKpi[]> {\n    return Array.from(this.staffKpis.values()).filter(\n      staffKpi => staffKpi.period === period && staffKpi.periodValue === periodValue\n    );\n  }\n\n  async createStaffKpi(insertStaffKpi: InsertStaffKpi): Promise<StaffKpi> {\n    const id = randomUUID();\n    const staffKpi: StaffKpi = {\n      ...insertStaffKpi,\n      id,\n      staffId: insertStaffKpi.staffId || null,\n      cardSales: insertStaffKpi.cardSales ?? 0,\n      customerRetention: insertStaffKpi.customerRetention || \"0\",\n      totalPoints: insertStaffKpi.totalPoints || \"0\",\n      score: insertStaffKpi.score || \"0\",\n      targetRevenue: insertStaffKpi.targetRevenue || \"0\",\n      bonusAmount: insertStaffKpi.bonusAmount || \"0\",\n      slotsEarned: insertStaffKpi.slotsEarned ?? 0,\n      sharesAwarded: insertStaffKpi.sharesAwarded || \"0\",\n      profitShareAmount: insertStaffKpi.profitShareAmount || \"0\",\n      isProcessed: insertStaffKpi.isProcessed ?? false,\n      createdAt: new Date(),\n      processedAt: insertStaffKpi.isProcessed ? new Date() : null\n    };\n    this.staffKpis.set(id, staffKpi);\n    return staffKpi;\n  }\n\n  async updateStaffKpi(id: string, updateData: Partial<InsertStaffKpi>): Promise<StaffKpi | undefined> {\n    const staffKpi = this.staffKpis.get(id);\n    if (!staffKpi) return undefined;\n    \n    const updatedStaffKpi = { ...staffKpi, ...updateData };\n    this.staffKpis.set(id, updatedStaffKpi);\n    return updatedStaffKpi;\n  }\n\n  async calculateStaffKpiPoints(staffId: string, period: string, periodValue: string): Promise<number> {\n    const staffKpis = await this.getStaffKpisByStaff(staffId);\n    const periodKpis = staffKpis.filter(kpi => kpi.period === period && kpi.periodValue === periodValue);\n    \n    if (periodKpis.length === 0) {\n      return 0;\n    }\n    \n    // Calculate points: each card sale = 5 points, retention rate percentage = direct points\n    const totalCardSales = periodKpis.reduce((sum, kpi) => sum + (kpi.cardSales || 0), 0);\n    const avgRetentionRate = periodKpis.reduce((sum, kpi) => sum + parseFloat(kpi.customerRetention || \"0\"), 0) / periodKpis.length;\n    \n    const cardSalesPoints = totalCardSales * 5; // 5 points per card sold\n    const retentionPoints = avgRetentionRate; // Direct percentage as points\n    \n    return Math.round(cardSalesPoints + retentionPoints);\n  }\n\n  async processQuarterlyShares(period: string, periodValue: string): Promise<void> {\n    const quarterlyKpis = await this.getStaffKpisByPeriod(period, periodValue);\n    \n    // Group KPIs by staff member\n    const kpisByStaff = new Map<string, StaffKpi[]>();\n    for (const kpi of quarterlyKpis) {\n      if (!kpi.staffId) continue;\n      if (!kpisByStaff.has(kpi.staffId)) {\n        kpisByStaff.set(kpi.staffId, []);\n      }\n      kpisByStaff.get(kpi.staffId)!.push(kpi);\n    }\n    \n    // Process shares for each staff member\n    for (const [staffId, staffKpis] of Array.from(kpisByStaff.entries())) {\n      // Check if any KPI for this staff is already processed\n      const hasProcessedKpi = staffKpis.some((kpi: StaffKpi) => kpi.isProcessed);\n      if (hasProcessedKpi) continue; // Skip if already processed\n      \n      // Calculate total points for this staff member across all their KPIs for this quarter\n      const totalQuarterlyPoints = await this.calculateStaffKpiPoints(staffId, period, periodValue);\n      \n      // Calculate slots: ≥50 points = 1 slot (50 shares)\n      const slotsEarned = Math.floor(totalQuarterlyPoints / 50);\n      const sharesAwarded = slotsEarned * 50;\n      \n      // Calculate profit share amount (49% of branch profit)\n      const profitShareAmount = sharesAwarded * 1000; // Example calculation\n      \n      const now = new Date();\n      \n      // Update all staff KPI records for this quarter to mark as processed\n      for (const staffKpi of staffKpis) {\n        await this.updateStaffKpi(staffKpi.id, {\n          slotsEarned,\n          sharesAwarded: sharesAwarded.toString(),\n          profitShareAmount: profitShareAmount.toString(),\n          isProcessed: true\n        } as Partial<InsertStaffKpi>);\n        \n        // Update the record directly to set processedAt since InsertStaffKpi might not include it\n        const currentKpi = this.staffKpis.get(staffKpi.id);\n        if (currentKpi) {\n          this.staffKpis.set(staffKpi.id, { ...currentKpi, processedAt: now });\n        }\n      }\n      \n      // Update staff member's total shares if shares were awarded\n      if (sharesAwarded > 0) {\n        const staff = this.staff.get(staffId);\n        if (staff) {\n          const currentShares = staff.shares || 0;\n          const newTotalShares = currentShares + sharesAwarded;\n          \n          const updatedStaff = {\n            ...staff,\n            shares: newTotalShares,\n            updatedAt: now\n          };\n          \n          this.staff.set(staffId, updatedStaff);\n        }\n      }\n    }\n  }\n\n  // Referral operations\n  async getReferrals(): Promise<Referral[]> {\n    return Array.from(this.referrals.values());\n  }\n\n  async getReferralsByReferrer(referrerId: string): Promise<Referral[]> {\n    return Array.from(this.referrals.values()).filter(referral => referral.referrerId === referrerId);\n  }\n\n  async getReferralByCode(referralCode: string): Promise<Referral | undefined> {\n    return Array.from(this.referrals.values()).find(referral => referral.referralCode === referralCode);\n  }\n\n  async createReferral(insertReferral: InsertReferral): Promise<Referral> {\n    const id = randomUUID();\n    const referral: Referral = {\n      id,\n      referrerId: insertReferral.referrerId || null,\n      referredUserId: insertReferral.referredUserId || null,\n      referralCode: insertReferral.referralCode,\n      customerName: insertReferral.customerName || null,\n      firstTransactionId: insertReferral.firstTransactionId || null,\n      contributionValue: insertReferral.contributionValue || \"0\",\n      commissionRate: insertReferral.commissionRate || \"8.0\",\n      commissionAmount: insertReferral.commissionAmount || \"0\",\n      commissionPaid: insertReferral.commissionPaid || \"0\",\n      status: insertReferral.status || \"pending\",\n      referralDate: new Date(),\n      paidDate: null\n    };\n    this.referrals.set(id, referral);\n    return referral;\n  }\n\n  async updateReferral(id: string, updateData: Partial<InsertReferral>): Promise<Referral | undefined> {\n    const referral = this.referrals.get(id);\n    if (!referral) return undefined;\n    \n    const updatedReferral = { ...referral, ...updateData };\n    this.referrals.set(id, updatedReferral);\n    return updatedReferral;\n  }\n\n  async generateReferralCode(staffId: string): Promise<string> {\n    const timestamp = Date.now();\n    const code = `REF-${staffId.slice(-6)}-${timestamp.toString().slice(-6)}`;\n    \n    // Check if code already exists and regenerate if needed\n    const existingReferral = await this.getReferralByCode(code);\n    if (existingReferral) {\n      // Recursive call with slight delay to ensure different timestamp\n      await new Promise(resolve => setTimeout(resolve, 1));\n      return this.generateReferralCode(staffId);\n    }\n    \n    return code;\n  }\n\n  async calculateReferralCommission(referralId: string): Promise<number> {\n    const referral = this.referrals.get(referralId);\n    if (!referral) return 0;\n    \n    const contributionValue = parseFloat(referral.contributionValue || \"0\");\n    const commissionRate = parseFloat(referral.commissionRate || \"8.0\") / 100;\n    \n    return Math.round(contributionValue * commissionRate);\n  }\n\n  async processFirstTransaction(referralCode: string, transactionId: string): Promise<Referral | undefined> {\n    const referral = await this.getReferralByCode(referralCode);\n    if (!referral) return undefined;\n    \n    // Only process if this is the first transaction (no existing first transaction)\n    if (referral.firstTransactionId) return referral;\n    \n    // SECURITY: Derive contributionValue from actual stored transaction\n    const transaction = await this.getTransaction(transactionId);\n    if (!transaction) {\n      throw new Error(\"Transaction not found - invalid transactionId\");\n    }\n    \n    // Validate this is a qualifying transaction (income only)\n    if (transaction.type !== \"income\") {\n      throw new Error(\"Only income transactions qualify for referral commissions\");\n    }\n    \n    const contributionValue = parseFloat(transaction.amount);\n    const commissionRate = parseFloat(referral.commissionRate || \"8.0\") / 100;\n    const commissionAmount = Math.round(contributionValue * commissionRate);\n    \n    const updatedReferral = await this.updateReferral(referral.id, {\n      firstTransactionId: transactionId,\n      contributionValue: contributionValue.toString(),\n      commissionAmount: commissionAmount.toString(),\n      status: \"completed\"\n    });\n    \n    return updatedReferral;\n  }\n\n  async markCommissionPaid(referralId: string, paidAmount: number): Promise<Referral | undefined> {\n    const referral = this.referrals.get(referralId);\n    if (!referral) return undefined;\n    \n    const currentPaid = parseFloat(referral.commissionPaid || \"0\");\n    const commissionAmount = parseFloat(referral.commissionAmount || \"0\");\n    const remainingAmount = commissionAmount - currentPaid;\n    \n    // SECURITY: Prevent overpayment\n    if (paidAmount > remainingAmount) {\n      throw new Error(`Cannot pay ${paidAmount.toLocaleString('vi-VN')} VND. Only ${remainingAmount.toLocaleString('vi-VN')} VND remaining.`);\n    }\n    \n    if (paidAmount <= 0) {\n      throw new Error(\"Payment amount must be greater than 0\");\n    }\n    \n    const newTotalPaid = currentPaid + paidAmount;\n    \n    // BUSINESS LOGIC: Update status when fully paid\n    let newStatus = referral.status;\n    if (newTotalPaid >= commissionAmount) {\n      newStatus = \"paid\";\n    }\n    \n    const updatedReferral = { \n      ...referral, \n      commissionPaid: newTotalPaid.toString(),\n      status: newStatus,\n      paidDate: new Date()\n    };\n    \n    this.referrals.set(referralId, updatedReferral);\n    return updatedReferral;\n  }\n\n  async processCommissionPayments(referrerId: string): Promise<number> {\n    const referrals = await this.getReferralsByReferrer(referrerId);\n    let totalPaid = 0;\n    \n    for (const referral of referrals) {\n      const commissionAmount = parseFloat(referral.commissionAmount || \"0\");\n      const commissionPaid = parseFloat(referral.commissionPaid || \"0\");\n      const pendingAmount = commissionAmount - commissionPaid;\n      \n      if (pendingAmount > 0 && referral.status === \"completed\") {\n        await this.markCommissionPaid(referral.id, pendingAmount);\n        totalPaid += pendingAmount;\n      }\n    }\n    \n    return totalPaid;\n  }\n\n  // Profit sharing operations\n  async getProfitSharings(): Promise<ProfitSharing[]> {\n    return Array.from(this.profitSharings.values());\n  }\n\n  async getProfitSharing(id: string): Promise<ProfitSharing | undefined> {\n    return this.profitSharings.get(id);\n  }\n\n  async getProfitSharingByPeriod(period: string, periodValue: string): Promise<ProfitSharing | undefined> {\n    return Array.from(this.profitSharings.values()).find(\n      profitSharing => profitSharing.period === period && profitSharing.periodValue === periodValue\n    );\n  }\n\n  async createProfitSharing(profitSharingData: InsertProfitSharing): Promise<ProfitSharing> {\n    const id = randomUUID();\n    const profitSharing: ProfitSharing = {\n      id,\n      period: profitSharingData.period,\n      periodValue: profitSharingData.periodValue,\n      totalRevenue: profitSharingData.totalRevenue || \"0\",\n      totalExpenses: profitSharingData.totalExpenses || \"0\",\n      netProfit: profitSharingData.netProfit || \"0\",\n      profitSharePool: profitSharingData.profitSharePool || \"0\",\n      totalShares: profitSharingData.totalShares ?? 0,\n      profitPerShare: profitSharingData.profitPerShare || \"0\",\n      distributionStatus: profitSharingData.distributionStatus || \"pending\",\n      createdAt: new Date(),\n      processedAt: null,\n    };\n    this.profitSharings.set(id, profitSharing);\n    return profitSharing;\n  }\n\n  async updateProfitSharing(id: string, updateData: Partial<InsertProfitSharing>): Promise<ProfitSharing | undefined> {\n    const profitSharing = this.profitSharings.get(id);\n    if (!profitSharing) return undefined;\n    \n    const updatedProfitSharing = { ...profitSharing, ...updateData };\n    this.profitSharings.set(id, updatedProfitSharing);\n    return updatedProfitSharing;\n  }\n\n  async calculateQuarterlyProfit(period: string, periodValue: string): Promise<{ revenue: number; expenses: number; profit: number }> {\n    // Validate period type - should only be quarterly\n    if (period !== \"quarter\") {\n      throw new Error(\"Profit sharing calculation is only supported for quarterly periods\");\n    }\n\n    // Validate quarter format using the new validation helper\n    const { startDate, endDate, isValid } = this.validateQuarterBoundaries(periodValue);\n    if (!isValid) {\n      throw new Error(`Invalid quarter format: ${periodValue}. Expected format: YYYY-Q[1-4]`);\n    }\n\n    const transactions = Array.from(this.transactions.values());\n    \n    // Filter transactions for the quarter\n    const quarterlyTransactions = transactions.filter(transaction => {\n      const transactionDate = transaction.date ? new Date(transaction.date) : new Date();\n      return transactionDate >= startDate && transactionDate <= endDate;\n    });\n    \n    // Calculate revenue and expenses (FIX: Use correct transaction schema)\n    let totalRevenue = 0;\n    let totalExpenses = 0;\n    \n    for (const transaction of quarterlyTransactions) {\n      const amount = parseFloat(transaction.amount);\n      \n      if (transaction.type === \"income\") {\n        totalRevenue += amount;\n      } else if (transaction.type === \"expense\") {\n        totalExpenses += amount;\n      }\n    }\n    \n    const netProfit = totalRevenue - totalExpenses;\n    \n    return {\n      revenue: totalRevenue,\n      expenses: totalExpenses,\n      profit: netProfit\n    };\n  }\n\n  async processQuarterlyProfitSharing(period: string, periodValue: string, forceReprocess: boolean = false): Promise<ProfitSharing> {\n    // IDEMPOTENCY: Robust check for existing processing\n    const existingProfitSharing = await this.getProfitSharingByPeriod(period, periodValue);\n    if (existingProfitSharing) {\n      if (existingProfitSharing.distributionStatus === \"completed\" && !forceReprocess) {\n        throw new Error(`Profit sharing for ${period} ${periodValue} has already been completed. Use forceReprocess=true to override.`);\n      }\n      \n      // Check for existing distributions to prevent duplicates\n      const existingDistributions = await this.getProfitDistributionsBySharing(existingProfitSharing.id);\n      if (existingDistributions.length > 0 && !forceReprocess) {\n        throw new Error(`Distributions already exist for ${period} ${periodValue}. Use forceReprocess=true to recreate.`);\n      }\n      \n      // If reprocessing, clean up existing distributions\n      if (forceReprocess && existingDistributions.length > 0) {\n        for (const dist of existingDistributions) {\n          this.profitDistributions.delete(dist.id);\n        }\n        console.log(`🗑️ Cleared ${existingDistributions.length} existing distributions for reprocessing`);\n      }\n    }\n    \n    // Calculate quarterly profit with validation\n    const { revenue, expenses, profit } = await this.calculateQuarterlyProfit(period, periodValue);\n    \n    // Ensure profit is positive for distribution\n    if (profit <= 0) {\n      throw new Error(`Cannot distribute shares for negative or zero profit: ${profit.toLocaleString('vi-VN')} VND`);\n    }\n    \n    // Calculate 49% profit share pool with proper rounding\n    const profitSharePool = Math.round(profit * 0.49 * 100) / 100; // Round to 2 decimal places\n    \n    // Get total shares outstanding\n    const allStaff = Array.from(this.staff.values());\n    const totalShares = allStaff.reduce((sum, staff) => sum + (staff.shares || 0), 0);\n    \n    if (totalShares === 0) {\n      throw new Error(\"Cannot process profit sharing: No shares outstanding\");\n    }\n    \n    // Calculate profit per share with proper precision\n    const profitPerShare = Math.round((profitSharePool / totalShares) * 100) / 100;\n    \n    let profitSharing: ProfitSharing;\n    \n    if (existingProfitSharing) {\n      // Update existing profit sharing\n      profitSharing = await this.updateProfitSharing(existingProfitSharing.id, {\n        totalRevenue: revenue.toString(),\n        totalExpenses: expenses.toString(),\n        netProfit: profit.toString(),\n        profitSharePool: profitSharePool.toString(),\n        totalShares,\n        profitPerShare: profitPerShare.toString(),\n        distributionStatus: \"completed\"\n      }) as ProfitSharing;\n    } else {\n      // Create new profit sharing record\n      profitSharing = await this.createProfitSharing({\n        period,\n        periodValue,\n        totalRevenue: revenue.toString(),\n        totalExpenses: expenses.toString(),\n        netProfit: profit.toString(),\n        profitSharePool: profitSharePool.toString(),\n        totalShares,\n        profitPerShare: profitPerShare.toString(),\n        distributionStatus: \"completed\"\n      });\n    }\n    \n    // Create individual distributions with proper rounding\n    let totalDistributed = 0;\n    const shareholderStaff = allStaff.filter(staff => (staff.shares || 0) > 0);\n    \n    for (let i = 0; i < shareholderStaff.length; i++) {\n      const staff = shareholderStaff[i];\n      const shares = staff.shares || 0;\n      \n      // Calculate distribution amount with rounding\n      let distributionAmount = Math.round(shares * profitPerShare * 100) / 100;\n      \n      // Handle rounding remainder for the last shareholder\n      if (i === shareholderStaff.length - 1) {\n        const remainder = profitSharePool - totalDistributed;\n        distributionAmount = remainder;\n      }\n      \n      totalDistributed += distributionAmount;\n      \n      await this.createProfitDistribution({\n        profitSharingId: profitSharing.id,\n        staffId: staff.id,\n        staffName: staff.name,\n        sharesOwned: shares,\n        distributionAmount: distributionAmount.toString(),\n        paymentStatus: \"pending\"\n      });\n    }\n    \n    console.log(`✅ Processed quarterly profit sharing for ${periodValue}:`);\n    console.log(`📊 Total profit: ${profit.toLocaleString('vi-VN')} VND`);\n    console.log(`💰 Profit share pool (49%): ${profitSharePool.toLocaleString('vi-VN')} VND`);\n    console.log(`📈 Total shares: ${totalShares.toLocaleString()}`);\n    console.log(`💎 Profit per share: ${profitPerShare.toLocaleString('vi-VN')} VND`);\n    console.log(`👥 Distributions created: ${shareholderStaff.length}`);\n    \n    return profitSharing;\n  }\n\n  // Investment package operations\n  async getInvestmentPackages(): Promise<InvestmentPackage[]> {\n    return Array.from(this.investmentPackages.values());\n  }\n\n  async getInvestmentPackage(id: string): Promise<InvestmentPackage | undefined> {\n    return this.investmentPackages.get(id);\n  }\n\n  async getActiveInvestmentPackages(): Promise<InvestmentPackage[]> {\n    return Array.from(this.investmentPackages.values()).filter(pkg => pkg.isActive);\n  }\n\n  async createInvestmentPackage(packageData: InsertInvestmentPackage): Promise<InvestmentPackage> {\n    const id = randomUUID();\n    const investmentPackage: InvestmentPackage = {\n      ...packageData,\n      id,\n      minAmount: packageData.minAmount,\n      maxAmount: packageData.maxAmount || null,\n      description: packageData.description || null,\n      expectedReturn: packageData.expectedReturn || \"0\",\n      duration: packageData.duration || 12,\n      isActive: packageData.isActive ?? true,\n      createdAt: new Date()\n    };\n    this.investmentPackages.set(id, investmentPackage);\n    return investmentPackage;\n  }\n\n  async updateInvestmentPackage(id: string, packageData: Partial<InsertInvestmentPackage>): Promise<InvestmentPackage | undefined> {\n    const existingPackage = this.investmentPackages.get(id);\n    if (!existingPackage) return undefined;\n    \n    const updatedPackage = { ...existingPackage, ...packageData };\n    this.investmentPackages.set(id, updatedPackage);\n    return updatedPackage;\n  }\n\n  // Cash flow operations\n  async createCashFlowTransaction(transaction: InsertTransaction): Promise<Transaction> {\n    const id = randomUUID();\n    const taxAmount = transaction.type === \"withdraw\" ? this.calculateWithdrawalTax(parseFloat(transaction.amount)) : 0;\n    \n    const cashFlowTransaction: Transaction = {\n      ...transaction,\n      id,\n      date: new Date(),\n      branchId: transaction.branchId || null,\n      cardId: transaction.cardId || null,\n      userId: transaction.userId || null,\n      referralCode: transaction.referralCode || null,\n      status: transaction.status || \"pending\",\n      taxAmount: taxAmount.toString(),\n      documentPath: transaction.documentPath || null,\n      packageId: transaction.packageId || null,\n      approvedBy: transaction.approvedBy || null,\n      approvedAt: transaction.approvedAt || null\n    };\n    this.transactions.set(id, cashFlowTransaction);\n    return cashFlowTransaction;\n  }\n\n  async getCashFlowTransactions(userId?: string): Promise<Transaction[]> {\n    const allTransactions = Array.from(this.transactions.values());\n    if (userId) {\n      return allTransactions.filter(t => t.userId === userId);\n    }\n    return allTransactions.filter(t => [\"deposit\", \"invest\", \"withdraw\", \"share_distribution\"].includes(t.type));\n  }\n\n  async getCashFlowTransactionsByType(type: string): Promise<Transaction[]> {\n    return Array.from(this.transactions.values()).filter(t => t.type === type);\n  }\n\n  async approveCashFlowTransaction(transactionId: string, approvedBy: string): Promise<Transaction | undefined> {\n    const transaction = this.transactions.get(transactionId);\n    if (!transaction) return undefined;\n    \n    if (transaction.status !== \"pending\") {\n      throw new Error(`Transaction ${transactionId} is not in pending status`);\n    }\n    \n    const updatedTransaction = {\n      ...transaction,\n      status: \"approved\",\n      approvedBy,\n      approvedAt: new Date()\n    };\n    this.transactions.set(transactionId, updatedTransaction);\n    return updatedTransaction;\n  }\n\n  async rejectCashFlowTransaction(transactionId: string, approvedBy: string, reason?: string): Promise<Transaction | undefined> {\n    const transaction = this.transactions.get(transactionId);\n    if (!transaction) return undefined;\n    \n    if (transaction.status !== \"pending\") {\n      throw new Error(`Transaction ${transactionId} is not in pending status`);\n    }\n    \n    const updatedTransaction = {\n      ...transaction,\n      status: \"rejected\",\n      approvedBy,\n      approvedAt: new Date(),\n      description: reason ? `${transaction.description} (Rejected: ${reason})` : transaction.description\n    };\n    this.transactions.set(transactionId, updatedTransaction);\n    return updatedTransaction;\n  }\n\n  calculateWithdrawalTax(amount: number): number {\n    // 10% tax for withdrawals over 10M VND\n    if (amount > 10000000) {\n      return Math.round(amount * 0.1);\n    }\n    return 0;\n  }\n\n  // Helper method for quarter validation\n  private validateQuarterBoundaries(periodValue: string): { startDate: Date; endDate: Date; isValid: boolean } {\n    return validateQuarterBoundaries(periodValue);\n  }\n\n  // Profit distribution operations\n  async getProfitDistributions(): Promise<ProfitDistribution[]> {\n    return Array.from(this.profitDistributions.values());\n  }\n\n  async getProfitDistributionsBySharing(profitSharingId: string): Promise<ProfitDistribution[]> {\n    return Array.from(this.profitDistributions.values()).filter(\n      distribution => distribution.profitSharingId === profitSharingId\n    );\n  }\n\n  async createProfitDistribution(distributionData: InsertProfitDistribution): Promise<ProfitDistribution> {\n    const id = randomUUID();\n    const distribution: ProfitDistribution = {\n      id,\n      profitSharingId: distributionData.profitSharingId || null,\n      staffId: distributionData.staffId || null,\n      staffName: distributionData.staffName,\n      sharesOwned: distributionData.sharesOwned ?? 0,\n      distributionAmount: distributionData.distributionAmount || \"0\",\n      paymentStatus: distributionData.paymentStatus || \"pending\",\n      createdAt: new Date(),\n      paidAt: null,\n    };\n    this.profitDistributions.set(id, distribution);\n    return distribution;\n  }\n\n  async updateProfitDistribution(id: string, updateData: Partial<InsertProfitDistribution>): Promise<ProfitDistribution | undefined> {\n    const distribution = this.profitDistributions.get(id);\n    if (!distribution) return undefined;\n    \n    const updatedDistribution = { ...distribution, ...updateData };\n    this.profitDistributions.set(id, updatedDistribution);\n    return updatedDistribution;\n  }\n\n  async markDistributionPaid(distributionId: string): Promise<ProfitDistribution | undefined> {\n    const distribution = this.profitDistributions.get(distributionId);\n    if (!distribution) {\n      throw new Error(`Distribution not found: ${distributionId}`);\n    }\n    \n    // PAYMENT SAFEGUARD: Prevent double payments\n    if (distribution.paymentStatus === \"paid\") {\n      throw new Error(`Distribution ${distributionId} has already been paid on ${distribution.paidAt?.toLocaleDateString('vi-VN')}`);\n    }\n    \n    if (distribution.paymentStatus === \"cancelled\") {\n      throw new Error(`Cannot mark cancelled distribution ${distributionId} as paid`);\n    }\n    \n    const updatedDistribution = {\n      ...distribution,\n      paymentStatus: \"paid\" as const,\n      paidAt: new Date()\n    };\n    \n    this.profitDistributions.set(distributionId, updatedDistribution);\n    console.log(`💸 Marked distribution ${distributionId} as paid: ${parseFloat(distribution.distributionAmount || \"0\").toLocaleString('vi-VN')} VND`);\n    return updatedDistribution;\n  }\n\n  async processAllDistributionPayments(profitSharingId: string): Promise<number> {\n    const profitSharing = await this.getProfitSharing(profitSharingId);\n    if (!profitSharing) {\n      throw new Error(`Profit sharing not found: ${profitSharingId}`);\n    }\n    \n    const distributions = await this.getProfitDistributionsBySharing(profitSharingId);\n    if (distributions.length === 0) {\n      throw new Error(`No distributions found for profit sharing: ${profitSharingId}`);\n    }\n    \n    let totalPaid = 0;\n    let paymentsProcessed = 0;\n    const errors: string[] = [];\n    \n    for (const distribution of distributions) {\n      if (distribution.paymentStatus === \"pending\") {\n        try {\n          await this.markDistributionPaid(distribution.id);\n          totalPaid += parseFloat(distribution.distributionAmount || \"0\");\n          paymentsProcessed++;\n        } catch (error) {\n          const errorMsg = error instanceof Error ? error.message : 'Unknown error';\n          errors.push(`Failed to pay ${distribution.id}: ${errorMsg}`);\n          console.error(`❌ Payment failed for distribution ${distribution.id}:`, errorMsg);\n        }\n      }\n    }\n    \n    if (errors.length > 0) {\n      throw new Error(`Some payments failed: ${errors.join('; ')}`);\n    }\n    \n    console.log(`💰 Processed ${paymentsProcessed} payments totaling ${totalPaid.toLocaleString('vi-VN')} VND for ${profitSharing.periodValue}`);\n    return totalPaid;\n  }\n\n  // Admin operations implementation\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  async updateUserRole(userId: string, role: string, updatedBy: string): Promise<User | undefined> {\n    const user = this.users.get(userId);\n    if (!user) return undefined;\n\n    const oldRole = user.role;\n    const updatedUser = { ...user, role, updatedAt: new Date() };\n    this.users.set(userId, updatedUser);\n\n    // Log the role change\n    await this.createAuditLog({\n      userId: updatedBy,\n      action: \"user_role_change\",\n      entityType: \"user\",\n      entityId: userId,\n      oldValue: JSON.stringify({ role: oldRole }),\n      newValue: JSON.stringify({ role }),\n      ipAddress: null,\n      userAgent: null,\n    });\n\n    return updatedUser;\n  }\n\n  async getSystemConfigs(): Promise<SystemConfig[]> {\n    return Array.from(this.systemConfigs.values());\n  }\n\n  async getSystemConfig(configKey: string): Promise<SystemConfig | undefined> {\n    return Array.from(this.systemConfigs.values()).find(config => config.configKey === configKey);\n  }\n\n  async updateSystemConfig(configKey: string, configValue: string, description?: string, updatedBy?: string): Promise<SystemConfig> {\n    const existingConfig = await this.getSystemConfig(configKey);\n    const id = existingConfig?.id || randomUUID();\n    const now = new Date();\n\n    const config: SystemConfig = {\n      id,\n      configKey,\n      configValue,\n      description: description || existingConfig?.description || null,\n      updatedBy: updatedBy || null,\n      updatedAt: now,\n    };\n\n    this.systemConfigs.set(id, config);\n\n    // Log the config change\n    if (updatedBy) {\n      await this.createAuditLog({\n        userId: updatedBy,\n        action: \"config_update\",\n        entityType: \"config\",\n        entityId: id,\n        oldValue: existingConfig ? JSON.stringify({ configValue: existingConfig.configValue }) : null,\n        newValue: JSON.stringify({ configValue }),\n        ipAddress: null,\n        userAgent: null,\n      });\n    }\n\n    return config;\n  }\n\n  async getAuditLogs(limit: number = 100): Promise<AuditLog[]> {\n    const logs = Array.from(this.auditLogs.values())\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0))\n      .slice(0, limit);\n    return logs;\n  }\n\n  async createAuditLog(auditLog: InsertAuditLog): Promise<AuditLog> {\n    const id = randomUUID();\n    const log: AuditLog = {\n      ...auditLog,\n      id,\n      userId: auditLog.userId || null,\n      entityId: auditLog.entityId || null,\n      oldValue: auditLog.oldValue || null,\n      newValue: auditLog.newValue || null,\n      ipAddress: auditLog.ipAddress || null,\n      userAgent: auditLog.userAgent || null,\n      createdAt: new Date(),\n    };\n    this.auditLogs.set(id, log);\n    return log;\n  }\n\n  async getPendingTransactions(): Promise<Transaction[]> {\n    return Array.from(this.transactions.values())\n      .filter(t => t.status === \"pending\")\n      .sort((a, b) => (b.date?.getTime() || 0) - (a.date?.getTime() || 0));\n  }\n\n  async exportReportData(reportType: string, dateFrom?: string, dateTo?: string): Promise<any[]> {\n    const fromDate = dateFrom ? new Date(dateFrom) : new Date(0);\n    const toDate = dateTo ? new Date(dateTo) : new Date();\n\n    switch (reportType) {\n      case \"finance\":\n        return Array.from(this.transactions.values())\n          .filter(t => {\n            const transactionDate = t.date || new Date();\n            return transactionDate >= fromDate && transactionDate <= toDate;\n          })\n          .map(t => ({\n            id: t.id,\n            type: t.type,\n            amount: t.amount,\n            description: t.description,\n            status: t.status,\n            date: t.date,\n            taxAmount: t.taxAmount || \"0\",\n          }));\n\n      case \"tax\":\n        return Array.from(this.transactions.values())\n          .filter(t => {\n            const transactionDate = t.date || new Date();\n            return transactionDate >= fromDate && transactionDate <= toDate && parseFloat(t.taxAmount || \"0\") > 0;\n          })\n          .map(t => ({\n            id: t.id,\n            type: t.type,\n            amount: t.amount,\n            taxAmount: t.taxAmount,\n            date: t.date,\n          }));\n\n      case \"transactions\":\n        return Array.from(this.transactions.values())\n          .filter(t => {\n            const transactionDate = t.date || new Date();\n            return transactionDate >= fromDate && transactionDate <= toDate;\n          });\n\n      case \"users\":\n        return Array.from(this.users.values())\n          .map(u => ({\n            id: u.id,\n            name: u.name,\n            email: u.email,\n            role: u.role,\n            status: u.status,\n            refCode: u.refCode,\n            createdAt: u.createdAt,\n          }));\n\n      default:\n        return [];\n    }\n  }\n}\n\nimport { PostgresStorage } from \"./postgres-storage\";\n\nexport const storage = new PostgresStorage();\n","size_bytes":89442},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull(), // admin, accountant, branch, customer, staff, shareholder\n  name: text(\"name\").notNull(),\n  status: text(\"status\").notNull().default(\"active\"), // active, inactive\n  refCode: text(\"ref_code\").unique(), // Referral code for tracking\n  businessTier: text(\"business_tier\"), // founder, angel, branch, card_customer, staff, affiliate\n  investmentAmount: decimal(\"investment_amount\", { precision: 15, scale: 2 }).default(\"0\"), // Total investment for tier determination\n  totalShares: decimal(\"total_shares\", { precision: 15, scale: 2 }).default(\"0\"), // Current shares owned\n  padToken: decimal(\"pad_token\", { precision: 15, scale: 2 }).default(\"0\"), // PAD Token balance (100 PAD = 1M VND)\n  maxoutReached: boolean(\"maxout_reached\").default(false), // Whether user reached maxout limit\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const roles = pgTable(\"roles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(), // sang_lap, thien_than, phat_trien, dong_hanh, khach_hang, gop_tai_san, sweat_equity\n  displayName: text(\"display_name\").notNull(), // Sáng lập, Thiên thần, Phát triển, Đồng hành, Khách hàng, Góp tài sản, Sweat Equity\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userRoles = pgTable(\"user_roles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  roleId: varchar(\"role_id\").references(() => roles.id).notNull(),\n  assignedAt: timestamp(\"assigned_at\").defaultNow(),\n});\n\nexport const assetContributions = pgTable(\"asset_contributions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  assetName: text(\"asset_name\").notNull(), // Tên tài sản\n  assetDescription: text(\"asset_description\"), // Mô tả chi tiết\n  valuationAmount: decimal(\"valuation_amount\", { precision: 15, scale: 2 }).notNull(), // Giá trị định giá VND\n  padTokenAmount: decimal(\"pad_token_amount\", { precision: 15, scale: 2 }).notNull(), // Số PAD Token tương ứng\n  contractDocumentPath: text(\"contract_document_path\"), // Link hợp đồng/tài liệu\n  status: text(\"status\").notNull().default(\"pending\"), // pending, approved, rejected\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  rejectionReason: text(\"rejection_reason\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const cards = pgTable(\"cards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  cardNumber: text(\"card_number\").notNull().unique(),\n  cardType: text(\"card_type\").notNull(), // Standard, Silver, Gold, Platinum, Diamond\n  customerName: text(\"customer_name\").notNull(),\n  ownerId: varchar(\"owner_id\").references(() => users.id),\n  status: text(\"status\").notNull().default(\"active\"), // active, inactive, shared, near_maxout, stopped\n  price: decimal(\"price\", { precision: 15, scale: 2 }).notNull(), // Card price in VND\n  remainingSessions: integer(\"remaining_sessions\").default(0),\n  consultationSessions: integer(\"consultation_sessions\").default(12), // 12-24 lượt tư vấn sức khỏe/2 năm\n  shareHistory: text(\"share_history\").default(\"\"), // JSON string of share records\n  connectionCommission: decimal(\"connection_commission\", { precision: 5, scale: 2 }).default(\"8.0\"), // 8%\n  vipSupport: decimal(\"vip_support\", { precision: 5, scale: 2 }).default(\"5.0\"), // 5%\n  profitSharePercentage: decimal(\"profit_share_percentage\", { precision: 5, scale: 2 }).default(\"49.0\"), // 49% lợi tức sau thuế\n  padToken: decimal(\"pad_token\", { precision: 15, scale: 2 }).default(\"0\"), // PAD Token (100 PAD = 1 triệu VNĐ)\n  currentShares: decimal(\"current_shares\", { precision: 15, scale: 2 }).default(\"0\"), // Current share value\n  maxoutLimit: decimal(\"maxout_limit\", { precision: 15, scale: 2 }).default(\"0\"), // 210% of card price\n  issuedDate: timestamp(\"issued_date\").defaultNow(),\n  lastCheckIn: timestamp(\"last_check_in\"),\n});\n\nexport const checkIns = pgTable(\"check_ins\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  cardId: varchar(\"card_id\").references(() => cards.id),\n  checkInDate: timestamp(\"check_in_date\").defaultNow(),\n  sessionType: text(\"session_type\").notNull(), // therapy, consultation, etc\n  notes: text(\"notes\"),\n});\n\nexport const branches = pgTable(\"branches\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  address: text(\"address\").notNull(),\n  monthlyRevenue: decimal(\"monthly_revenue\", { precision: 15, scale: 2 }).default(\"0\"),\n  staffCount: integer(\"staff_count\").default(0),\n  currentKpi: decimal(\"current_kpi\", { precision: 5, scale: 2 }).default(\"0\"), // Current KPI percentage\n  monthlyTarget: decimal(\"monthly_target\", { precision: 15, scale: 2 }).default(\"0\"), // Monthly sales target\n  padToken: decimal(\"pad_token\", { precision: 15, scale: 2 }).default(\"20000\"), // PAD Token (200 shares = 20,000 PAD for early franchise)\n});\n\nexport const staff = pgTable(\"staff\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  position: text(\"position\").notNull(),\n  branchId: varchar(\"branch_id\").references(() => branches.id),\n  equityPercentage: decimal(\"equity_percentage\", { precision: 5, scale: 2 }).default(\"0\"),\n  shares: integer(\"shares\").default(0), // Number of shares owned\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(), // income, expense, deposit, invest, withdraw, share_distribution\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  description: text(\"description\").notNull(),\n  contributionType: text(\"contribution_type\"), // cash (tiền mặt), asset (tài sản), effort (công sức), card (thẻ)\n  padTokenAmount: decimal(\"pad_token_amount\", { precision: 15, scale: 2 }).default(\"0\"), // Số PAD Token tương ứng\n  branchId: varchar(\"branch_id\").references(() => branches.id),\n  cardId: varchar(\"card_id\").references(() => cards.id),\n  userId: varchar(\"user_id\").references(() => users.id), // User who made the transaction\n  referralCode: text(\"referral_code\"), // Optional referral code for commission processing\n  status: text(\"status\").notNull().default(\"pending\"), // pending, approved, rejected, completed\n  taxAmount: decimal(\"tax_amount\", { precision: 15, scale: 2 }).default(\"0\"), // Auto-calculated tax (10% for withdrawals >10M)\n  documentPath: text(\"document_path\"), // Path to uploaded document for investments/deposits\n  packageId: text(\"package_id\"), // Investment package identifier\n  approvedBy: varchar(\"approved_by\").references(() => users.id), // Admin who approved\n  approvedAt: timestamp(\"approved_at\"), // Approval timestamp\n  date: timestamp(\"date\").defaultNow(),\n});\n\n// Investment packages table\nexport const investmentPackages = pgTable(\"investment_packages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(), // Package name (e.g., \"Gói Đầu tư Cơ bản\", \"Gói VIP\")\n  minAmount: decimal(\"min_amount\", { precision: 15, scale: 2 }).notNull(), // Minimum investment amount\n  maxAmount: decimal(\"max_amount\", { precision: 15, scale: 2 }), // Maximum investment amount (optional)\n  description: text(\"description\"), // Package description\n  expectedReturn: decimal(\"expected_return\", { precision: 5, scale: 2 }).default(\"0\"), // Expected annual return %\n  duration: integer(\"duration\").default(12), // Duration in months\n  isActive: boolean(\"is_active\").default(true), // Whether package is available\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const kpis = pgTable(\"kpis\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  branchId: varchar(\"branch_id\").references(() => branches.id),\n  period: text(\"period\").notNull(), // month, quarter, year\n  periodValue: text(\"period_value\").notNull(), // 2024-03, 2024-Q1, 2024\n  cardSales: integer(\"card_sales\").default(0), // Number of cards sold\n  cardSalesRevenue: decimal(\"card_sales_revenue\", { precision: 15, scale: 2 }).default(\"0\"),\n  revisitRate: decimal(\"revisit_rate\", { precision: 5, scale: 2 }).default(\"0\"), // Percentage\n  deviceRevenue: decimal(\"device_revenue\", { precision: 15, scale: 2 }).default(\"0\"), // Treatment device revenue\n  totalRevenue: decimal(\"total_revenue\", { precision: 15, scale: 2 }).default(\"0\"),\n  expenses: decimal(\"expenses\", { precision: 15, scale: 2 }).default(\"0\"),\n  kpiScore: decimal(\"kpi_score\", { precision: 5, scale: 2 }).default(\"0\"), // Overall KPI score percentage\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const staffKpis = pgTable(\"staff_kpis\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  staffId: varchar(\"staff_id\").references(() => staff.id),\n  period: text(\"period\").notNull(), // quarter (Q1, Q2, Q3, Q4)\n  periodValue: text(\"period_value\").notNull(), // 2024-Q1, 2024-Q2, etc\n  cardSales: integer(\"card_sales\").default(0), // Number of cards sold by staff\n  customerRetention: decimal(\"customer_retention\", { precision: 5, scale: 2 }).default(\"0\"), // Retention rate %\n  totalPoints: decimal(\"total_points\", { precision: 8, scale: 2 }).default(\"0\"), // KPI points earned\n  score: decimal(\"score\", { precision: 5, scale: 2 }).default(\"0\"), // KPI score percentage\n  targetRevenue: decimal(\"target_revenue\", { precision: 15, scale: 2 }).default(\"0\"), // Target revenue for period\n  bonusAmount: decimal(\"bonus_amount\", { precision: 15, scale: 2 }).default(\"0\"), // Bonus earned\n  slotsEarned: integer(\"slots_earned\").default(0), // Number of slots (1 slot = 50 shares)\n  sharesAwarded: decimal(\"shares_awarded\", { precision: 15, scale: 2 }).default(\"0\"), // Total shares from this period\n  profitShareAmount: decimal(\"profit_share_amount\", { precision: 15, scale: 2 }).default(\"0\"), // 49% profit share\n  isProcessed: boolean(\"is_processed\").default(false), // End-of-quarter processing status\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  processedAt: timestamp(\"processed_at\"),\n});\n\nexport const referrals = pgTable(\"referrals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  referrerId: varchar(\"referrer_id\").references(() => users.id), // Staff member who made referral\n  referredUserId: varchar(\"referred_user_id\").references(() => users.id), // User who was referred\n  referralCode: text(\"referral_code\").notNull().unique(), // Unique referral link code\n  customerName: text(\"customer_name\"), // Name of the referred customer\n  firstTransactionId: varchar(\"first_transaction_id\").references(() => transactions.id), // First transaction by referred user\n  contributionValue: decimal(\"contribution_value\", { precision: 15, scale: 2 }).default(\"0\"), // Value of first transaction\n  commissionRate: decimal(\"commission_rate\", { precision: 5, scale: 2 }).default(\"8.0\"), // 8% commission\n  commissionAmount: decimal(\"commission_amount\", { precision: 15, scale: 2 }).default(\"0\"), // Calculated commission\n  commissionPaid: decimal(\"commission_paid\", { precision: 15, scale: 2 }).default(\"0\"), // Amount already paid\n  status: text(\"status\").notNull().default(\"pending\"), // pending, paid, cancelled\n  referralDate: timestamp(\"referral_date\").defaultNow(),\n  paidDate: timestamp(\"paid_date\"),\n});\n\nexport const profitSharing = pgTable(\"profit_sharing\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  period: text(\"period\").notNull(), // quarter (Q1, Q2, Q3, Q4)\n  periodValue: text(\"period_value\").notNull(), // 2024-Q1, 2024-Q2, etc\n  totalRevenue: decimal(\"total_revenue\", { precision: 15, scale: 2 }).default(\"0\"), // Total quarterly revenue\n  totalExpenses: decimal(\"total_expenses\", { precision: 15, scale: 2 }).default(\"0\"), // Total quarterly expenses\n  netProfit: decimal(\"net_profit\", { precision: 15, scale: 2 }).default(\"0\"), // Calculated profit (revenue - expenses)\n  profitSharePool: decimal(\"profit_share_pool\", { precision: 15, scale: 2 }).default(\"0\"), // 49% of net profit\n  totalShares: integer(\"total_shares\").default(0), // Total shares outstanding\n  profitPerShare: decimal(\"profit_per_share\", { precision: 15, scale: 2 }).default(\"0\"), // Pool / total shares\n  distributionStatus: text(\"distribution_status\").notNull().default(\"pending\"), // pending, completed, cancelled\n  processedAt: timestamp(\"processed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const profitDistribution = pgTable(\"profit_distribution\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  profitSharingId: varchar(\"profit_sharing_id\").references(() => profitSharing.id),\n  staffId: varchar(\"staff_id\").references(() => staff.id),\n  staffName: text(\"staff_name\").notNull(), // Cache staff name for records\n  distributionType: text(\"distribution_type\").notNull().default(\"capital\"), // capital (30% vốn - góp vốn/tài sản/thẻ), labor (19% công - KPI/chi nhánh)\n  sharesOwned: integer(\"shares_owned\").default(0), // Shares owned at distribution time\n  distributionAmount: decimal(\"distribution_amount\", { precision: 15, scale: 2 }).default(\"0\"), // Amount distributed\n  padTokenAmount: decimal(\"pad_token_amount\", { precision: 15, scale: 2 }).default(\"0\"), // PAD Token phân phối\n  paymentStatus: text(\"payment_status\").notNull().default(\"pending\"), // pending, paid, cancelled\n  paidAt: timestamp(\"paid_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// System configurations table\nexport const systemConfigs = pgTable(\"system_configs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  configKey: text(\"config_key\").notNull().unique(), // maxout_limit_percentage, kpi_threshold, profit_share_rate\n  configValue: text(\"config_value\").notNull(),\n  description: text(\"description\"),\n  updatedBy: varchar(\"updated_by\").references(() => users.id),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Audit logs table\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  action: text(\"action\").notNull(), // user_role_change, transaction_approval, config_update, report_export\n  entityType: text(\"entity_type\").notNull(), // user, transaction, config, report\n  entityId: varchar(\"entity_id\"), // ID of the affected entity\n  oldValue: text(\"old_value\"), // JSON string of previous state\n  newValue: text(\"new_value\"), // JSON string of new state\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User balances table for withdrawal management\nexport const userBalances = pgTable(\"user_balances\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  balance: decimal(\"balance\", { precision: 15, scale: 2 }).default(\"0\"), // Available withdrawal balance\n  pendingWithdrawal: decimal(\"pending_withdrawal\", { precision: 15, scale: 2 }).default(\"0\"), // Pending withdrawals\n  totalEarned: decimal(\"total_earned\", { precision: 15, scale: 2 }).default(\"0\"), // Total earned from profit sharing\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Deposit requests table for role upgrade flows\nexport const depositRequests = pgTable(\"deposit_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  requestedTier: text(\"requested_tier\").notNull(), // founder, angel, branch, card_customer\n  amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n  packageId: varchar(\"package_id\").references(() => investmentPackages.id),\n  proofDocumentPath: text(\"proof_document_path\"), // Upload proof document\n  description: text(\"description\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, approved, rejected\n  rejectionReason: text(\"rejection_reason\"),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User shares history for tracking share transactions\nexport const userSharesHistory = pgTable(\"user_shares_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  transactionType: text(\"transaction_type\").notNull(), // investment, profit_share, kpi_bonus, referral_commission\n  shareAmount: decimal(\"share_amount\", { precision: 15, scale: 2 }).notNull(),\n  description: text(\"description\").notNull(),\n  relatedTransactionId: varchar(\"related_transaction_id\").references(() => transactions.id),\n  quarter: text(\"quarter\"), // For KPI-based shares (2024-Q1, 2024-Q2, etc)\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Business tier configurations\nexport const businessTierConfigs = pgTable(\"business_tier_configs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tierName: text(\"tier_name\").notNull().unique(), // founder, angel, branch, card_customer, staff, affiliate\n  minInvestment: decimal(\"min_investment\", { precision: 15, scale: 2 }).default(\"0\"),\n  maxoutMultiplier: decimal(\"maxout_multiplier\", { precision: 5, scale: 2 }).default(\"2.1\"), // Default 210%\n  sharesPerMillion: decimal(\"shares_per_million\", { precision: 8, scale: 2 }).default(\"1.0\"), // 1M VND = 1 share\n  commissionRate: decimal(\"commission_rate\", { precision: 5, scale: 2 }).default(\"0.0\"), // For affiliates\n  baseShares: integer(\"base_shares\").default(0), // For branches (200 shares)\n  unlimitedShares: boolean(\"unlimited_shares\").default(false), // For founders\n  kpiRequired: boolean(\"kpi_required\").default(false), // For branches\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n});\n\nexport const insertCardSchema = createInsertSchema(cards).omit({\n  id: true,\n  issuedDate: true,\n  lastCheckIn: true,\n});\n\nexport const insertCheckInSchema = createInsertSchema(checkIns).omit({\n  id: true,\n  checkInDate: true,\n});\n\nexport const insertBranchSchema = createInsertSchema(branches).omit({\n  id: true,\n});\n\nexport const insertStaffSchema = createInsertSchema(staff).omit({\n  id: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  date: true,\n});\n\nexport const insertKpiSchema = createInsertSchema(kpis).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertStaffKpiSchema = createInsertSchema(staffKpis).omit({\n  id: true,\n  createdAt: true,\n  processedAt: true,\n});\n\nexport const insertReferralSchema = createInsertSchema(referrals).omit({\n  id: true,\n  referralDate: true,\n  paidDate: true,\n});\n\nexport const insertProfitSharingSchema = createInsertSchema(profitSharing).omit({\n  id: true,\n  createdAt: true,\n  processedAt: true,\n});\n\nexport const insertProfitDistributionSchema = createInsertSchema(profitDistribution).omit({\n  id: true,\n  createdAt: true,\n  paidAt: true,\n});\n\nexport const insertInvestmentPackageSchema = createInsertSchema(investmentPackages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSystemConfigSchema = createInsertSchema(systemConfigs).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserBalanceSchema = createInsertSchema(userBalances).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertDepositRequestSchema = createInsertSchema(depositRequests).omit({\n  id: true,\n  createdAt: true,\n  approvedAt: true,\n});\n\nexport const insertUserSharesHistorySchema = createInsertSchema(userSharesHistory).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBusinessTierConfigSchema = createInsertSchema(businessTierConfigs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRoleSchema = createInsertSchema(roles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserRoleSchema = createInsertSchema(userRoles).omit({\n  id: true,\n  assignedAt: true,\n});\n\nexport const insertAssetContributionSchema = createInsertSchema(assetContributions).omit({\n  id: true,\n  createdAt: true,\n  approvedAt: true,\n});\n\n// Quarterly validation schemas for profit sharing\nexport const quarterlyPeriodSchema = z.string().regex(\n  /^\\d{4}-Q[1-4]$/,\n  \"Period value must be in format YYYY-Q[1-4] (e.g., 2024-Q1)\"\n);\n\nexport const profitSharingValidationSchema = z.object({\n  period: z.literal(\"quarter\", {\n    errorMap: () => ({ message: \"Profit sharing is only allowed for quarterly periods\" })\n  }),\n  periodValue: quarterlyPeriodSchema,\n}).strict();\n\nexport const profitSharingProcessSchema = z.object({\n  period: z.literal(\"quarter\"),\n  periodValue: quarterlyPeriodSchema,\n  forceReprocess: z.boolean().optional().default(false)\n}).strict();\n\nexport const profitDistributionValidationSchema = z.object({\n  profitSharingId: z.string().uuid(\"Invalid profit sharing ID format\"),\n  distributionId: z.string().uuid(\"Invalid distribution ID format\").optional(),\n}).strict();\n\n// Quarter date boundary validation helper\nexport const validateQuarterBoundaries = (periodValue: string): { startDate: Date; endDate: Date; isValid: boolean } => {\n  const match = periodValue.match(/^(\\d{4})-Q([1-4])$/);\n  if (!match) {\n    return { startDate: new Date(), endDate: new Date(), isValid: false };\n  }\n\n  const year = parseInt(match[1]);\n  const quarter = parseInt(match[2]);\n  \n  // Validate year range (reasonable business years)\n  if (year < 2020 || year > 2030) {\n    return { startDate: new Date(), endDate: new Date(), isValid: false };\n  }\n\n  const startMonth = (quarter - 1) * 3;\n  const endMonth = startMonth + 2;\n  \n  const startDate = new Date(year, startMonth, 1);\n  const endDate = new Date(year, endMonth + 1, 0); // Last day of quarter\n  \n  return { startDate, endDate, isValid: true };\n};\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertCard = z.infer<typeof insertCardSchema>;\nexport type Card = typeof cards.$inferSelect;\n\nexport type InsertCheckIn = z.infer<typeof insertCheckInSchema>;\nexport type CheckIn = typeof checkIns.$inferSelect;\n\nexport type InsertKpi = z.infer<typeof insertKpiSchema>;\nexport type Kpi = typeof kpis.$inferSelect;\n\nexport type InsertBranch = z.infer<typeof insertBranchSchema>;\nexport type Branch = typeof branches.$inferSelect;\n\nexport type InsertStaff = z.infer<typeof insertStaffSchema>;\nexport type Staff = typeof staff.$inferSelect;\n\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\n\nexport type InsertStaffKpi = z.infer<typeof insertStaffKpiSchema>;\nexport type StaffKpi = typeof staffKpis.$inferSelect;\n\nexport type InsertReferral = z.infer<typeof insertReferralSchema>;\nexport type Referral = typeof referrals.$inferSelect;\n\nexport type InsertProfitSharing = z.infer<typeof insertProfitSharingSchema>;\nexport type ProfitSharing = typeof profitSharing.$inferSelect;\n\nexport type InsertProfitDistribution = z.infer<typeof insertProfitDistributionSchema>;\nexport type ProfitDistribution = typeof profitDistribution.$inferSelect;\n\nexport type InsertInvestmentPackage = z.infer<typeof insertInvestmentPackageSchema>;\nexport type InvestmentPackage = typeof investmentPackages.$inferSelect;\n\nexport type InsertSystemConfig = z.infer<typeof insertSystemConfigSchema>;\nexport type SystemConfig = typeof systemConfigs.$inferSelect;\n\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\n\nexport type InsertUserBalance = z.infer<typeof insertUserBalanceSchema>;\nexport type UserBalance = typeof userBalances.$inferSelect;\n\nexport type InsertDepositRequest = z.infer<typeof insertDepositRequestSchema>;\nexport type DepositRequest = typeof depositRequests.$inferSelect;\n\nexport type InsertUserSharesHistory = z.infer<typeof insertUserSharesHistorySchema>;\nexport type UserSharesHistory = typeof userSharesHistory.$inferSelect;\n\nexport type InsertBusinessTierConfig = z.infer<typeof insertBusinessTierConfigSchema>;\nexport type BusinessTierConfig = typeof businessTierConfigs.$inferSelect;\n\nexport type InsertRole = z.infer<typeof insertRoleSchema>;\nexport type Role = typeof roles.$inferSelect;\n\nexport type InsertUserRole = z.infer<typeof insertUserRoleSchema>;\nexport type UserRole = typeof userRoles.$inferSelect;\n\nexport type InsertAssetContribution = z.infer<typeof insertAssetContributionSchema>;\nexport type AssetContribution = typeof assetContributions.$inferSelect;\n\n// Cash flow validation schemas\nexport const cashFlowTransactionSchema = z.object({\n  type: z.enum([\"deposit\", \"invest\", \"withdraw\", \"share_distribution\"]),\n  amount: z.number().positive(\"Amount must be positive\"),\n  description: z.string().min(1, \"Description is required\"),\n  packageId: z.string().optional(),\n  documentPath: z.string().optional(),\n});\n\nexport const withdrawalRequestSchema = z.object({\n  amount: z.number().min(5000000, \"Minimum withdrawal is 5,000,000 VND\"),\n  description: z.string().min(1, \"Description is required\"),\n});\n\nexport const depositRequestSchema = z.object({\n  type: z.enum([\"deposit\", \"invest\"]),\n  amount: z.number().positive(\"Amount must be positive\"),\n  description: z.string().min(1, \"Description is required\"),\n  packageId: z.string().min(1, \"Package selection is required\"),\n  documentPath: z.string().optional(),\n});\n\n// Admin validation schemas\nexport const userRoleUpdateSchema = z.object({\n  userId: z.string().uuid(\"Invalid user ID\"),\n  role: z.enum([\"admin\", \"accountant\", \"branch\", \"customer\", \"staff\", \"shareholder\"]),\n});\n\nexport const transactionApprovalSchema = z.object({\n  transactionId: z.string().uuid(\"Invalid transaction ID\"),\n  action: z.enum([\"approve\", \"reject\"]),\n  reason: z.string().optional(),\n});\n\nexport const systemConfigUpdateSchema = z.object({\n  configKey: z.string().min(1, \"Config key is required\"),\n  configValue: z.string().min(1, \"Config value is required\"),\n  description: z.string().optional(),\n});\n\nexport const reportExportSchema = z.object({\n  reportType: z.enum([\"finance\", \"tax\", \"transactions\", \"users\"]),\n  format: z.enum([\"pdf\", \"csv\"]),\n  dateFrom: z.string().optional(),\n  dateTo: z.string().optional(),\n});\n\n// Business tier upgrade validation schemas\nexport const businessTierUpgradeSchema = z.object({\n  requestedTier: z.enum([\"founder\", \"angel\", \"branch\", \"card_customer\"]),\n  amount: z.number().positive(\"Investment amount must be positive\"),\n  packageId: z.string().uuid(\"Invalid package ID\").optional(),\n  description: z.string().min(1, \"Description is required\"),\n  proofDocumentPath: z.string().optional(),\n}).refine((data) => {\n  // Business rules validation\n  if (data.requestedTier === \"founder\" && data.amount < 245000000) {\n    return false;\n  }\n  if (data.requestedTier === \"angel\" && data.amount < 100000000) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Investment amount does not meet tier requirements\"\n});\n\n// QR check-in validation\nexport const qrCheckinSchema = z.object({\n  cardId: z.string().uuid(\"Invalid card ID\"),\n  sessionType: z.string().min(1, \"Session type is required\"),\n  notes: z.string().optional(),\n});\n\n// Enhanced withdrawal with balance checks\nexport const enhancedWithdrawalSchema = z.object({\n  amount: z.number().positive(\"Withdrawal amount must be positive\"),\n  description: z.string().min(1, \"Description is required\"),\n}).refine((data) => {\n  // Minimum withdrawal 5M VND rule\n  return data.amount >= 5000000;\n}, {\n  message: \"Minimum withdrawal is 5,000,000 VND\"\n});\n\n// Profit sharing with maxout validation\nexport const profitShareWithMaxoutSchema = z.object({\n  period: z.literal(\"quarter\"),\n  periodValue: quarterlyPeriodSchema,\n  forceReprocess: z.boolean().optional().default(false),\n  respectMaxout: z.boolean().default(true), // Whether to respect maxout limits\n});\n\n// User profile validation\nexport const userProfileUpdateSchema = z.object({\n  name: z.string().min(1, \"Name is required\").optional(),\n  email: z.string().email(\"Invalid email format\").optional(),\n  businessTier: z.enum([\"founder\", \"angel\", \"branch\", \"card_customer\", \"staff\", \"affiliate\"]).optional(),\n});\n\n// Business tier determination helper\nexport const determineBusinessTier = (investmentAmount: number): string => {\n  if (investmentAmount >= 245000000) {\n    return \"founder\"; // ≥245M VND, unlimited shares\n  } else if (investmentAmount >= 100000000) {\n    return \"angel\"; // ≥100M VND, x5 maxout\n  } else if (investmentAmount > 0) {\n    return \"card_customer\"; // Any investment, 210% maxout, 5% support\n  }\n  return \"staff\"; // Default tier\n};\n\n// Share calculation helper\nexport const calculateShares = (amount: number, tier: string): number => {\n  // Base calculation: 1M VND = 1 share\n  const baseShares = amount / 1000000;\n  \n  // Tier-specific multipliers (can be configured)\n  switch (tier) {\n    case \"founder\":\n      return baseShares; // 1:1 ratio, unlimited\n    case \"angel\":\n      return baseShares; // 1:1 ratio, but 5x maxout\n    case \"branch\":\n      return 200; // Fixed 200 shares, KPI-based bonuses\n    case \"card_customer\":\n      return baseShares; // 1:1 ratio, 210% maxout\n    default:\n      return baseShares;\n  }\n};\n\n// Tax calculation helper\nexport const calculateWithdrawalTax = (amount: number): number => {\n  // 10% tax for withdrawals > 10M VND\n  if (amount > 10000000) {\n    return amount * 0.1;\n  }\n  return 0;\n};\n\n// Profit sharing operation types\nexport type ProfitSharingValidation = z.infer<typeof profitSharingValidationSchema>;\nexport type ProfitSharingProcess = z.infer<typeof profitSharingProcessSchema>;\nexport type ProfitDistributionValidation = z.infer<typeof profitDistributionValidationSchema>;\n\n// Admin operation types\nexport type UserRoleUpdate = z.infer<typeof userRoleUpdateSchema>;\nexport type TransactionApproval = z.infer<typeof transactionApprovalSchema>;\nexport type SystemConfigUpdate = z.infer<typeof systemConfigUpdateSchema>;\nexport type ReportExport = z.infer<typeof reportExportSchema>;\n\n// Business logic operation types\nexport type BusinessTierUpgrade = z.infer<typeof businessTierUpgradeSchema>;\nexport type QrCheckin = z.infer<typeof qrCheckinSchema>;\nexport type EnhancedWithdrawal = z.infer<typeof enhancedWithdrawalSchema>;\nexport type ProfitShareWithMaxout = z.infer<typeof profitShareWithMaxoutSchema>;\nexport type UserProfileUpdate = z.infer<typeof userProfileUpdateSchema>;\n","size_bytes":31549},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"./hooks/use-auth\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\nimport HomePage from \"@/pages/home-page\";\nimport AuthPage from \"@/pages/auth-page\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <ProtectedRoute path=\"/\" component={HomePage} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":969},"client/src/index.css":{"content":"@import url('https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css');\n@import url('https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(173 40% 47%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(173 40% 95%);\n  --secondary-foreground: hsl(173 40% 20%);\n  --muted: hsl(0 0% 97%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(173 40% 95%);\n  --accent-foreground: hsl(173 40% 47%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(0 0% 93%);\n  --input: hsl(0 0% 98%);\n  --ring: hsl(173 40% 47%);\n  --chart-1: hsl(173 40% 47%);\n  --chart-2: hsl(173 40% 40%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(173 40% 47%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(173 40% 95%);\n  --sidebar-accent-foreground: hsl(173 40% 47%);\n  --sidebar-border: hsl(0 0% 93%);\n  --sidebar-ring: hsl(173 40% 47%);\n  --font-sans: 'Inter', 'Segoe UI', -apple-system, BlinkMacSystemFont, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Fira Code', 'SF Mono', Consolas, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 1px 2px rgba(67, 176, 165, 0.05);\n  --shadow-xs: 0px 1px 3px rgba(67, 176, 165, 0.08);\n  --shadow-sm: 0px 2px 8px rgba(67, 176, 165, 0.12);\n  --shadow-lg: 0px 8px 32px rgba(67, 176, 165, 0.16);\n  \n  /* Primary color system - #43B0A5 */\n  --primary-color: #43B0A5;\n  --primary-dark: #369289;\n  --primary-light: #5BC0B5;\n  --primary-50: #f0fdfb;\n  --primary-100: #ccfbf1;\n  --primary-200: #99f6e4;\n  --primary-300: #5eead4;\n  --primary-400: #2dd4bf;\n  --primary-500: #43B0A5;\n  --primary-600: #0d9488;\n  --primary-700: #0f766e;\n  --primary-800: #115e59;\n  --primary-900: #134e4a;\n  \n  /* Clean white background system */\n  --bg-white: #ffffff;\n  --bg-light: #fafafa;\n  --bg-lighter: #f8f9fa;\n  --text-dark: #1f2937;\n  --text-medium: #6b7280;\n  --text-light: #9ca3af;\n  --border-color: #e5e7eb;\n  --border-light: #f3f4f6;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(166 42% 47%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(166 42% 47%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(166 42% 47%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased;\n    background-color: var(--bg-white);\n    color: var(--text-dark);\n    scroll-behavior: smooth;\n    min-height: 100vh;\n  }\n}\n\n/* Bootstrap customizations for clean design */\n.btn-primary {\n  background-color: var(--primary-color) !important;\n  border-color: var(--primary-color) !important;\n  border-radius: 12px !important;\n  padding: 12px 24px !important;\n  font-weight: 600 !important;\n  min-height: 48px !important;\n  transition: all 0.3s ease !important;\n  box-shadow: 0 2px 4px rgba(67, 176, 165, 0.1) !important;\n}\n\n.btn-primary:hover {\n  background-color: var(--primary-dark) !important;\n  border-color: var(--primary-dark) !important;\n  transform: translateY(-2px) !important;\n  box-shadow: 0 4px 12px rgba(67, 176, 165, 0.2) !important;\n}\n\n.btn-outline-primary {\n  color: var(--primary-color) !important;\n  border-color: var(--primary-color) !important;\n  border-radius: 12px !important;\n  font-weight: 500 !important;\n  transition: all 0.3s ease !important;\n}\n\n.btn-outline-primary:hover {\n  background-color: var(--primary-color) !important;\n  border-color: var(--primary-color) !important;\n  color: white !important;\n  transform: translateY(-1px) !important;\n}\n\n.card {\n  border: 1px solid var(--border-light) !important;\n  box-shadow: var(--shadow-sm) !important;\n  border-radius: 16px !important;\n  transition: all 0.3s ease !important;\n  background-color: var(--bg-white) !important;\n}\n\n.card:hover {\n  box-shadow: var(--shadow-lg) !important;\n  transform: translateY(-2px) !important;\n}\n\n.card-header {\n  background-color: transparent !important;\n  border-bottom: 1px solid var(--border-light) !important;\n  padding: 1.5rem !important;\n}\n\n.card-body {\n  padding: 1.5rem !important;\n}\n\n.nav-tabs .nav-link {\n  border-radius: 12px 12px 0 0 !important;\n  border: none !important;\n  color: var(--text-dark) !important;\n  font-weight: 500 !important;\n  padding: 12px 20px !important;\n  margin-right: 4px !important;\n}\n\n.nav-tabs .nav-link.active {\n  background-color: var(--primary-color) !important;\n  color: white !important;\n}\n\n.login-card {\n  box-shadow: var(--shadow-lg) !important;\n  border-radius: 20px !important;\n  border: none !important;\n}\n\n.metric-card {\n  text-align: center;\n  padding: 20px;\n  background: linear-gradient(135deg, var(--primary-color), var(--primary-light));\n  color: white;\n  border-radius: 16px;\n  margin-bottom: 20px;\n  box-shadow: var(--shadow-sm);\n}\n\n.metric-value {\n  font-size: 2rem;\n  font-weight: bold;\n  margin-bottom: 5px;\n}\n\n.chart-container {\n  position: relative;\n  height: 300px;\n  margin: 20px 0;\n}\n\n.table {\n  border-radius: 12px !important;\n  overflow: hidden !important;\n  box-shadow: var(--shadow-sm) !important;\n  background-color: var(--bg-white) !important;\n  border: 1px solid var(--border-light) !important;\n}\n\n.table th {\n  background-color: var(--primary-50) !important;\n  color: var(--primary-800) !important;\n  font-weight: 600 !important;\n  border-bottom: 2px solid var(--primary-100) !important;\n  padding: 1rem 0.75rem !important;\n}\n\n.table td {\n  padding: 0.875rem 0.75rem !important;\n  border-bottom: 1px solid var(--border-light) !important;\n  vertical-align: middle !important;\n}\n\n.table tbody tr:hover {\n  background-color: var(--primary-50) !important;\n  transition: background-color 0.2s ease !important;\n}\n\n.navbar {\n  background-color: var(--bg-white) !important;\n  border-bottom: 1px solid var(--border-light) !important;\n  box-shadow: var(--shadow-xs) !important;\n}\n\n.navbar-brand {\n  font-weight: 700 !important;\n  color: var(--primary-color) !important;\n  font-size: 1.5rem !important;\n}\n\n/* Mobile Responsiveness */\n@media (max-width: 768px) {\n  .nav-tabs {\n    flex-wrap: wrap;\n    gap: 4px;\n  }\n  \n  .nav-tabs .nav-link {\n    font-size: 0.85rem;\n    padding: 8px 12px;\n    margin-bottom: 4px;\n  }\n  \n  .metric-value {\n    font-size: 1.5rem;\n  }\n  \n  .card {\n    margin-bottom: 1rem;\n  }\n  \n  .table-responsive {\n    font-size: 0.875rem;\n  }\n  \n  .btn {\n    font-size: 0.875rem;\n    padding: 8px 16px;\n  }\n  \n  .container-fluid {\n    padding: 0.75rem;\n  }\n}\n\n@media (max-width: 576px) {\n  .nav-tabs .nav-link span {\n    display: none !important;\n  }\n  \n  .nav-tabs .nav-link {\n    padding: 10px 8px;\n    min-width: 44px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  \n  .navbar-brand {\n    font-size: 1.25rem !important;\n  }\n  \n  .navbar-brand span {\n    display: none;\n  }\n  \n  .table-responsive {\n    font-size: 0.8rem;\n  }\n  \n  .modal .card {\n    margin: 1rem;\n    max-width: calc(100vw - 2rem);\n  }\n}\n\n.tab-content {\n  padding: 20px 0;\n}\n\n.hidden {\n  display: none;\n}\n\n/* Form styling */\n.form-control-lg {\n  border-radius: 12px !important;\n  min-height: 48px !important;\n}\n\n.form-select-lg {\n  border-radius: 12px !important;\n  min-height: 48px !important;\n}\n\n/* Text colors for consistency */\n.text-primary {\n  color: var(--primary-color) !important;\n}\n\n.bg-primary {\n  background-color: var(--primary-color) !important;\n}\n\n.border-primary {\n  border-color: var(--primary-color) !important;\n}\n","size_bytes":8367},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/admin-tab.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  Users, \n  Settings, \n  CheckCircle, \n  XCircle, \n  Download, \n  FileText,\n  Clock,\n  Shield,\n  Database,\n  Calendar\n} from \"lucide-react\";\nimport jsPDF from \"jspdf\";\nimport type { \n  User, \n  Transaction, \n  SystemConfig, \n  AuditLog,\n  UserRoleUpdate,\n  SystemConfigUpdate,\n  ReportExport\n} from \"@shared/schema\";\n\n// Utility functions\nconst formatCurrency = (amount: string | number) => {\n  const numAmount = typeof amount === \"string\" ? parseFloat(amount) : amount;\n  return numAmount.toLocaleString(\"vi-VN\") + \" VND\";\n};\n\nconst formatDate = (date: string | Date) => {\n  const dateObj = typeof date === \"string\" ? new Date(date) : date;\n  return dateObj.toLocaleDateString(\"vi-VN\");\n};\n\nconst formatDateTime = (date: string | Date) => {\n  const dateObj = typeof date === \"string\" ? new Date(date) : date;\n  return dateObj.toLocaleString(\"vi-VN\");\n};\n\nconst getRoleBadgeVariant = (role: string) => {\n  switch (role) {\n    case \"admin\": return \"default\";\n    case \"accountant\": return \"secondary\";\n    case \"branch\": return \"outline\";\n    case \"staff\": return \"outline\";\n    default: return \"secondary\";\n  }\n};\n\nconst getStatusBadgeVariant = (status: string) => {\n  switch (status) {\n    case \"completed\": case \"approved\": case \"active\": return \"default\";\n    case \"pending\": return \"secondary\";\n    case \"rejected\": case \"inactive\": return \"destructive\";\n    default: return \"secondary\";\n  }\n};\n\n// User Management Component\nconst UserManagement = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [newRole, setNewRole] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: users = [], isLoading } = useQuery<User[]>({ \n    queryKey: ['/api/admin/users'] \n  });\n\n  const updateRoleMutation = useMutation({\n    mutationFn: async ({ userId, role }: { userId: string, role: string }) => {\n      const response = await apiRequest('POST', `/api/admin/users/${userId}/role`, { role });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ description: \"Cập nhật quyền thành công!\" });\n      setSelectedUser(null);\n      setNewRole(\"\");\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n    },\n    onError: (error: any) => {\n      toast({ variant: \"destructive\", description: \"Lỗi: \" + (error.message || \"Không thể cập nhật quyền\") });\n    }\n  });\n\n  const handleRoleUpdate = (user: User) => {\n    setSelectedUser(user);\n    setNewRole(user.role);\n  };\n\n  const handleSaveRole = () => {\n    if (!selectedUser || !newRole) return;\n    updateRoleMutation.mutate({ userId: selectedUser.id, role: newRole });\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Users className=\"h-5 w-5 text-blue-500\" />\n          Quản lý người dùng\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {isLoading ? (\n          <div className=\"text-center py-8\">Đang tải...</div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"whitespace-nowrap\">Tên</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Email</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Quyền</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Trạng thái</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Mã giới thiệu</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Ngày tạo</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Thao tác</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {users.map((user) => (\n                  <TableRow key={user.id}>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`text-user-name-${user.id}`}>\n                      {user.name}\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`text-user-email-${user.id}`}>\n                      {user.email}\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`badge-user-role-${user.id}`}>\n                      <Badge variant={getRoleBadgeVariant(user.role)}>\n                        {user.role === \"admin\" ? \"Quản trị viên\" :\n                         user.role === \"accountant\" ? \"Kế toán\" :\n                         user.role === \"branch\" ? \"Chi nhánh\" :\n                         user.role === \"staff\" ? \"Nhân viên\" :\n                         user.role === \"customer\" ? \"Khách hàng\" :\n                         user.role === \"shareholder\" ? \"Cổ đông đồng sáng lập\" :\n                         user.role}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`badge-user-status-${user.id}`}>\n                      <Badge variant={getStatusBadgeVariant(user.status)}>\n                        {user.status === \"active\" ? \"Hoạt động\" : \"Ngừng hoạt động\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`text-user-refcode-${user.id}`}>\n                      {user.refCode || \"-\"}\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`text-user-created-${user.id}`}>\n                      {user.createdAt ? formatDate(user.createdAt) : \"-\"}\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap\">\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        onClick={() => handleRoleUpdate(user)}\n                        data-testid={`button-edit-role-${user.id}`}\n                      >\n                        Sửa quyền\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        )}\n\n        {/* Role Update Modal */}\n        {selectedUser && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n            <Card className=\"w-full max-w-md mx-4\">\n              <CardHeader>\n                <CardTitle>Cập nhật quyền người dùng</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label>Người dùng</Label>\n                  <p className=\"text-sm text-gray-600\">{selectedUser.name} ({selectedUser.email})</p>\n                </div>\n                <div>\n                  <Label htmlFor=\"role\">Quyền mới</Label>\n                  <Select value={newRole} onValueChange={setNewRole}>\n                    <SelectTrigger data-testid=\"select-new-role\">\n                      <SelectValue placeholder=\"Chọn quyền\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"admin\">Quản trị viên</SelectItem>\n                      <SelectItem value=\"accountant\">Kế toán</SelectItem>\n                      <SelectItem value=\"branch\">Chi nhánh</SelectItem>\n                      <SelectItem value=\"staff\">Nhân viên</SelectItem>\n                      <SelectItem value=\"customer\">Khách hàng</SelectItem>\n                      <SelectItem value=\"shareholder\">Cổ đông đồng sáng lập</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button \n                    onClick={handleSaveRole}\n                    disabled={updateRoleMutation.isPending || !newRole}\n                    data-testid=\"button-save-role\"\n                  >\n                    {updateRoleMutation.isPending ? \"Đang lưu...\" : \"Lưu\"}\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => setSelectedUser(null)}\n                    data-testid=\"button-cancel-role\"\n                  >\n                    Hủy\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\n// Transaction Approval Component  \nconst TransactionApproval = () => {\n  const { toast } = useToast();\n\n  const { data: pendingTransactions = [], isLoading } = useQuery<Transaction[]>({ \n    queryKey: ['/api/admin/transactions/pending'] \n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async (transactionId: string) => {\n      const response = await apiRequest('POST', `/api/cash-flow/transactions/${transactionId}/approve`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ description: \"Duyệt giao dịch thành công!\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/transactions/pending'] });\n    },\n    onError: (error: any) => {\n      toast({ variant: \"destructive\", description: \"Lỗi: \" + (error.message || \"Không thể duyệt giao dịch\") });\n    }\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: async ({ transactionId, reason }: { transactionId: string, reason: string }) => {\n      const response = await apiRequest('POST', `/api/cash-flow/transactions/${transactionId}/reject`, { reason });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ description: \"Từ chối giao dịch thành công!\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/transactions/pending'] });\n    },\n    onError: (error: any) => {\n      toast({ variant: \"destructive\", description: \"Lỗi: \" + (error.message || \"Không thể từ chối giao dịch\") });\n    }\n  });\n\n  const handleApprove = (transactionId: string) => {\n    approveMutation.mutate(transactionId);\n  };\n\n  const handleReject = (transactionId: string) => {\n    const reason = prompt(\"Lý do từ chối (không bắt buộc):\");\n    rejectMutation.mutate({ transactionId, reason: reason || \"Không có lý do cụ thể\" });\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Clock className=\"h-5 w-5 text-orange-500\" />\n          Duyệt giao dịch ({pendingTransactions.length})\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {isLoading ? (\n          <div className=\"text-center py-8\">Đang tải...</div>\n        ) : pendingTransactions.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            Không có giao dịch chờ duyệt\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"whitespace-nowrap\">Ngày</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Loại</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Số tiền</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Thuế</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Mô tả</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Thao tác</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {pendingTransactions.map((transaction) => (\n                  <TableRow key={transaction.id}>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`text-pending-date-${transaction.id}`}>\n                      {transaction.date ? formatDate(transaction.date) : \"-\"}\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`text-pending-type-${transaction.id}`}>\n                      <Badge variant=\"outline\">\n                        {transaction.type === \"deposit\" ? \"Nạp tiền\" : \n                         transaction.type === \"invest\" ? \"Đầu tư\" :\n                         transaction.type === \"withdraw\" ? \"Rút tiền\" : \n                         transaction.type}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`text-pending-amount-${transaction.id}`}>\n                      {formatCurrency(transaction.amount)}\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`text-pending-tax-${transaction.id}`}>\n                      {transaction.taxAmount ? formatCurrency(transaction.taxAmount) : \"-\"}\n                    </TableCell>\n                    <TableCell className=\"max-w-xs truncate\" data-testid={`text-pending-description-${transaction.id}`}>\n                      {transaction.description}\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap\">\n                      <div className=\"flex gap-2\">\n                        <Button \n                          size=\"sm\" \n                          onClick={() => handleApprove(transaction.id)}\n                          disabled={approveMutation.isPending}\n                          className=\"bg-green-600 hover:bg-green-700\"\n                          data-testid={`button-approve-${transaction.id}`}\n                        >\n                          <CheckCircle className=\"h-4 w-4\" />\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          variant=\"destructive\"\n                          onClick={() => handleReject(transaction.id)}\n                          disabled={rejectMutation.isPending}\n                          data-testid={`button-reject-${transaction.id}`}\n                        >\n                          <XCircle className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\n// System Configuration Component\nconst SystemConfiguration = () => {\n  const [configForm, setConfigForm] = useState({\n    configKey: \"\",\n    configValue: \"\",\n    description: \"\",\n  });\n  const { toast } = useToast();\n\n  const { data: configs = [], isLoading } = useQuery<SystemConfig[]>({ \n    queryKey: ['/api/admin/configs'] \n  });\n\n  const updateConfigMutation = useMutation({\n    mutationFn: async (configData: any) => {\n      const response = await apiRequest('POST', `/api/admin/configs/${configData.configKey}`, {\n        configValue: configData.configValue,\n        description: configData.description\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ description: \"Cập nhật cấu hình thành công!\" });\n      setConfigForm({ configKey: \"\", configValue: \"\", description: \"\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/configs'] });\n    },\n    onError: (error: any) => {\n      toast({ variant: \"destructive\", description: \"Lỗi: \" + (error.message || \"Không thể cập nhật cấu hình\") });\n    }\n  });\n\n  const handleUpdateConfig = (config: SystemConfig) => {\n    setConfigForm({\n      configKey: config.configKey,\n      configValue: config.configValue,\n      description: config.description || \"\",\n    });\n  };\n\n  const handleSaveConfig = () => {\n    if (!configForm.configKey || !configForm.configValue) {\n      toast({ variant: \"destructive\", description: \"Vui lòng điền đầy đủ thông tin\" });\n      return;\n    }\n    updateConfigMutation.mutate(configForm);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Settings className=\"h-5 w-5 text-purple-500\" />\n            Cấu hình hệ thống\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"configKey\">Tên cấu hình</Label>\n              <Input\n                value={configForm.configKey}\n                onChange={(e) => setConfigForm(prev => ({ ...prev, configKey: e.target.value }))}\n                placeholder=\"Nhập tên cấu hình (vd: maxout_limit_percentage)\"\n                data-testid=\"input-config-key\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"configValue\">Giá trị</Label>\n              <Input\n                value={configForm.configValue}\n                onChange={(e) => setConfigForm(prev => ({ ...prev, configValue: e.target.value }))}\n                placeholder=\"Nhập giá trị cấu hình\"\n                data-testid=\"input-config-value\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"description\">Mô tả</Label>\n              <Textarea\n                value={configForm.description}\n                onChange={(e) => setConfigForm(prev => ({ ...prev, description: e.target.value }))}\n                placeholder=\"Mô tả cấu hình...\"\n                rows={2}\n                data-testid=\"textarea-config-description\"\n              />\n            </div>\n            <Button \n              onClick={handleSaveConfig}\n              disabled={updateConfigMutation.isPending}\n              data-testid=\"button-save-config\"\n            >\n              {updateConfigMutation.isPending ? \"Đang lưu...\" : \"Lưu cấu hình\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Danh sách cấu hình hiện tại</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">Đang tải...</div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"whitespace-nowrap\">Tên cấu hình</TableHead>\n                    <TableHead className=\"whitespace-nowrap\">Giá trị</TableHead>\n                    <TableHead className=\"whitespace-nowrap\">Mô tả</TableHead>\n                    <TableHead className=\"whitespace-nowrap\">Cập nhật lần cuối</TableHead>\n                    <TableHead className=\"whitespace-nowrap\">Thao tác</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {configs.map((config) => (\n                    <TableRow key={config.id}>\n                      <TableCell className=\"whitespace-nowrap font-mono text-sm\" data-testid={`text-config-key-${config.configKey}`}>\n                        {config.configKey}\n                      </TableCell>\n                      <TableCell className=\"whitespace-nowrap\" data-testid={`text-config-value-${config.configKey}`}>\n                        {config.configValue}\n                      </TableCell>\n                      <TableCell className=\"max-w-xs truncate\" data-testid={`text-config-description-${config.configKey}`}>\n                        {config.description || \"-\"}\n                      </TableCell>\n                      <TableCell className=\"whitespace-nowrap\" data-testid={`text-config-updated-${config.configKey}`}>\n                        {config.updatedAt ? formatDateTime(config.updatedAt) : \"-\"}\n                      </TableCell>\n                      <TableCell className=\"whitespace-nowrap\">\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => handleUpdateConfig(config)}\n                          data-testid={`button-edit-config-${config.configKey}`}\n                        >\n                          Sửa\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\n// Reports and Audit Component\nconst ReportsAndAudit = () => {\n  const [reportForm, setReportForm] = useState({\n    reportType: \"\",\n    dateFrom: \"\",\n    dateTo: \"\",\n    format: \"pdf\" as \"pdf\" | \"csv\",\n  });\n  const [isExporting, setIsExporting] = useState(false);\n  const { toast } = useToast();\n\n  const { data: auditLogs = [], isLoading } = useQuery<AuditLog[]>({ \n    queryKey: ['/api/admin/audit-logs'] \n  });\n\n  const exportMutation = useMutation({\n    mutationFn: async (exportData: any) => {\n      const response = await apiRequest('POST', '/api/admin/reports/export', exportData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (reportForm.format === \"pdf\") {\n        generatePDFReport(data, reportForm.reportType);\n      } else {\n        generateCSVReport(data, reportForm.reportType);\n      }\n      toast({ description: \"Xuất báo cáo thành công!\" });\n    },\n    onError: (error: any) => {\n      toast({ variant: \"destructive\", description: \"Lỗi: \" + (error.message || \"Không thể xuất báo cáo\") });\n    }\n  });\n\n  const generatePDFReport = (data: any[], reportType: string) => {\n    const doc = new jsPDF();\n    const pageWidth = doc.internal.pageSize.width;\n    const pageHeight = doc.internal.pageSize.height;\n    \n    // Header styling\n    doc.setFillColor(67, 176, 165); // #43B0A5\n    doc.rect(0, 0, pageWidth, 30, 'F');\n    \n    // Title\n    doc.setFontSize(18);\n    doc.setTextColor(255, 255, 255);\n    doc.text('PHÚC AN ĐƯỜNG', pageWidth / 2, 15, { align: 'center' });\n    doc.setFontSize(14);\n    doc.text(`Báo cáo ${getReportTitle(reportType)}`, pageWidth / 2, 25, { align: 'center' });\n    \n    // Reset color for content\n    doc.setTextColor(0, 0, 0);\n    \n    // Date info\n    doc.setFontSize(10);\n    doc.text(`Ngày tạo: ${formatDate(new Date().toISOString())}`, 20, 45);\n    \n    if (reportForm.dateFrom && reportForm.dateTo) {\n      doc.text(`Từ ${reportForm.dateFrom} đến ${reportForm.dateTo}`, 20, 55);\n    }\n    \n    // Summary section\n    let yPos = 70;\n    doc.setFontSize(12);\n    doc.text(`Tổng số bản ghi: ${data.length}`, 20, yPos);\n    yPos += 10;\n    \n    // Add separator line\n    doc.setDrawColor(67, 176, 165);\n    doc.setLineWidth(0.5);\n    doc.line(20, yPos, pageWidth - 20, yPos);\n    yPos += 15;\n    \n    // Table data with better formatting\n    doc.setFontSize(9);\n    \n    if (data.length === 0) {\n      doc.text('Không có dữ liệu để hiển thị', 20, yPos);\n    } else {\n      const itemsPerPage = 20;\n      let currentPage = 1;\n      \n      data.slice(0, 100).forEach((item, index) => { // Limit to 100 items\n        if (yPos > pageHeight - 30) { // New page if needed\n          // Page footer\n          doc.setFontSize(8);\n          doc.text(`Trang ${currentPage}`, pageWidth / 2, pageHeight - 10, { align: 'center' });\n          \n          doc.addPage();\n          currentPage++;\n          yPos = 20;\n          \n          // Repeat header on new page\n          doc.setFontSize(12);\n          doc.text(`Báo cáo ${getReportTitle(reportType)} (tiếp theo)`, 20, yPos);\n          yPos += 15;\n        }\n        \n        // Format different report types differently\n        let line = '';\n        if (reportType === 'users') {\n          line = `${index + 1}. ${item.name || 'N/A'} - ${item.email || 'N/A'} - ${item.role || 'N/A'}`;\n        } else if (reportType === 'transactions') {\n          line = `${index + 1}. ${formatDate(item.date || new Date())} - ${item.type || 'N/A'} - ${formatCurrency(item.amount || 0)}`;\n        } else if (reportType === 'audit') {\n          line = `${index + 1}. ${formatDateTime(item.timestamp || new Date())} - ${item.action || 'N/A'} - ${item.userId || 'N/A'}`;\n        } else {\n          // Generic formatting\n          const displayText = typeof item === 'object' \n            ? Object.values(item).slice(0, 3).join(' - ')\n            : String(item);\n          line = `${index + 1}. ${displayText.substring(0, 80)}${displayText.length > 80 ? '...' : ''}`;\n        }\n        \n        doc.text(line, 20, yPos);\n        yPos += 7;\n      });\n      \n      // Final page footer\n      doc.setFontSize(8);\n      doc.text(`Trang ${currentPage}`, pageWidth / 2, pageHeight - 10, { align: 'center' });\n    }\n    \n    // Footer with generation info\n    doc.setFontSize(8);\n    doc.setTextColor(100, 100, 100);\n    doc.text(`Được tạo bởi hệ thống Phúc An Đường vào ${new Date().toLocaleString('vi-VN')}`, 20, pageHeight - 5);\n    \n    // Save with descriptive filename\n    const fileName = `phuc-an-duong-${reportType}-${new Date().toISOString().split('T')[0]}.pdf`;\n    doc.save(fileName);\n  };\n\n  const generateCSVReport = (data: any[], reportType: string) => {\n    if (data.length === 0) {\n      toast({ variant: \"destructive\", description: \"Không có dữ liệu để xuất\" });\n      return;\n    }\n\n    const headers = Object.keys(data[0]);\n    const csvContent = [\n      headers.join(','),\n      ...data.map(row => headers.map(header => `\"${row[header] || ''}\"`).join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `phuc-an-duong-${reportType}-${new Date().toISOString().split('T')[0]}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const getReportTitle = (type: string) => {\n    switch (type) {\n      case \"finance\": return \"Tài chính\";\n      case \"tax\": return \"Thuế\";\n      case \"transactions\": return \"Giao dịch\";\n      case \"users\": return \"Người dùng\";\n      default: return type;\n    }\n  };\n\n  const handleExport = () => {\n    if (!reportForm.reportType) {\n      toast({ variant: \"destructive\", description: \"Vui lòng chọn loại báo cáo\" });\n      return;\n    }\n    exportMutation.mutate(reportForm);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Download className=\"h-5 w-5 text-green-500\" />\n            Xuất báo cáo\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"reportType\">Loại báo cáo</Label>\n              <Select value={reportForm.reportType} onValueChange={(value) => setReportForm(prev => ({ ...prev, reportType: value }))}>\n                <SelectTrigger data-testid=\"select-report-type\">\n                  <SelectValue placeholder=\"Chọn loại báo cáo\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"finance\">Báo cáo tài chính</SelectItem>\n                  <SelectItem value=\"tax\">Báo cáo thuế</SelectItem>\n                  <SelectItem value=\"transactions\">Báo cáo giao dịch</SelectItem>\n                  <SelectItem value=\"users\">Báo cáo người dùng</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"format\">Định dạng</Label>\n              <Select value={reportForm.format} onValueChange={(value: \"pdf\" | \"csv\") => setReportForm(prev => ({ ...prev, format: value }))}>\n                <SelectTrigger data-testid=\"select-report-format\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"pdf\">PDF</SelectItem>\n                  <SelectItem value=\"csv\">CSV</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"dateFrom\">Từ ngày</Label>\n              <Input\n                type=\"date\"\n                value={reportForm.dateFrom}\n                onChange={(e) => setReportForm(prev => ({ ...prev, dateFrom: e.target.value }))}\n                data-testid=\"input-date-from\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"dateTo\">Đến ngày</Label>\n              <Input\n                type=\"date\"\n                value={reportForm.dateTo}\n                onChange={(e) => setReportForm(prev => ({ ...prev, dateTo: e.target.value }))}\n                data-testid=\"input-date-to\"\n              />\n            </div>\n          </div>\n          <Button \n            onClick={handleExport}\n            disabled={exportMutation.isPending}\n            className=\"mt-4\"\n            data-testid=\"button-export-report\"\n          >\n            <Download className=\"h-4 w-4 mr-2\" />\n            {exportMutation.isPending ? \"Đang xuất...\" : \"Xuất báo cáo\"}\n          </Button>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Database className=\"h-5 w-5 text-indigo-500\" />\n            Nhật ký hoạt động\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">Đang tải...</div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"whitespace-nowrap\">Thời gian</TableHead>\n                    <TableHead className=\"whitespace-nowrap\">Hành động</TableHead>\n                    <TableHead className=\"whitespace-nowrap\">Loại đối tượng</TableHead>\n                    <TableHead className=\"whitespace-nowrap\">Chi tiết</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {auditLogs.slice(0, 50).map((log) => (\n                    <TableRow key={log.id}>\n                      <TableCell className=\"whitespace-nowrap\" data-testid={`text-audit-time-${log.id}`}>\n                        {log.createdAt ? formatDateTime(log.createdAt) : \"-\"}\n                      </TableCell>\n                      <TableCell className=\"whitespace-nowrap\" data-testid={`text-audit-action-${log.id}`}>\n                        <Badge variant=\"outline\">\n                          {log.action === \"user_role_change\" ? \"Thay đổi quyền\" :\n                           log.action === \"config_update\" ? \"Cập nhật cấu hình\" :\n                           log.action === \"report_export\" ? \"Xuất báo cáo\" :\n                           log.action === \"transaction_approval\" ? \"Duyệt giao dịch\" :\n                           log.action}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"whitespace-nowrap\" data-testid={`text-audit-entity-${log.id}`}>\n                        {log.entityType}\n                      </TableCell>\n                      <TableCell className=\"max-w-xs truncate\" data-testid={`text-audit-details-${log.id}`}>\n                        {log.newValue ? JSON.parse(log.newValue).role || \n                                        JSON.parse(log.newValue).configValue || \n                                        JSON.parse(log.newValue).reportType || \n                                        JSON.stringify(JSON.parse(log.newValue)).substring(0, 50) + \"...\" \n                                      : \"-\"}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\n// Main Admin Tab Component\nexport default function AdminTab() {\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n          Quản trị hệ thống\n        </h2>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Quản lý người dùng, duyệt giao dịch, cấu hình hệ thống và xuất báo cáo\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"users\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"users\" data-testid=\"tab-users\">\n            <Users className=\"h-4 w-4 mr-2\" />\n            Người dùng\n          </TabsTrigger>\n          <TabsTrigger value=\"approvals\" data-testid=\"tab-approvals\">\n            <Shield className=\"h-4 w-4 mr-2\" />\n            Duyệt giao dịch\n          </TabsTrigger>\n          <TabsTrigger value=\"config\" data-testid=\"tab-config\">\n            <Settings className=\"h-4 w-4 mr-2\" />\n            Cấu hình\n          </TabsTrigger>\n          <TabsTrigger value=\"reports\" data-testid=\"tab-reports\">\n            <FileText className=\"h-4 w-4 mr-2\" />\n            Báo cáo\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"users\">\n          <UserManagement />\n        </TabsContent>\n\n        <TabsContent value=\"approvals\">\n          <TransactionApproval />\n        </TabsContent>\n\n        <TabsContent value=\"config\">\n          <SystemConfiguration />\n        </TabsContent>\n\n        <TabsContent value=\"reports\">\n          <ReportsAndAudit />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":34365},"client/src/components/branches-tab.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { BsBuilding as Building, BsGraphUp as GraphUp, BsExclamationTriangle as ExclamationTriangle, BsTrophy as Trophy, BsClipboardData as ClipboardData } from \"react-icons/bs\";\nimport type { Branch } from \"@shared/schema\";\n\ninterface BranchPerformance extends Branch {\n  kpiScore: number;\n  cardSales: number;\n  revisitRate: number;\n  deviceRevenue: number;\n  totalRevenue: number;\n  isUnderperforming: boolean;\n  padTokenValue: number; // Parsed value for display\n  revenuePredictions: {\n    sixMonths: number;\n    oneYear: number;\n    threeYears: number;\n    fiveYears: number;\n  };\n}\n\ninterface KpiAlert {\n  type: string;\n  severity: string;\n  message: string;\n  branchId: string;\n  branchName: string;\n  kpiScore: number;\n}\n\nexport default function BranchesTab() {\n  const [selectedPeriod, setSelectedPeriod] = useState(\"month\");\n  const [selectedPeriodValue, setSelectedPeriodValue] = useState(\"2024-11\");\n\n  // Queries\n  const { data: branchPerformance = [], isLoading } = useQuery<BranchPerformance[]>({\n    queryKey: [\"/api/branches/performance\", selectedPeriod, selectedPeriodValue],\n    queryFn: async () => {\n      const response = await fetch(`/api/branches/performance?period=${selectedPeriod}&periodValue=${selectedPeriodValue}`);\n      return response.json();\n    },\n  });\n\n  const { data: kpiAlerts = [] } = useQuery<KpiAlert[]>({\n    queryKey: [\"/api/kpis/alerts\", selectedPeriod, selectedPeriodValue],\n    queryFn: async () => {\n      const response = await fetch(`/api/kpis/alerts?period=${selectedPeriod}&periodValue=${selectedPeriodValue}`);\n      return response.json();\n    },\n  });\n\n  const formatCurrency = (amount: number) => {\n    return `${(amount / 1000000).toLocaleString('vi-VN', { maximumFractionDigits: 1 })}M₫`;\n  };\n\n  const getKpiVariant = (score: number) => {\n    if (score >= 90) return \"default\";\n    if (score >= 80) return \"secondary\"; \n    if (score >= 70) return \"outline\";\n    return \"destructive\";\n  };\n\n  const getPeriodOptions = () => {\n    if (selectedPeriod === \"month\") {\n      return [\n        { value: \"2024-11\", label: \"Tháng 11/2024\" },\n        { value: \"2024-10\", label: \"Tháng 10/2024\" },\n        { value: \"2024-09\", label: \"Tháng 9/2024\" },\n      ];\n    } else if (selectedPeriod === \"quarter\") {\n      return [\n        { value: \"2024-Q4\", label: \"Quý 4/2024\" },\n        { value: \"2024-Q3\", label: \"Quý 3/2024\" },\n        { value: \"2024-Q2\", label: \"Quý 2/2024\" },\n      ];\n    } else {\n      return [\n        { value: \"2024\", label: \"Năm 2024\" },\n        { value: \"2023\", label: \"Năm 2023\" },\n      ];\n    }\n  };\n\n  if (isLoading) {\n    return <div className=\"text-center py-4\">Đang tải dữ liệu KPI...</div>;\n  }\n\n  return (\n    <div className=\"container-fluid px-3\">\n      {/* KPI Alerts */}\n      {kpiAlerts.length > 0 && (\n        <div className=\"row mb-4\">\n          <div className=\"col-12\">\n            {kpiAlerts.map((alert, index) => (\n              <Alert key={index} className={`mb-2 alert-${alert.type}`} data-testid={`kpi-alert-${alert.branchId}`}>\n                <ExclamationTriangle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <strong>{alert.severity === \"critical\" ? \"Khẩn cấp\" : alert.severity === \"high\" ? \"Cao\" : \"Trung bình\"}:</strong> {alert.message}\n                </AlertDescription>\n              </Alert>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Period Selection */}\n      <div className=\"row mb-4\">\n        <div className=\"col-12 col-md-6 mb-3\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <h6 className=\"mb-0 d-flex align-items-center\">\n                <ClipboardData className=\"me-2\" />\n                Chọn kỳ báo cáo\n              </h6>\n            </CardHeader>\n            <CardContent>\n              <div className=\"row g-2\">\n                <div className=\"col-6\">\n                  <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n                    <SelectTrigger className=\"form-control-lg\" data-testid=\"select-period-type\">\n                      <SelectValue placeholder=\"Chọn kỳ\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"month\">Tháng</SelectItem>\n                      <SelectItem value=\"quarter\">Quý</SelectItem>\n                      <SelectItem value=\"year\">Năm</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"col-6\">\n                  <Select value={selectedPeriodValue} onValueChange={setSelectedPeriodValue}>\n                    <SelectTrigger className=\"form-control-lg\" data-testid=\"select-period-value\">\n                      <SelectValue placeholder=\"Chọn thời gian\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {getPeriodOptions().map(option => (\n                        <SelectItem key={option.value} value={option.value}>\n                          {option.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n        \n        <div className=\"col-12 col-md-6 mb-3\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <h6 className=\"mb-0 d-flex align-items-center\">\n                <Trophy className=\"me-2\" />\n                Tổng quan KPI\n              </h6>\n            </CardHeader>\n            <CardContent>\n              <div className=\"row text-center\">\n                <div className=\"col-4\">\n                  <div className=\"fw-bold text-primary\">{branchPerformance.length}</div>\n                  <small className=\"text-muted\">Chi nhánh</small>\n                </div>\n                <div className=\"col-4\">\n                  <div className=\"fw-bold text-success\">\n                    {branchPerformance.filter(b => b.kpiScore >= 70).length}\n                  </div>\n                  <small className=\"text-muted\">Đạt KPI</small>\n                </div>\n                <div className=\"col-4\">\n                  <div className=\"fw-bold text-danger\">\n                    {branchPerformance.filter(b => b.kpiScore < 70).length}\n                  </div>\n                  <small className=\"text-muted\">Dưới 70%</small>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Franchise Benefits Section */}\n      <div className=\"row mb-4\">\n        <div className=\"col-12\">\n          <Card className=\"border-primary\">\n            <CardHeader className=\"bg-primary text-white\">\n              <h5 className=\"mb-0 d-flex align-items-center\">\n                <Trophy className=\"me-2\" />\n                Quyền lợi Nhượng quyền sớm\n              </h5>\n            </CardHeader>\n            <CardContent className=\"pt-3\">\n              <div className=\"row\">\n                <div className=\"col-md-4 mb-3\">\n                  <div className=\"card bg-light h-100\">\n                    <div className=\"card-body text-center\">\n                      <h3 className=\"text-primary fw-bold\">20,000 PAD</h3>\n                      <p className=\"mb-1\"><strong>200 phần cổ định</strong></p>\n                      <small className=\"text-muted\">Tương đương 200 triệu VNĐ vốn góp</small>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"col-md-8\">\n                  <h6 className=\"fw-bold mb-3\">📋 Quyền lợi bao gồm:</h6>\n                  <div className=\"row\">\n                    <div className=\"col-sm-6 mb-2\">\n                      <div className=\"d-flex align-items-start\">\n                        <span className=\"badge bg-success me-2 mt-1\">✓</span>\n                        <span>SOP vận hành chi nhánh chi tiết</span>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-6 mb-2\">\n                      <div className=\"d-flex align-items-start\">\n                        <span className=\"badge bg-success me-2 mt-1\">✓</span>\n                        <span>Đào tạo toàn diện cho nhân viên</span>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-6 mb-2\">\n                      <div className=\"d-flex align-items-start\">\n                        <span className=\"badge bg-success me-2 mt-1\">✓</span>\n                        <span>Phần mềm quản lý tích hợp</span>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-6 mb-2\">\n                      <div className=\"d-flex align-items-start\">\n                        <span className=\"badge bg-success me-2 mt-1\">✓</span>\n                        <span>Hỗ trợ marketing & branding</span>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-6 mb-2\">\n                      <div className=\"d-flex align-items-start\">\n                        <span className=\"badge bg-success me-2 mt-1\">✓</span>\n                        <span>Chia sẻ lợi nhuận 49% (với KPI ≥70%)</span>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-6 mb-2\">\n                      <div className=\"d-flex align-items-start\">\n                        <span className=\"badge bg-success me-2 mt-1\">✓</span>\n                        <span>Tư vấn chiến lược định kỳ</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Revenue Predictions */}\n      {branchPerformance.length > 0 && (\n        <div className=\"row mb-4\">\n          <div className=\"col-12\">\n            <Card>\n              <CardHeader>\n                <h5 className=\"mb-0 d-flex align-items-center\">\n                  <GraphUp className=\"me-2\" />\n                  Dự đoán doanh thu theo thời gian\n                </h5>\n              </CardHeader>\n              <CardContent>\n                <div className=\"row text-center\">\n                  <div className=\"col-6 col-md-3 mb-3\">\n                    <div className=\"card bg-light\">\n                      <div className=\"card-body\">\n                        <small className=\"text-muted d-block mb-1\">6 tháng</small>\n                        <h5 className=\"fw-bold text-primary mb-0\">{formatCurrency(branchPerformance[0]?.revenuePredictions?.sixMonths || 80000000)}</h5>\n                        <small className=\"text-muted\">/tháng</small>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"col-6 col-md-3 mb-3\">\n                    <div className=\"card bg-light\">\n                      <div className=\"card-body\">\n                        <small className=\"text-muted d-block mb-1\">1 năm</small>\n                        <h5 className=\"fw-bold text-success mb-0\">{formatCurrency(branchPerformance[0]?.revenuePredictions?.oneYear || 120000000)}</h5>\n                        <small className=\"text-muted\">/tháng</small>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"col-6 col-md-3 mb-3\">\n                    <div className=\"card bg-light\">\n                      <div className=\"card-body\">\n                        <small className=\"text-muted d-block mb-1\">3 năm</small>\n                        <h5 className=\"fw-bold text-info mb-0\">{formatCurrency(branchPerformance[0]?.revenuePredictions?.threeYears || 200000000)}</h5>\n                        <small className=\"text-muted\">/tháng</small>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"col-6 col-md-3 mb-3\">\n                    <div className=\"card bg-light\">\n                      <div className=\"card-body\">\n                        <small className=\"text-muted d-block mb-1\">5 năm</small>\n                        <h5 className=\"fw-bold text-warning mb-0\">{formatCurrency(branchPerformance[0]?.revenuePredictions?.fiveYears || 350000000)}</h5>\n                        <small className=\"text-muted\">/tháng</small>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      )}\n\n      {/* Branch Ranking Table */}\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <Card>\n            <CardHeader>\n              <h5 className=\"mb-0 d-flex align-items-center\">\n                <GraphUp className=\"me-2\" />\n                Bảng xếp hạng chi nhánh - {getPeriodOptions().find(p => p.value === selectedPeriodValue)?.label}\n              </h5>\n            </CardHeader>\n            <CardContent>\n              {/* Mobile-optimized table */}\n              <div className=\"table-responsive\">\n                <table className=\"table table-striped table-hover\" data-testid=\"branches-ranking-table\">\n                  <thead className=\"table-dark\">\n                    <tr>\n                      <th className=\"text-center\">#</th>\n                      <th>Chi nhánh</th>\n                      <th className=\"text-center\">PAD Token</th>\n                      <th className=\"text-center\">KPI Score</th>\n                      <th className=\"text-center d-none d-md-table-cell\">Bán thẻ</th>\n                      <th className=\"text-center d-none d-md-table-cell\">Tái khám (%)</th>\n                      <th className=\"text-center d-none d-lg-table-cell\">DT Thiết bị</th>\n                      <th className=\"text-center d-none d-lg-table-cell\">Tổng DT</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {branchPerformance.map((branch, index) => (\n                      <tr key={branch.id} data-testid={`branch-row-${branch.id}`}>\n                        <td className=\"text-center fw-bold\">\n                          {index === 0 && <Trophy className=\"text-warning me-1\" />}\n                          {index + 1}\n                        </td>\n                        <td>\n                          <div className=\"d-flex align-items-center\">\n                            <Building className=\"me-2 text-primary\" />\n                            <div>\n                              <div className=\"fw-bold\">{branch.name.replace(\"Chi nhánh \", \"\")}</div>\n                              <small className=\"text-muted d-md-none\">\n                                {branch.cardSales} thẻ • {branch.revisitRate.toFixed(1)}% tái khám\n                              </small>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"text-center\" data-testid={`pad-token-${branch.id}`}>\n                          <span className=\"fw-bold text-success\">{(branch.padTokenValue || 20000).toLocaleString('vi-VN')}</span>\n                          <small className=\"text-muted d-block\">PAD</small>\n                        </td>\n                        <td className=\"text-center\">\n                          <Badge variant={getKpiVariant(branch.kpiScore)} data-testid={`kpi-score-${branch.id}`}>\n                            {branch.kpiScore}%\n                          </Badge>\n                          {branch.isUnderperforming && (\n                            <div>\n                              <Badge variant=\"destructive\" className=\"mt-1\">\n                                <ExclamationTriangle className=\"me-1\" style={{ fontSize: \"12px\" }} />\n                                Cảnh báo\n                              </Badge>\n                            </div>\n                          )}\n                        </td>\n                        <td className=\"text-center d-none d-md-table-cell\" data-testid={`card-sales-${branch.id}`}>\n                          <span className=\"fw-bold\">{branch.cardSales}</span>\n                          <small className=\"text-muted d-block\">thẻ</small>\n                        </td>\n                        <td className=\"text-center d-none d-md-table-cell\" data-testid={`revisit-rate-${branch.id}`}>\n                          <span className={`fw-bold ${branch.revisitRate >= 80 ? \"text-success\" : branch.revisitRate >= 70 ? \"text-warning\" : \"text-danger\"}`}>\n                            {branch.revisitRate.toFixed(1)}%\n                          </span>\n                        </td>\n                        <td className=\"text-center d-none d-lg-table-cell\" data-testid={`device-revenue-${branch.id}`}>\n                          <span className=\"fw-bold\">{formatCurrency(branch.deviceRevenue)}</span>\n                        </td>\n                        <td className=\"text-center d-none d-lg-table-cell\" data-testid={`total-revenue-${branch.id}`}>\n                          <span className=\"fw-bold text-primary\">{formatCurrency(branch.totalRevenue)}</span>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n\n              {branchPerformance.length === 0 && (\n                <div className=\"text-center py-4 text-muted\" data-testid=\"empty-performance\">\n                  Không có dữ liệu KPI cho kỳ báo cáo này\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* KPI Details Cards for Mobile */}\n      <div className=\"row mt-4 d-md-none\">\n        {branchPerformance.map((branch) => (\n          <div key={`mobile-${branch.id}`} className=\"col-12 mb-3\">\n            <Card className={branch.isUnderperforming ? \"border-danger\" : \"\"}>\n              <CardContent className=\"p-3\">\n                <div className=\"d-flex justify-content-between align-items-start mb-2\">\n                  <h6 className=\"mb-0\">{branch.name.replace(\"Chi nhánh \", \"\")}</h6>\n                  <Badge variant={getKpiVariant(branch.kpiScore)}>\n                    {branch.kpiScore}% KPI\n                  </Badge>\n                </div>\n                \n                <div className=\"row text-center\">\n                  <div className=\"col-6 col-sm-3 mb-2\">\n                    <div className=\"fw-bold text-success\">{(branch.padTokenValue || 20000).toLocaleString('vi-VN')}</div>\n                    <small className=\"text-muted\">PAD Token</small>\n                  </div>\n                  <div className=\"col-6 col-sm-3 mb-2\">\n                    <div className=\"fw-bold text-primary\">{branch.cardSales}</div>\n                    <small className=\"text-muted\">Bán thẻ</small>\n                  </div>\n                  <div className=\"col-6 col-sm-3 mb-2\">\n                    <div className={`fw-bold ${branch.revisitRate >= 80 ? \"text-success\" : branch.revisitRate >= 70 ? \"text-warning\" : \"text-danger\"}`}>\n                      {branch.revisitRate.toFixed(1)}%\n                    </div>\n                    <small className=\"text-muted\">Tái khám</small>\n                  </div>\n                  <div className=\"col-6 col-sm-3 mb-2\">\n                    <div className=\"fw-bold\">{formatCurrency(branch.deviceRevenue)}</div>\n                    <small className=\"text-muted\">DT Thiết bị</small>\n                  </div>\n                  <div className=\"col-12 col-sm-12 mb-2\">\n                    <div className=\"fw-bold text-primary\">{formatCurrency(branch.totalRevenue)}</div>\n                    <small className=\"text-muted\">Tổng DT</small>\n                  </div>\n                </div>\n\n                {branch.isUnderperforming && (\n                  <div className=\"mt-2\">\n                    <Alert className=\"py-2 mb-0 alert-danger\">\n                      <AlertDescription className=\"mb-0\">\n                        <small>\n                          <ExclamationTriangle className=\"me-1\" />\n                          Chi nhánh cần cải thiện KPI (dưới 70%)\n                        </small>\n                      </AlertDescription>\n                    </Alert>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        ))}\n      </div>\n\n      {/* Profit Sharing Eligibility Notice */}\n      <div className=\"row mt-4\">\n        <div className=\"col-12\">\n          <Alert className=\"alert-info\">\n            <AlertDescription>\n              <strong>Lưu ý:</strong> Chỉ chi nhánh có KPI ≥ 70% mới được tham gia chia sẻ lợi nhuận. \n              Hiện tại có <strong>{branchPerformance.filter(b => b.kpiScore >= 70).length}/{branchPerformance.length}</strong> chi nhánh đủ điều kiện.\n            </AlertDescription>\n          </Alert>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":21387},"client/src/components/cards-tab.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Plus, Search, QrCode, Users, AlertTriangle, CreditCard } from \"lucide-react\";\nimport type { Card as CardType, InsertCard } from \"@shared/schema\";\n\ninterface CardTypePricing {\n  type: string;\n  price: number;\n  maxSessions: number;\n}\n\ninterface CardBenefits {\n  cardId: string;\n  cardType: string;\n  price: number;\n  currentShares: number;\n  shareValue: number;\n  maxoutLimit: number;\n  maxoutPercentage: number;\n  status: string;\n  connectionCommission: number;\n  vipSupport: number;\n  profitSharePercentage: number;\n  padToken: number;\n  consultationSessions: number;\n  isNearMaxout: boolean;\n}\n\nexport default function CardsTab() {\n  const { toast } = useToast();\n  const [editingCard, setEditingCard] = useState<CardType | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCardForBenefits, setSelectedCardForBenefits] = useState<string | null>(null);\n  \n  const [formData, setFormData] = useState<InsertCard>({\n    cardNumber: \"\",\n    cardType: \"\",\n    customerName: \"\",\n    price: \"2000000\",\n    remainingSessions: 0,\n    status: \"active\",\n  });\n\n  // Queries\n  const { data: cards = [], isLoading } = useQuery<CardType[]>({\n    queryKey: [\"/api/cards\"],\n  });\n\n  const { data: cardTypes = [] } = useQuery<CardTypePricing[]>({\n    queryKey: [\"/api/cards/types\"],\n  });\n\n  const { data: cardBenefits } = useQuery<CardBenefits>({\n    queryKey: [\"/api/cards\", selectedCardForBenefits, \"benefits\"],\n    enabled: !!selectedCardForBenefits,\n  });\n\n  // Mutations\n  const createCardMutation = useMutation({\n    mutationFn: async (cardData: InsertCard) => {\n      // Calculate maxout limit and set sessions based on card type\n      const selectedType = cardTypes.find(t => t.type === cardData.cardType);\n      const enrichedData = {\n        ...cardData,\n        remainingSessions: selectedType?.maxSessions || 0,\n        maxoutLimit: (parseFloat(cardData.price) * 2.1).toString(),\n        currentShares: \"0\",\n        shareHistory: \"\",\n        connectionCommission: \"8.0\",\n        vipSupport: \"5.0\"\n      };\n      \n      const res = await apiRequest(\"POST\", \"/api/cards\", enrichedData);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cards\"] });\n      resetForm();\n      toast({\n        title: \"Thành công\",\n        description: \"Thẻ đã được tạo thành công\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Lỗi\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateCardMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertCard> }) => {\n      const res = await apiRequest(\"PUT\", `/api/cards/${id}`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cards\"] });\n      resetForm();\n      toast({\n        title: \"Thành công\", \n        description: \"Thẻ đã được cập nhật thành công\",\n      });\n    },\n  });\n\n  const checkInMutation = useMutation({\n    mutationFn: async ({ cardId, sessionType }: { cardId: string; sessionType: string }) => {\n      const res = await apiRequest(\"POST\", `/api/cards/${cardId}/checkin`, { \n        sessionType,\n        notes: \"QR Code check-in\"\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cards\"] });\n      toast({\n        title: \"Check-in thành công\",\n        description: \"Đã ghi nhận phiên trị liệu\",\n      });\n    },\n  });\n\n  // Helper functions\n  const resetForm = () => {\n    setFormData({\n      cardNumber: \"\",\n      cardType: \"\",\n      customerName: \"\",\n      price: \"2000000\",\n      remainingSessions: 0,\n      status: \"active\",\n    });\n    setEditingCard(null);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (editingCard) {\n      updateCardMutation.mutate({ id: editingCard.id, data: formData });\n    } else {\n      createCardMutation.mutate(formData);\n    }\n  };\n\n  const handleEdit = (card: CardType) => {\n    setEditingCard(card);\n    setFormData({\n      cardNumber: card.cardNumber,\n      cardType: card.cardType,\n      customerName: card.customerName,\n      price: card.price,\n      remainingSessions: card.remainingSessions || 0,\n      status: card.status,\n    });\n  };\n\n  const handleCardTypeChange = (cardType: string) => {\n    const selectedType = cardTypes.find(t => t.type === cardType);\n    setFormData(prev => ({\n      ...prev,\n      cardType,\n      price: selectedType ? selectedType.price.toString() : \"2000000\",\n      remainingSessions: selectedType?.maxSessions || 0\n    }));\n  };\n\n  const simulateQRScan = (cardId: string) => {\n    checkInMutation.mutate({ cardId, sessionType: \"therapy\" });\n  };\n\n  const getCardStatusBadge = (card: CardType) => {\n    const price = parseFloat(card.price);\n    const currentShares = parseFloat(card.currentShares || \"0\");\n    const maxoutLimit = price * 2.1;\n    const shareValue = currentShares * 1000000;\n    const percentage = (shareValue / maxoutLimit) * 100;\n\n    if (percentage >= 100) {\n      return <Badge variant=\"destructive\">Stopped</Badge>;\n    } else if (percentage >= 90) {\n      return <Badge variant=\"secondary\">Near Maxout</Badge>;\n    } else if (currentShares > 0) {\n      return <Badge variant=\"default\">Shared</Badge>;\n    }\n    return <Badge variant=\"outline\">Active</Badge>;\n  };\n\n  const filteredCards = cards.filter(card =>\n    card.customerName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    card.cardNumber.includes(searchTerm) ||\n    card.cardType.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const nearMaxoutCards = cards.filter(card => {\n    const price = parseFloat(card.price);\n    const currentShares = parseFloat(card.currentShares || \"0\");\n    const shareValue = currentShares * 1000000;\n    const maxoutLimit = price * 2.1;\n    return (shareValue / maxoutLimit) >= 0.9;\n  });\n\n  if (isLoading) {\n    return <div className=\"text-center py-4\">Đang tải...</div>;\n  }\n\n  return (\n    <div>\n      {/* Alerts for Near Maxout Cards */}\n      {nearMaxoutCards.length > 0 && (\n        <div className=\"mb-4\">\n          {nearMaxoutCards.map((card) => (\n            <Alert key={card.id} className=\"mb-2 alert-warning\" data-testid={`maxout-alert-${card.id}`}>\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>\n                <strong>Cảnh báo:</strong> Thẻ {card.cardType} của {card.customerName} sắp đạt giới hạn Maxout!\n              </AlertDescription>\n            </Alert>\n          ))}\n        </div>\n      )}\n\n      <div className=\"row\">\n        {/* Card Management Form */}\n        <div className=\"col-12 col-lg-4 mb-4\">\n          <Card>\n            <CardHeader>\n              <h5 className=\"mb-0 d-flex align-items-center\">\n                <CreditCard className=\"me-2\" />\n                {editingCard ? \"Chỉnh sửa thẻ\" : \"Tạo thẻ mới\"}\n              </h5>\n              {editingCard && (\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={resetForm}\n                  data-testid=\"button-cancel-edit\"\n                >\n                  Hủy\n                </Button>\n              )}\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} data-testid=\"card-form\">\n                <div className=\"mb-3\">\n                  <Label htmlFor=\"cardType\">Loại thẻ *</Label>\n                  <Select \n                    value={formData.cardType} \n                    onValueChange={handleCardTypeChange}\n                    required\n                  >\n                    <SelectTrigger className=\"form-control-lg\" data-testid=\"select-card-type\">\n                      <SelectValue placeholder=\"Chọn loại thẻ\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {cardTypes.map((type) => (\n                        <SelectItem key={type.type} value={type.type}>\n                          {type.type} - {(type.price / 1000000).toLocaleString('vi-VN')}M VND\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"mb-3\">\n                  <Label htmlFor=\"customerName\">Tên khách hàng *</Label>\n                  <Input\n                    id=\"customerName\"\n                    value={formData.customerName}\n                    onChange={(e) => setFormData(prev => ({ ...prev, customerName: e.target.value }))}\n                    placeholder=\"Nguyễn Văn A\"\n                    required\n                    className=\"form-control-lg\"\n                    data-testid=\"input-customer-name\"\n                  />\n                </div>\n\n                <div className=\"mb-3\">\n                  <Label htmlFor=\"cardNumber\">Số thẻ *</Label>\n                  <Input\n                    id=\"cardNumber\"\n                    value={formData.cardNumber}\n                    onChange={(e) => setFormData(prev => ({ ...prev, cardNumber: e.target.value }))}\n                    placeholder=\"1234-5678-9012-3456\"\n                    required\n                    className=\"form-control-lg\"\n                    data-testid=\"input-card-number\"\n                  />\n                </div>\n\n                <div className=\"mb-3\">\n                  <Label htmlFor=\"price\">Giá trị thẻ (VND)</Label>\n                  <Input\n                    id=\"price\"\n                    type=\"number\"\n                    value={formData.price}\n                    onChange={(e) => setFormData(prev => ({ ...prev, price: e.target.value }))}\n                    className=\"form-control-lg\"\n                    data-testid=\"input-price\"\n                    disabled={!!formData.cardType} // Auto-set by card type\n                  />\n                </div>\n\n                <div className=\"mb-3\">\n                  <Label htmlFor=\"remainingSessions\">Số phiên còn lại</Label>\n                  <Input\n                    id=\"remainingSessions\"\n                    type=\"number\"\n                    value={formData.remainingSessions || 0}\n                    onChange={(e) => setFormData(prev => ({ ...prev, remainingSessions: parseInt(e.target.value) || 0 }))}\n                    className=\"form-control-lg\"\n                    data-testid=\"input-sessions\"\n                  />\n                </div>\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-100 btn-lg\"\n                  disabled={createCardMutation.isPending || updateCardMutation.isPending}\n                  data-testid=\"button-submit-card\"\n                >\n                  {editingCard ? \"Cập nhật thẻ\" : \"Tạo thẻ mới\"}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Card Search and List */}\n        <div className=\"col-12 col-lg-8 mb-4\">\n          <Card>\n            <CardHeader>\n              <div className=\"d-flex flex-column flex-md-row align-items-md-center justify-content-between\">\n                <h5 className=\"mb-2 mb-md-0\">Danh sách thẻ khách hàng</h5>\n                <div className=\"d-flex align-items-center\">\n                  <div className=\"input-group\" style={{ maxWidth: \"300px\" }}>\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Tìm kiếm thẻ...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"form-control-lg\"\n                      data-testid=\"input-search\"\n                    />\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Search className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"row\">\n                {filteredCards.map((card) => (\n                  <div key={card.id} className=\"col-12 col-md-6 mb-3\" data-testid={`card-${card.id}`}>\n                    <Card className=\"h-100\">\n                      <CardContent className=\"p-3\">\n                        <div className=\"d-flex justify-content-between align-items-start mb-2\">\n                          <div>\n                            <h6 className=\"mb-1 fw-bold\" data-testid={`card-customer-${card.id}`}>\n                              {card.customerName}\n                            </h6>\n                            <small className=\"text-muted\">\n                              ****-****-****-{card.cardNumber.slice(-4)}\n                            </small>\n                          </div>\n                          {getCardStatusBadge(card)}\n                        </div>\n                        \n                        <div className=\"mb-2\">\n                          <Badge variant=\"outline\" className=\"me-2\">\n                            {card.cardType}\n                          </Badge>\n                          <small className=\"text-muted\">\n                            {(parseFloat(card.price) / 1000000).toLocaleString('vi-VN')}M VND\n                          </small>\n                        </div>\n\n                        <div className=\"mb-3\">\n                          <div className=\"d-flex justify-content-between align-items-center mb-1\">\n                            <small>Phiên còn lại:</small>\n                            <Badge variant={card.remainingSessions! > 5 ? \"default\" : \"secondary\"}>\n                              {card.remainingSessions || 0}\n                            </Badge>\n                          </div>\n                          \n                          <div className=\"progress\" style={{ height: \"6px\" }}>\n                            <div\n                              className=\"progress-bar bg-primary\"\n                              role=\"progressbar\"\n                              style={{ \n                                width: `${Math.min(100, ((card.remainingSessions || 0) / 10) * 100)}%` \n                              }}\n                            ></div>\n                          </div>\n                        </div>\n\n                        <div className=\"d-flex gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"flex-1 btn-lg\"\n                            onClick={() => simulateQRScan(card.id)}\n                            disabled={!card.remainingSessions || card.remainingSessions <= 0}\n                            data-testid={`button-checkin-${card.id}`}\n                          >\n                            <QrCode className=\"h-4 w-4 me-1\" />\n                            Check-in\n                          </Button>\n                          \n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(card)}\n                            data-testid={`button-edit-${card.id}`}\n                          >\n                            Sửa\n                          </Button>\n                          \n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setSelectedCardForBenefits(card.id)}\n                            data-testid={`button-benefits-${card.id}`}\n                          >\n                            <Users className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                ))}\n                \n                {filteredCards.length === 0 && (\n                  <div className=\"col-12\">\n                    <div className=\"text-center py-4 text-muted\" data-testid=\"empty-cards\">\n                      {searchTerm ? \"Không tìm thấy thẻ nào\" : \"Chưa có thẻ nào được tạo\"}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Benefits Analysis Modal */}\n      {selectedCardForBenefits && cardBenefits && (\n        <div className=\"row mt-4\">\n          <div className=\"col-12\">\n            <Card>\n              <CardHeader>\n                <div className=\"d-flex justify-content-between align-items-center\">\n                  <h5 className=\"mb-0\">Phân tích lợi ích thẻ</h5>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => setSelectedCardForBenefits(null)}\n                  >\n                    Đóng\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"row mb-4\">\n                  <div className=\"col-12\">\n                    <div className=\"text-center p-4 rounded\" style={{ backgroundColor: '#e8f5f3', border: '2px solid #43B0A5' }}>\n                      <h6 className=\"text-muted mb-2\">\n                        <i className=\"bi bi-coin me-2\"></i>\n                        PAD Token\n                      </h6>\n                      <div className=\"display-5 fw-bold\" style={{ color: '#43B0A5' }} data-testid=\"card-pad-token\">\n                        {cardBenefits.padToken.toLocaleString('vi-VN')} PAD\n                      </div>\n                      <small className=\"text-muted\">\n                        Giá trị: {(cardBenefits.padToken / 100).toLocaleString('vi-VN')} triệu VNĐ\n                      </small>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"row\">\n                  <div className=\"col-12 col-md-3 mb-3\">\n                    <div className=\"text-center p-3 bg-light rounded\">\n                      <h6 className=\"text-primary\">Kết nối</h6>\n                      <div className=\"display-6 fw-bold\">{cardBenefits.connectionCommission}%</div>\n                    </div>\n                  </div>\n                  <div className=\"col-12 col-md-3 mb-3\">\n                    <div className=\"text-center p-3 bg-light rounded\">\n                      <h6 className=\"text-success\">VIP</h6>\n                      <div className=\"display-6 fw-bold\">{cardBenefits.vipSupport}%</div>\n                    </div>\n                  </div>\n                  <div className=\"col-12 col-md-3 mb-3\">\n                    <div className=\"text-center p-3 bg-light rounded\">\n                      <h6 className=\"text-info\">Lợi tức</h6>\n                      <div className=\"display-6 fw-bold\">{cardBenefits.profitSharePercentage}%</div>\n                    </div>\n                  </div>\n                  <div className=\"col-12 col-md-3 mb-3\">\n                    <div className=\"text-center p-3 bg-light rounded\">\n                      <h6 className=\"text-warning\">Maxout</h6>\n                      <div className=\"display-6 fw-bold\">{cardBenefits.maxoutPercentage.toFixed(1)}%</div>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"mt-3\">\n                  <h6>\n                    <i className=\"bi bi-heart-pulse me-2\"></i>\n                    Dịch vụ tư vấn sức khỏe\n                  </h6>\n                  <div className=\"alert alert-info\" role=\"alert\">\n                    <strong>{cardBenefits.consultationSessions} lượt</strong> tư vấn sức khỏe miễn phí trong 2 năm\n                  </div>\n                </div>\n\n                <div className=\"mt-3\">\n                  <h6>Chi tiết quyền lợi:</h6>\n                  <ul className=\"list-unstyled\">\n                    <li>💰 Giá trị thẻ: {(cardBenefits.price / 1000000).toLocaleString('vi-VN')}M VNĐ</li>\n                    <li>🪙 PAD Token: {cardBenefits.padToken.toLocaleString('vi-VN')} PAD (100 PAD = 1 triệu VNĐ)</li>\n                    <li>📈 Cổ phần hiện tại: {cardBenefits.currentShares.toLocaleString('vi-VN')}</li>\n                    <li>🎯 Giới hạn Maxout: {(cardBenefits.maxoutLimit / 1000000).toLocaleString('vi-VN')}M VNĐ</li>\n                    <li>🔗 Hoa hồng kết nối: {cardBenefits.connectionCommission}%</li>\n                    <li>👑 Hỗ trợ VIP: {cardBenefits.vipSupport}%</li>\n                    <li>💸 Chia sẻ lợi nhuận sau thuế: {cardBenefits.profitSharePercentage}%</li>\n                    <li>🏥 Tư vấn sức khỏe: {cardBenefits.consultationSessions} lượt/2 năm</li>\n                    <li>🔄 Quy tắc: 1M VNĐ = 1 Cổ phần, Maxout tại 210% giá trị thẻ</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":21734},"client/src/components/dashboard-tab.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useEffect, useRef } from \"react\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\ndeclare global {\n  interface Window {\n    Chart: any;\n  }\n}\n\ninterface BusinessOverview {\n  quarterlyData: {\n    labels: string[];\n    revenue: number[];\n    expenses: number[];\n    profitAfterTax: number[];\n  };\n  cardMaxoutStatus: Array<{\n    type: string;\n    current: number;\n    max: number;\n    percentage: number;\n  }>;\n  profitAllocation: {\n    roles: number;\n    operations: number;\n    expansion: number;\n    capitalBased: number;\n    laborBased: number;\n  };\n  profitAllocationBreakdown: {\n    capital: {\n      percentage: number;\n      roles: string[];\n    };\n    labor: {\n      percentage: number;\n      roles: string[];\n    };\n  };\n  roiPredictions: Array<{\n    role: string;\n    investment: number;\n    sixMonths: number;\n    oneYear: number;\n    threeYears: number;\n    fiveYears: number;\n    fiveYearROI: number;\n  }>;\n  alerts: Array<{\n    type: string;\n    message: string;\n    severity: string;\n  }>;\n  topBranches: Array<{\n    rank: number;\n    name: string;\n    score: number;\n    kpi: number;\n  }>;\n}\n\nexport default function DashboardTab() {\n  const chartRef = useRef<HTMLCanvasElement>(null);\n  const chartInstance = useRef<any>(null);\n  const profitChartRef = useRef<HTMLCanvasElement>(null);\n  const profitChartInstance = useRef<any>(null);\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery<{\n    totalRevenue: string;\n    activeCards: number;\n    branches: number;\n    staff: number;\n    padToken: number;\n  } | null>({\n    queryKey: [\"/api/dashboard/metrics\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false\n  });\n\n  const { data: businessData, isLoading: businessLoading } = useQuery<BusinessOverview>({\n    queryKey: [\"/api/dashboard/business-overview\"],\n  });\n\n  useEffect(() => {\n    if (businessData && chartRef.current && window.Chart) {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n\n      const ctx = chartRef.current.getContext('2d');\n      chartInstance.current = new window.Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: businessData.quarterlyData.labels,\n          datasets: [\n            {\n              label: 'Doanh thu',\n              data: businessData.quarterlyData.revenue,\n              backgroundColor: '#43B0A5',\n              borderRadius: 4,\n            },\n            {\n              label: 'Chi phí', \n              data: businessData.quarterlyData.expenses,\n              backgroundColor: '#ffc107',\n              borderRadius: 4,\n            },\n            {\n              label: 'Lợi nhuận sau thuế',\n              data: businessData.quarterlyData.profitAfterTax,\n              backgroundColor: '#28a745',\n              borderRadius: 4,\n            }\n          ]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              position: 'top' as const,\n            },\n            title: {\n              display: true,\n              text: 'Báo cáo tài chính theo quý (USD)'\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              ticks: {\n                callback: function(value: any) {\n                  return '$' + value;\n                }\n              }\n            }\n          }\n        }\n      });\n    }\n\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [businessData]);\n\n  useEffect(() => {\n    if (businessData && profitChartRef.current && window.Chart) {\n      if (profitChartInstance.current) {\n        profitChartInstance.current.destroy();\n      }\n\n      const ctx = profitChartRef.current.getContext('2d');\n      profitChartInstance.current = new window.Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: ['Vốn (30%)', 'Công (19%)'],\n          datasets: [{\n            data: [\n              businessData.profitAllocation.capitalBased,\n              businessData.profitAllocation.laborBased\n            ],\n            backgroundColor: ['#43B0A5', '#ffc107'],\n            borderWidth: 2,\n            borderColor: '#fff'\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            legend: {\n              position: 'bottom' as const,\n            },\n            title: {\n              display: true,\n              text: 'Phân bổ 49% lợi nhuận sau thuế'\n            },\n            tooltip: {\n              callbacks: {\n                label: function(context: any) {\n                  return context.label + ': ' + context.parsed + '%';\n                }\n              }\n            }\n          }\n        }\n      });\n    }\n\n    return () => {\n      if (profitChartInstance.current) {\n        profitChartInstance.current.destroy();\n      }\n    };\n  }, [businessData]);\n\n  useEffect(() => {\n    if (!window.Chart) {\n      const script = document.createElement('script');\n      script.src = 'https://cdn.jsdelivr.net/npm/chart.js';\n      script.async = true;\n      document.head.appendChild(script);\n    }\n  }, []);\n\n  if (metricsLoading || businessLoading) {\n    return (\n      <div className=\"row\">\n        {[...Array(6)].map((_, i) => (\n          <div key={i} className=\"col-12 col-md-6 col-xl-4\">\n            <Card className=\"metric-card mb-3\">\n              <CardContent className=\"p-4\">\n                <Skeleton className=\"h-8 w-20 mb-2\" />\n                <Skeleton className=\"h-4 w-16\" />\n              </CardContent>\n            </Card>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  const getProgressVariant = (percentage: number) => {\n    if (percentage >= 85) return 'bg-danger';\n    if (percentage >= 70) return 'bg-warning';\n    return 'bg-success';\n  };\n\n  const padToken = metrics?.padToken ?? 0;\n  const padValuePredictions = {\n    sixMonths: padToken * 12000,\n    oneYear: padToken * 15000,\n    threeYears: padToken * 25000,\n    fiveYears: padToken * 40000\n  };\n\n  const hasMetrics = metrics !== undefined;\n\n  return (\n    <div>\n      {businessData?.alerts && businessData.alerts.length > 0 && (\n        <div className=\"row mb-4\">\n          <div className=\"col-12\">\n            {businessData.alerts.map((alert, index) => (\n              <Alert \n                key={index} \n                className={`mb-2 alert-${alert.type}`} \n                data-testid={`alert-${index}`}\n              >\n                <AlertDescription>\n                  <i className={`bi ${alert.type === 'danger' ? 'bi-exclamation-triangle-fill' : 'bi-exclamation-circle-fill'} me-2`}></i>\n                  {alert.message}\n                </AlertDescription>\n              </Alert>\n            ))}\n          </div>\n        </div>\n      )}\n\n      <div className=\"row mb-4\">\n        <div className=\"col-12 col-md-6 col-xl-3\">\n          <div className=\"metric-card\">\n            <div className=\"metric-value\" data-testid=\"metric-revenue\">{metrics?.totalRevenue || \"0\"}₫</div>\n            <div className=\"metric-label\">Doanh thu tháng</div>\n          </div>\n        </div>\n        <div className=\"col-12 col-md-6 col-xl-3\">\n          <div className=\"metric-card\">\n            <div className=\"metric-value\" data-testid=\"metric-cards\">{metrics?.activeCards || 0}</div>\n            <div className=\"metric-label\">Thẻ đang hoạt động</div>\n          </div>\n        </div>\n        <div className=\"col-12 col-md-6 col-xl-3\">\n          <div className=\"metric-card\">\n            <div className=\"metric-value\" data-testid=\"metric-branches\">{metrics?.branches || 0}</div>\n            <div className=\"metric-label\">Chi nhánh</div>\n          </div>\n        </div>\n        <div className=\"col-12 col-md-6 col-xl-3\">\n          <div className=\"metric-card\">\n            <div className=\"metric-value\" data-testid=\"metric-staff\">{metrics?.staff || 0}</div>\n            <div className=\"metric-label\">Nhân viên</div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row mb-4\">\n        <div className=\"col-12\">\n          <Card>\n            <CardHeader>\n              <h5 className=\"mb-0\">\n                <i className=\"bi bi-coin me-2\" style={{ color: '#43B0A5' }}></i>\n                PAD Token & Dự đoán giá trị\n              </h5>\n            </CardHeader>\n            <CardContent>\n              <div className=\"row\">\n                <div className=\"col-12 col-md-6 col-lg-3 mb-3\">\n                  <div className=\"text-center p-3 rounded\" style={{ backgroundColor: '#f8f9fa' }}>\n                    <div className=\"display-6 fw-bold\" style={{ color: '#43B0A5' }} data-testid=\"pad-token-amount\">\n                      {padToken.toLocaleString('vi-VN')}\n                    </div>\n                    <div className=\"text-muted small\">PAD Token hiện tại</div>\n                    <div className=\"text-muted small mt-1\">\n                      (100 PAD = 1 triệu VNĐ)\n                    </div>\n                  </div>\n                </div>\n                <div className=\"col-12 col-md-6 col-lg-3 mb-3\">\n                  <div className=\"text-center p-3 rounded\" style={{ backgroundColor: '#e8f5f3' }}>\n                    <div className=\"h4 fw-bold\" data-testid=\"pad-value-6months\">\n                      {padValuePredictions.sixMonths.toLocaleString('vi-VN')} ₫\n                    </div>\n                    <div className=\"text-muted small\">Dự đoán 6 tháng</div>\n                    <div className=\"badge bg-success mt-1\">12.000₫/PAD</div>\n                  </div>\n                </div>\n                <div className=\"col-12 col-md-6 col-lg-3 mb-3\">\n                  <div className=\"text-center p-3 rounded\" style={{ backgroundColor: '#e8f5f3' }}>\n                    <div className=\"h4 fw-bold\" data-testid=\"pad-value-1year\">\n                      {padValuePredictions.oneYear.toLocaleString('vi-VN')} ₫\n                    </div>\n                    <div className=\"text-muted small\">Dự đoán 1 năm</div>\n                    <div className=\"badge bg-info mt-1\">15.000₫/PAD</div>\n                  </div>\n                </div>\n                <div className=\"col-12 col-md-6 col-lg-3 mb-3\">\n                  <div className=\"text-center p-3 rounded\" style={{ backgroundColor: '#fff3cd' }}>\n                    <div className=\"h4 fw-bold\" data-testid=\"pad-value-3years\">\n                      {padValuePredictions.threeYears.toLocaleString('vi-VN')} ₫\n                    </div>\n                    <div className=\"text-muted small\">Dự đoán 3 năm</div>\n                    <div className=\"badge bg-warning mt-1\">25.000₫/PAD</div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"row mt-2\">\n                <div className=\"col-12\">\n                  <div className=\"text-center p-4 rounded\" style={{ backgroundColor: '#fff0f0', border: '2px solid #dc3545' }}>\n                    <div className=\"display-5 fw-bold text-danger\" data-testid=\"pad-value-5years\">\n                      {padValuePredictions.fiveYears.toLocaleString('vi-VN')} ₫\n                    </div>\n                    <div className=\"text-muted\">Dự đoán 5 năm</div>\n                    <div className=\"badge bg-danger mt-2\">40.000₫/PAD</div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-12 col-xl-8 mb-4\">\n          <Card>\n            <CardHeader>\n              <h5 className=\"mb-0\">Báo cáo tài chính theo quý</h5>\n            </CardHeader>\n            <CardContent>\n              <div className=\"chart-container\" style={{ position: \"relative\", height: \"350px\" }}>\n                <canvas ref={chartRef} data-testid=\"financial-chart\"></canvas>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"col-12 col-xl-4 mb-4\">\n          <Card>\n            <CardHeader>\n              <h5 className=\"mb-0\">Phân bổ lợi nhuận 49%</h5>\n            </CardHeader>\n            <CardContent>\n              <div className=\"chart-container\" style={{ position: \"relative\", height: \"300px\" }}>\n                <canvas ref={profitChartRef} data-testid=\"profit-allocation-chart\"></canvas>\n              </div>\n              <hr />\n              <div className=\"mt-3\">\n                <div className=\"mb-3\">\n                  <div className=\"d-flex align-items-center mb-2\">\n                    <div className=\"badge\" style={{ backgroundColor: '#43B0A5', width: '12px', height: '12px', marginRight: '8px' }}></div>\n                    <strong>Vốn (30%)</strong>\n                  </div>\n                  <div className=\"text-muted small ps-4\">\n                    {businessData?.profitAllocationBreakdown.capital.roles.join(', ')}\n                  </div>\n                </div>\n                <div>\n                  <div className=\"d-flex align-items-center mb-2\">\n                    <div className=\"badge\" style={{ backgroundColor: '#ffc107', width: '12px', height: '12px', marginRight: '8px' }}></div>\n                    <strong>Công (19%)</strong>\n                  </div>\n                  <div className=\"text-muted small ps-4\">\n                    {businessData?.profitAllocationBreakdown.labor.roles.join(', ')}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <div className=\"row mb-4\">\n        <div className=\"col-12\">\n          <Card>\n            <CardHeader>\n              <h5 className=\"mb-0\">\n                <i className=\"bi bi-graph-up-arrow me-2\"></i>\n                Dự đoán ROI theo vai trò\n              </h5>\n            </CardHeader>\n            <CardContent>\n              <div className=\"table-responsive\">\n                <table className=\"table table-hover\" data-testid=\"roi-predictions-table\">\n                  <thead>\n                    <tr>\n                      <th>Vai trò</th>\n                      <th className=\"text-end\">Đầu tư (triệu)</th>\n                      <th className=\"text-end\">6 tháng</th>\n                      <th className=\"text-end\">1 năm</th>\n                      <th className=\"text-end\">3 năm</th>\n                      <th className=\"text-end\">5 năm</th>\n                      <th className=\"text-end\">ROI 5 năm</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {businessData?.roiPredictions.map((prediction, index) => (\n                      <tr key={index} data-testid={`roi-row-${index}`}>\n                        <td className=\"fw-semibold\">{prediction.role}</td>\n                        <td className=\"text-end\">{prediction.investment.toLocaleString('vi-VN')}</td>\n                        <td className=\"text-end\">{prediction.sixMonths.toLocaleString('vi-VN')}₫</td>\n                        <td className=\"text-end\">{prediction.oneYear.toLocaleString('vi-VN')}₫</td>\n                        <td className=\"text-end\">{prediction.threeYears.toLocaleString('vi-VN')}₫</td>\n                        <td className=\"text-end fw-bold\" style={{ color: '#28a745' }}>\n                          {prediction.fiveYears.toLocaleString('vi-VN')}₫\n                        </td>\n                        <td className=\"text-end\">\n                          <span className=\"badge bg-success\" data-testid={`roi-percentage-${index}`}>\n                            {prediction.fiveYearROI}%\n                          </span>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n              <div className=\"alert alert-info mt-3\" role=\"alert\">\n                <i className=\"bi bi-info-circle me-2\"></i>\n                <small>\n                  Giá trị PAD Token dự đoán: 6 tháng (12.000₫), 1 năm (15.000₫), 3 năm (25.000₫), 5 năm (40.000₫)\n                </small>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-12 col-lg-6 mb-4\">\n          <Card>\n            <CardHeader>\n              <h5 className=\"mb-0\">Trạng thái giới hạn thẻ</h5>\n            </CardHeader>\n            <CardContent>\n              {businessData?.cardMaxoutStatus.map((card, index) => (\n                <div key={index} className=\"mb-3\" data-testid={`card-maxout-${index}`}>\n                  <div className=\"d-flex justify-content-between mb-1\">\n                    <span className=\"fw-semibold\">{card.type}</span>\n                    <span className=\"text-muted\">{card.current}/{card.max}</span>\n                  </div>\n                  <div className=\"progress\" style={{ height: '8px' }}>\n                    <div\n                      className={`progress-bar ${getProgressVariant(card.percentage)}`}\n                      role=\"progressbar\"\n                      style={{ width: `${card.percentage}%` }}\n                      aria-valuenow={card.percentage}\n                      aria-valuemin={0}\n                      aria-valuemax={100}\n                    ></div>\n                  </div>\n                  <small className=\"text-muted\">{card.percentage}% sử dụng</small>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"col-12 col-lg-6 mb-4\">\n          <Card>\n            <CardHeader>\n              <h5 className=\"mb-0\">Bảng xếp hạng chi nhánh</h5>\n            </CardHeader>\n            <CardContent>\n              <div className=\"table-responsive\">\n                <table className=\"table table-sm\" data-testid=\"branches-ranking\">\n                  <thead>\n                    <tr>\n                      <th>Hạng</th>\n                      <th>Chi nhánh</th>\n                      <th>Điểm</th>\n                      <th>KPI</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {businessData?.topBranches.map((branch) => (\n                      <tr key={branch.rank} data-testid={`branch-rank-${branch.rank}`}>\n                        <td>\n                          <span className={`badge ${branch.rank === 1 ? 'bg-warning' : branch.rank === 2 ? 'bg-secondary' : 'bg-info'}`}>\n                            #{branch.rank}\n                          </span>\n                        </td>\n                        <td className=\"fw-semibold\">{branch.name}</td>\n                        <td>{branch.score}</td>\n                        <td>\n                          <span className={`badge ${branch.kpi >= 85 ? 'bg-success' : branch.kpi >= 70 ? 'bg-warning' : 'bg-danger'}`}>\n                            {branch.kpi}%\n                          </span>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":19390},"client/src/components/staff-tab.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { BsPersonPlus as PersonPlus, BsPencil as Pencil, BsEye as Eye } from \"react-icons/bs\";\nimport type { Staff, InsertStaff, Branch } from \"@shared/schema\";\n\nexport default function StaffTab() {\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingStaff, setEditingStaff] = useState<Staff | null>(null);\n  const [formData, setFormData] = useState<InsertStaff>({\n    name: \"\",\n    email: \"\",\n    position: \"\",\n    branchId: \"\",\n    equityPercentage: \"0\",\n  });\n\n  const { data: staff = [], isLoading: staffLoading } = useQuery<Staff[]>({\n    queryKey: [\"/api/staff\"],\n  });\n\n  const { data: branches = [] } = useQuery<Branch[]>({\n    queryKey: [\"/api/branches\"],\n  });\n\n  const createStaffMutation = useMutation({\n    mutationFn: async (staffData: InsertStaff) => {\n      const res = await apiRequest(\"POST\", \"/api/staff\", staffData);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff\"] });\n      resetForm();\n      setIsDialogOpen(false);\n      toast({\n        title: \"Thành công\",\n        description: \"Nhân viên đã được thêm thành công\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Lỗi\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateStaffMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertStaff> }) => {\n      const res = await apiRequest(\"PUT\", `/api/staff/${id}`, data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff\"] });\n      resetForm();\n      setIsDialogOpen(false);\n      toast({\n        title: \"Thành công\",\n        description: \"Nhân viên đã được cập nhật thành công\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Lỗi\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      email: \"\",\n      position: \"\",\n      branchId: \"\",\n      equityPercentage: \"0\",\n    });\n    setEditingStaff(null);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (editingStaff) {\n      updateStaffMutation.mutate({ id: editingStaff.id, data: formData });\n    } else {\n      createStaffMutation.mutate(formData);\n    }\n  };\n\n  const handleEdit = (staffMember: Staff) => {\n    setEditingStaff(staffMember);\n    setFormData({\n      name: staffMember.name,\n      email: staffMember.email,\n      position: staffMember.position,\n      branchId: staffMember.branchId || \"\",\n      equityPercentage: staffMember.equityPercentage || \"0\",\n    });\n    setIsDialogOpen(true);\n  };\n\n  const openAddDialog = () => {\n    resetForm();\n    setIsDialogOpen(true);\n  };\n\n  const getBranchName = (branchId: string | null) => {\n    if (!branchId) return \"Chưa phân công\";\n    const branch = branches.find(b => b.id === branchId);\n    return branch ? branch.name : \"Không xác định\";\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n  };\n\n  if (staffLoading) {\n    return <div>Đang tải...</div>;\n  }\n\n  return (\n    <div>\n      <Card>\n        <CardHeader className=\"d-flex flex-row align-items-center justify-content-between\">\n          <h5 className=\"mb-0\">Quản lý nhân viên</h5>\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button onClick={openAddDialog} data-testid=\"button-add-staff\">\n                <PersonPlus className=\"me-2\" />\n                Thêm nhân viên\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-md\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingStaff ? \"Chỉnh sửa nhân viên\" : \"Thêm nhân viên mới\"}\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} data-testid=\"staff-form\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Họ và tên</Label>\n                    <Input\n                      id=\"name\"\n                      value={formData.name}\n                      onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                      placeholder=\"Nguyễn Văn A\"\n                      required\n                      data-testid=\"input-staff-name\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                      placeholder=\"nva@phuanduong.com\"\n                      required\n                      data-testid=\"input-staff-email\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"position\">Vị trí</Label>\n                    <Input\n                      id=\"position\"\n                      value={formData.position}\n                      onChange={(e) => setFormData(prev => ({ ...prev, position: e.target.value }))}\n                      placeholder=\"Quản lý\"\n                      required\n                      data-testid=\"input-staff-position\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"branchId\">Chi nhánh</Label>\n                    <Select \n                      value={formData.branchId || \"\"} \n                      onValueChange={(value) => setFormData(prev => ({ ...prev, branchId: value }))}\n                    >\n                      <SelectTrigger data-testid=\"select-staff-branch\">\n                        <SelectValue placeholder=\"Chọn chi nhánh\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {branches.map((branch) => (\n                          <SelectItem key={branch.id} value={branch.id}>\n                            {branch.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"equityPercentage\">Equity %</Label>\n                    <Input\n                      id=\"equityPercentage\"\n                      type=\"number\"\n                      step=\"0.1\"\n                      min=\"0\"\n                      max=\"100\"\n                      value={formData.equityPercentage || \"0\"}\n                      onChange={(e) => setFormData(prev => ({ ...prev, equityPercentage: e.target.value }))}\n                      placeholder=\"2.5\"\n                      data-testid=\"input-staff-equity\"\n                    />\n                  </div>\n                  \n                  <div className=\"d-flex gap-2\">\n                    <Button \n                      type=\"submit\" \n                      className=\"flex-1\"\n                      disabled={createStaffMutation.isPending || updateStaffMutation.isPending}\n                      data-testid=\"button-submit-staff\"\n                    >\n                      {editingStaff ? \"Cập nhật\" : \"Thêm nhân viên\"}\n                    </Button>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\"\n                      onClick={() => setIsDialogOpen(false)}\n                      data-testid=\"button-cancel-staff\"\n                    >\n                      Hủy\n                    </Button>\n                  </div>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </CardHeader>\n        \n        <CardContent>\n          <div className=\"table-responsive\">\n            <table className=\"table table-hover\" data-testid=\"staff-table\">\n              <thead className=\"table-light\">\n                <tr>\n                  <th>Tên</th>\n                  <th>Email</th>\n                  <th>Vị trí</th>\n                  <th>Chi nhánh</th>\n                  <th>Equity %</th>\n                  <th>Hành động</th>\n                </tr>\n              </thead>\n              <tbody>\n                {staff.map((staffMember) => (\n                  <tr key={staffMember.id} data-testid={`staff-row-${staffMember.id}`}>\n                    <td>\n                      <div className=\"d-flex align-items-center\">\n                        <div \n                          className=\"rounded-circle d-flex align-items-center justify-content-center me-3\"\n                          style={{ \n                            width: \"40px\", \n                            height: \"40px\",\n                            backgroundColor: staffMember.id.includes('1') ? \"#43B0A5\" : \"#28a745\"\n                          }}\n                        >\n                          <span className=\"text-white fw-bold\">\n                            {getInitials(staffMember.name)}\n                          </span>\n                        </div>\n                        <div data-testid={`staff-name-${staffMember.id}`}>\n                          {staffMember.name}\n                        </div>\n                      </div>\n                    </td>\n                    <td data-testid={`staff-email-${staffMember.id}`}>{staffMember.email}</td>\n                    <td data-testid={`staff-position-${staffMember.id}`}>{staffMember.position}</td>\n                    <td data-testid={`staff-branch-${staffMember.id}`}>\n                      {getBranchName(staffMember.branchId)}\n                    </td>\n                    <td data-testid={`staff-equity-${staffMember.id}`}>\n                      {staffMember.equityPercentage}%\n                    </td>\n                    <td>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"me-1\"\n                        onClick={() => handleEdit(staffMember)}\n                        data-testid={`button-edit-staff-${staffMember.id}`}\n                      >\n                        <Pencil />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        data-testid={`button-view-staff-${staffMember.id}`}\n                      >\n                        <Eye />\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            \n            {staff.length === 0 && (\n              <div className=\"text-center py-4 text-muted\" data-testid=\"empty-staff\">\n                Chưa có nhân viên nào\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11810},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = { email: string; password: string; };\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2827},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Component />\n}\n","size_bytes":675},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [, navigate] = useLocation();\n  const [mode, setMode] = useState<\"login\" | \"register\" | \"forgot\">(\"login\");\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    name: \"\",\n  });\n\n  // Redirect if already logged in\n  if (user) {\n    navigate(\"/\");\n    return null;\n  }\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (mode === \"login\") {\n      loginMutation.mutate({\n        email: formData.email,\n        password: formData.password,\n      });\n    } else if (mode === \"register\") {\n      registerMutation.mutate({\n        email: formData.email,\n        password: formData.password,\n        name: formData.name,\n        role: \"customer\", // Default role for new registrations\n      });\n    } else if (mode === \"forgot\") {\n      // TODO: Implement forgot password functionality\n      alert(\"Chức năng quên mật khẩu đang được phát triển. Vui lòng liên hệ quản trị viên.\");\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"min-h-screen d-flex align-items-center justify-content-center bg-light\">\n      <div className=\"container\">\n        <div className=\"row justify-content-center\">\n          <div className=\"col-12 col-sm-8 col-md-6 col-lg-4\">\n            <Card className=\"border-0 shadow-lg\" style={{ borderRadius: \"20px\" }}>\n              <CardHeader className=\"text-center pt-5 pb-4\">\n                <h1 className=\"fw-bold mb-0\" style={{ \n                  color: \"#43B0A5\", \n                  fontSize: \"2rem\",\n                  fontWeight: \"600\"\n                }}>\n                  {mode === \"login\" ? \"Đăng nhập\" : mode === \"register\" ? \"Đăng ký\" : \"Quên mật khẩu\"}<br />\n                  Phúc An Đường\n                </h1>\n              </CardHeader>\n              \n              <CardContent className=\"px-5 pb-5\">\n                <form onSubmit={handleSubmit} data-testid=\"auth-form\">\n                  {mode === \"register\" && (\n                    <div className=\"mb-4\">\n                      <Label htmlFor=\"name\" className=\"form-label text-dark fw-medium mb-2\">\n                        Họ và tên\n                      </Label>\n                      <Input\n                        type=\"text\"\n                        id=\"name\"\n                        value={formData.name}\n                        onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                        placeholder=\"Nhập họ và tên\"\n                        required\n                        className=\"form-control-lg\"\n                        style={{ \n                          borderRadius: \"12px\", \n                          minHeight: \"50px\",\n                          border: \"1px solid #ddd\",\n                          fontSize: \"16px\"\n                        }}\n                        data-testid=\"input-name\"\n                      />\n                    </div>\n                  )}\n                  \n                  <div className=\"mb-4\">\n                    <Label htmlFor=\"email\" className=\"form-label text-dark fw-medium mb-2\">\n                      {mode === \"forgot\" ? \"Email khôi phục\" : \"Tên đăng nhập\"}\n                    </Label>\n                    <Input\n                      type=\"email\"\n                      id=\"email\"\n                      value={formData.email}\n                      onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                      placeholder={mode === \"forgot\" ? \"Nhập email của bạn\" : \"Nhập tên đăng nhập\"}\n                      required\n                      className=\"form-control-lg\"\n                      style={{ \n                        borderRadius: \"12px\", \n                        minHeight: \"50px\",\n                        border: \"1px solid #ddd\",\n                        fontSize: \"16px\"\n                      }}\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                  \n                  {mode !== \"forgot\" && (\n                    <div className=\"mb-4\">\n                      <Label htmlFor=\"password\" className=\"form-label text-dark fw-medium mb-2\">\n                        Mật khẩu\n                      </Label>\n                      <Input\n                        type=\"password\"\n                        id=\"password\"\n                        value={formData.password}\n                        onChange={(e) => handleInputChange(\"password\", e.target.value)}\n                        placeholder=\"Nhập mật khẩu\"\n                        required\n                        className=\"form-control-lg\"\n                        style={{ \n                          borderRadius: \"12px\", \n                          minHeight: \"50px\",\n                          border: \"1px solid #ddd\",\n                          fontSize: \"16px\"\n                        }}\n                        data-testid=\"input-password\"\n                      />\n                    </div>\n                  )}\n\n                  {mode === \"login\" && (\n                    <div className=\"d-flex justify-content-between mb-4\">\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-link p-0 text-decoration-none\"\n                        style={{ color: \"#43B0A5\", fontSize: \"14px\" }}\n                        onClick={() => setMode(\"forgot\")}\n                        data-testid=\"link-forgot-password\"\n                      >\n                        Quên mật khẩu?\n                      </button>\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-link p-0 text-decoration-none\"\n                        style={{ color: \"#43B0A5\", fontSize: \"14px\" }}\n                        onClick={() => setMode(\"register\")}\n                        data-testid=\"link-register\"\n                      >\n                        Đăng ký mới\n                      </button>\n                    </div>\n                  )}\n                  \n                  {(mode === \"register\" || mode === \"forgot\") && (\n                    <div className=\"text-center mb-4\">\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-link p-0 text-decoration-none\"\n                        style={{ color: \"#43B0A5\", fontSize: \"14px\" }}\n                        onClick={() => setMode(\"login\")}\n                        data-testid=\"link-back-to-login\"\n                      >\n                        ← Quay lại đăng nhập\n                      </button>\n                    </div>\n                  )}\n                  \n                  <Button \n                    type=\"submit\" \n                    className=\"w-100\"\n                    style={{ \n                      backgroundColor: \"#43B0A5\",\n                      border: \"none\",\n                      borderRadius: \"12px\", \n                      minHeight: \"50px\",\n                      fontSize: \"16px\",\n                      fontWeight: \"600\"\n                    }}\n                    disabled={loginMutation.isPending || registerMutation.isPending}\n                    data-testid=\"button-submit\"\n                  >\n                    {loginMutation.isPending || registerMutation.isPending ? \n                      (\n                        mode === \"login\" ? \"Đang đăng nhập...\" : \n                        mode === \"register\" ? \"Đang đăng ký...\" : \"Đang xử lý...\"\n                      ) : \n                      (\n                        mode === \"login\" ? \"Đăng nhập\" : \n                        mode === \"register\" ? \"Đăng ký\" : \"Gửi yêu cầu\"\n                      )\n                    }\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8394},"client/src/pages/home-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { BsBuilding as Building, BsSpeedometer2 as Speedometer2, BsCreditCard as CreditCard, BsPeople as People, BsCashStack as CashStack, BsGear as Gear, BsBoxArrowRight as BoxArrowRight } from \"react-icons/bs\";\nimport DashboardTab from \"@/components/dashboard-tab\";\nimport CardsTab from \"@/components/cards-tab\";\nimport BranchesTab from \"@/components/branches-tab\";\nimport StaffEquityTab from \"@/components/staff-equity-tab\";\nimport CashFlowTab from \"@/components/cash-flow-tab\";\nimport AdminTab from \"@/components/admin-tab\";\n\nexport default function HomePage() {\n  const { user, logoutMutation } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const tabs = [\n    { id: \"dashboard\", label: \"Bảng điều khiển\", icon: Speedometer2, component: DashboardTab },\n    { id: \"cards\", label: \"Thẻ & Ưu đãi\", icon: CreditCard, component: CardsTab },\n    { id: \"branches\", label: \"Chi nhánh & KPI\", icon: Building, component: BranchesTab },\n    { id: \"staff\", label: \"Nhân sự & Cổ phần\", icon: People, component: StaffEquityTab },\n    { id: \"cashflow\", label: \"Dòng tiền & Giao dịch\", icon: CashStack, component: CashFlowTab },\n    { id: \"admin\", label: \"Quản trị hệ thống\", icon: Gear, component: AdminTab, adminOnly: true },\n  ];\n\n  const getVisibleTabs = () => {\n    if (user?.role === \"admin\") {\n      return tabs; // Admins see all tabs\n    } else if (user?.role === \"customer\") {\n      // Customers see tabs 1, 2, 5 (dashboard, cards, cashflow)\n      return tabs.filter(tab => [\"dashboard\", \"cards\", \"cashflow\"].includes(tab.id));\n    } else {\n      // Other roles see all except admin\n      return tabs.filter(tab => !tab.adminOnly);\n    }\n  };\n\n  const visibleTabs = getVisibleTabs();\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Navigation Header */}\n      <nav className=\"navbar navbar-expand-lg bg-white border-bottom sticky-top\">\n        <div className=\"container-fluid\">\n          <a className=\"navbar-brand d-flex align-items-center\" href=\"#\" data-testid=\"navbar-brand\">\n            <Building className=\"me-2 text-primary\" />\n            <span style={{ color: \"var(--primary-color)\" }} className=\"fw-bold\">Phúc An Đường</span>\n          </a>\n          <div className=\"d-flex align-items-center\">\n            <span className=\"me-3\" data-testid=\"user-name\">{user?.name}</span>\n            <button \n              className=\"btn btn-outline-primary btn-sm\" \n              onClick={handleLogout}\n              data-testid=\"button-logout\"\n            >\n              <BoxArrowRight />\n            </button>\n          </div>\n        </div>\n      </nav>\n\n      {/* Tab Navigation */}\n      <div className=\"container-fluid mt-3\">\n        <ul className=\"nav nav-tabs\" role=\"tablist\" data-testid=\"main-tabs\">\n          {visibleTabs.map((tab) => {\n            const IconComponent = tab.icon;\n            return (\n              <li className=\"nav-item\" role=\"presentation\" key={tab.id}>\n                <button\n                  className={`nav-link ${activeTab === tab.id ? \"active\" : \"\"} d-flex flex-column flex-md-row align-items-center`}\n                  type=\"button\"\n                  role=\"tab\"\n                  onClick={() => setActiveTab(tab.id)}\n                  data-testid={`tab-${tab.id}`}\n                  style={{ minWidth: 'auto', fontSize: '0.75rem' }}\n                >\n                  <IconComponent className=\"mb-1 mb-md-0 me-md-2\" style={{ fontSize: '1.25rem' }} />\n                  <span className=\"d-block\" style={{ fontSize: '0.7rem', lineHeight: '1' }}>{tab.label}</span>\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n\n        {/* Tab Content */}\n        <div className=\"tab-content\" id=\"mainTabContent\">\n          {visibleTabs.map((tab) => {\n            const TabComponent = tab.component;\n            return (\n              <div\n                key={tab.id}\n                className={`tab-pane fade ${activeTab === tab.id ? \"show active\" : \"\"}`}\n                role=\"tabpanel\"\n                data-testid={`tabpanel-${tab.id}`}\n              >\n                {activeTab === tab.id && <TabComponent />}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4400},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/staff-equity-tab.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { Staff, StaffKpi, Referral } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertCircle, Users, Award, TrendingUp, DollarSign, Share2, Calculator, Gift, Download } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Helper functions\nconst formatCurrency = (amount: number) => {\n  return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(amount);\n};\n\nconst formatDate = (dateString: string) => {\n  return new Date(dateString).toLocaleDateString('vi-VN');\n};\n\n// KPI Performance Component\nconst KpiPerformance = () => {\n  const [selectedStaff, setSelectedStaff] = useState(\"\");\n  const [selectedPeriod] = useState(\"quarter\"); // Fixed to quarterly only\n  const [selectedPeriodValue, setSelectedPeriodValue] = useState(\"2024-Q4\");\n  const [periodValueError, setPeriodValueError] = useState(\"\");\n  \n  const { data: staff = [] } = useQuery<Staff[]>({ queryKey: ['/api/staff'] });\n  const { data: staffKpis = [] } = useQuery<StaffKpi[]>({ queryKey: ['/api/staff-kpis'] });\n  \n  const calculateKpiMutation = useMutation({\n    mutationFn: async ({ staffId, period, periodValue }: { staffId: string; period: string; periodValue: string }) => {\n      const response = await apiRequest('GET', `/api/staff-kpis/calculate/${staffId}/${period}/${periodValue}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/staff-kpis'] });\n    }\n  });\n\n  const processQuarterlySharesMutation = useMutation({\n    mutationFn: async ({ period, periodValue }: { period: string; periodValue: string }) => {\n      const response = await apiRequest('POST', '/api/staff-kpis/process-quarterly-shares', { period, periodValue });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/staff-kpis'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/staff'] });\n    }\n  });\n\n  const handleCalculateKpi = () => {\n    if (!selectedStaff) return;\n    calculateKpiMutation.mutate({ \n      staffId: selectedStaff, \n      period: selectedPeriod, \n      periodValue: selectedPeriodValue \n    });\n  };\n\n  const handleProcessQuarterlyShares = () => {\n    processQuarterlySharesMutation.mutate({ \n      period: selectedPeriod, \n      periodValue: selectedPeriodValue \n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* KPI Calculation Panel */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calculator className=\"h-5 w-5\" />\n            Tính toán KPI nhân viên\n          </CardTitle>\n          <CardDescription>\n            Tính toán điểm KPI và cổ phần theo quý\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"staff-select\">Chọn nhân viên</Label>\n              <Select value={selectedStaff} onValueChange={setSelectedStaff}>\n                <SelectTrigger data-testid=\"select-staff-kpi\">\n                  <SelectValue placeholder=\"Chọn nhân viên\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {staff.map((s: Staff) => (\n                    <SelectItem key={s.id} value={s.id}>\n                      {s.name} - {s.position}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"period-select\">Kỳ đánh giá</Label>\n              <div className=\"relative\">\n                <Input\n                  value=\"Quý\"\n                  disabled\n                  className=\"bg-gray-50 cursor-not-allowed\"\n                  data-testid=\"input-period-fixed\"\n                />\n                <div className=\"absolute inset-y-0 right-0 flex items-center pr-3\">\n                  <span className=\"text-xs text-gray-500\">Chỉ hỗ trợ quý</span>\n                </div>\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"period-value\">Giá trị kỳ</Label>\n              <Input\n                value={selectedPeriodValue}\n                onChange={(e) => {\n                  const value = e.target.value;\n                  setSelectedPeriodValue(value);\n                  // Validate quarterly format\n                  const quarterPattern = /^\\d{4}-Q[1-4]$/;\n                  if (value && !quarterPattern.test(value)) {\n                    setPeriodValueError(\"Định dạng phải là YYYY-Q[1-4] (ví dụ: 2024-Q4)\");\n                  } else {\n                    setPeriodValueError(\"\");\n                  }\n                }}\n                placeholder=\"VD: 2024-Q4\"\n                className={periodValueError ? \"border-red-500\" : \"\"}\n                data-testid=\"input-period-value\"\n              />\n              {periodValueError && (\n                <p className=\"text-red-500 text-xs mt-1\" data-testid=\"text-period-error\">\n                  {periodValueError}\n                </p>\n              )}\n              {!periodValueError && !selectedPeriodValue && (\n                <p className=\"text-gray-500 text-xs mt-1\">\n                  Định dạng: YYYY-Q[1-4] (2024-Q1, 2024-Q2, 2024-Q3, 2024-Q4)\n                </p>\n              )}\n            </div>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button \n              onClick={handleCalculateKpi}\n              disabled={!selectedStaff || calculateKpiMutation.isPending || !!periodValueError || !selectedPeriodValue}\n              data-testid=\"button-calculate-kpi\"\n            >\n              <Calculator className=\"h-4 w-4 mr-2\" />\n              Tính KPI\n            </Button>\n            <Button \n              onClick={handleProcessQuarterlyShares}\n              disabled={processQuarterlySharesMutation.isPending || !!periodValueError || !selectedPeriodValue}\n              variant=\"outline\"\n              data-testid=\"button-process-shares\"\n            >\n              <Share2 className=\"h-4 w-4 mr-2\" />\n              Xử lý cổ phần quý\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* KPI Results Display */}\n      {calculateKpiMutation.data && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Kết quả tính KPI</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-total-points\">\n                  {calculateKpiMutation.data.totalPoints}\n                </div>\n                <div className=\"text-sm text-gray-600\">Tổng điểm</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-slots-earned\">\n                  {calculateKpiMutation.data.slotsEarned}\n                </div>\n                <div className=\"text-sm text-gray-600\">Slot kiếm được</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\" data-testid=\"text-shares-earned\">\n                  {calculateKpiMutation.data.sharesEarned}\n                </div>\n                <div className=\"text-sm text-gray-600\">Cổ phần</div>\n              </div>\n              <div className=\"text-center\">\n                <Badge \n                  variant={calculateKpiMutation.data.isEligible ? \"default\" : \"secondary\"}\n                  data-testid=\"badge-eligibility\"\n                >\n                  {calculateKpiMutation.data.isEligible ? \"Đủ điều kiện\" : \"Chưa đủ điều kiện\"}\n                </Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Staff KPI Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-5 w-5\" />\n            Bảng KPI nhân viên\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table className=\"min-w-[600px]\">\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"whitespace-nowrap\">Nhân viên</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Kỳ</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Điểm số</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Chỉ tiêu</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Thưởng</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Trạng thái</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {staffKpis.map((kpi: StaffKpi) => (\n                  <TableRow key={kpi.id}>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`text-staff-name-${kpi.id}`}>\n                      {staff.find((s: Staff) => s.id === kpi.staffId)?.name || 'N/A'}\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`text-period-${kpi.id}`}>\n                      {kpi.period} {kpi.periodValue}\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`text-score-${kpi.id}`}>\n                      {kpi.score || 0}\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`text-target-${kpi.id}`}>\n                      {formatCurrency(parseFloat(kpi.targetRevenue || \"0\"))}\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`text-bonus-${kpi.id}`}>\n                      {formatCurrency(parseFloat(kpi.bonusAmount || \"0\"))}\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`badge-status-${kpi.id}`}>\n                      <Badge variant={parseFloat(kpi.score || \"0\") >= 50 ? \"default\" : \"secondary\"}>\n                        {parseFloat(kpi.score || \"0\") >= 50 ? \"Đạt\" : \"Chưa đạt\"}\n                      </Badge>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\n// Referral Management Component\nconst ReferralManagement = () => {\n  const [selectedStaff, setSelectedStaff] = useState(\"\");\n  const [isGenerateCodeOpen, setIsGenerateCodeOpen] = useState(false);\n  \n  const { data: staff = [] } = useQuery<Staff[]>({ queryKey: ['/api/staff'] });\n  const { data: referrals = [] } = useQuery<Referral[]>({ queryKey: ['/api/referrals'] });\n  \n  const generateCodeMutation = useMutation({\n    mutationFn: async (staffId: string) => {\n      const response = await apiRequest('POST', '/api/referrals/generate-code', { staffId });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/referrals'] });\n      setIsGenerateCodeOpen(false);\n    }\n  });\n\n  const handleGenerateCode = () => {\n    if (!selectedStaff) return;\n    generateCodeMutation.mutate(selectedStaff);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Generate Referral Code */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Gift className=\"h-5 w-5\" />\n            Tạo mã giới thiệu\n          </CardTitle>\n          <CardDescription>\n            Tạo mã giới thiệu cho nhân viên - hoa hồng 8% từ giao dịch đầu tiên\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Dialog open={isGenerateCodeOpen} onOpenChange={setIsGenerateCodeOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-open-generate-code\">\n                <Gift className=\"h-4 w-4 mr-2\" />\n                Tạo mã giới thiệu\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Tạo mã giới thiệu mới</DialogTitle>\n                <DialogDescription>\n                  Chọn nhân viên để tạo mã giới thiệu\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"staff-referral-select\">Chọn nhân viên</Label>\n                  <Select value={selectedStaff} onValueChange={setSelectedStaff}>\n                    <SelectTrigger data-testid=\"select-staff-referral\">\n                      <SelectValue placeholder=\"Chọn nhân viên\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {staff.map((s: Staff) => (\n                        <SelectItem key={s.id} value={s.id}>\n                          {s.name} - {s.position}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <Button \n                  onClick={handleGenerateCode}\n                  disabled={!selectedStaff || generateCodeMutation.isPending}\n                  className=\"w-full\"\n                  data-testid=\"button-generate-code\"\n                >\n                  Tạo mã\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n          \n          {generateCodeMutation.data && (\n            <div className=\"mt-4 p-4 bg-green-50 rounded-lg\">\n              <h4 className=\"font-semibold text-green-800\">Mã giới thiệu đã được tạo!</h4>\n              <p className=\"text-green-700\">\n                Mã: <code className=\"bg-white px-2 py-1 rounded\" data-testid=\"text-generated-code\">\n                  {generateCodeMutation.data.referralCode}\n                </code>\n              </p>\n              <p className=\"text-green-700\">\n                URL: <code className=\"bg-white px-2 py-1 rounded text-xs\" data-testid=\"text-generated-url\">\n                  {generateCodeMutation.data.referralUrl}\n                </code>\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Referral Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-2\">\n              <Users className=\"h-5 w-5 text-blue-500\" />\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Tổng giới thiệu</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-total-referrals\">\n                  {referrals.length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-2\">\n              <DollarSign className=\"h-5 w-5 text-green-500\" />\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Hoa hồng kiếm được</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-total-commission\">\n                  {formatCurrency(\n                    referrals.reduce((sum: number, r: Referral) => sum + parseFloat(r.commissionAmount || \"0\"), 0)\n                  )}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-2\">\n              <Share2 className=\"h-5 w-5 text-purple-500\" />\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Hoa hồng đã trả</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-paid-commission\">\n                  {formatCurrency(\n                    referrals.reduce((sum: number, r: Referral) => sum + parseFloat(r.commissionPaid || \"0\"), 0)\n                  )}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Referral Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5\" />\n            Danh sách giới thiệu\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table className=\"min-w-[800px]\">\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"whitespace-nowrap\">Mã giới thiệu</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Người giới thiệu</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Khách hàng</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Giá trị đóng góp</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Hoa hồng</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Đã trả</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Trạng thái</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {referrals.map((referral: Referral) => (\n                  <TableRow key={referral.id}>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`text-code-${referral.id}`}>\n                      <code className=\"bg-gray-100 px-2 py-1 rounded text-xs\">\n                        {referral.referralCode}\n                      </code>\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`text-referrer-${referral.id}`}>\n                      {staff.find((s: Staff) => s.id === referral.referrerId)?.name || 'N/A'}\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`text-customer-${referral.id}`}>\n                      {referral.customerName || 'N/A'}\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`text-contribution-${referral.id}`}>\n                      {formatCurrency(parseFloat(referral.contributionValue || \"0\"))}\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`text-commission-amount-${referral.id}`}>\n                      {formatCurrency(parseFloat(referral.commissionAmount || \"0\"))}\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`text-commission-paid-${referral.id}`}>\n                      {formatCurrency(parseFloat(referral.commissionPaid || \"0\"))}\n                    </TableCell>\n                    <TableCell className=\"whitespace-nowrap\" data-testid={`badge-referral-status-${referral.id}`}>\n                      <Badge variant={referral.status === \"completed\" ? \"default\" : \"secondary\"}>\n                        {referral.status === \"completed\" ? \"Hoàn thành\" : \"Đang xử lý\"}\n                      </Badge>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\n// Share Management Component\nconst ShareManagement = () => {\n  const { data: staff = [] } = useQuery<Staff[]>({ queryKey: ['/api/staff'] });\n  \n  const totalShares = staff.reduce((sum: number, s: Staff) => sum + (s.shares || 0), 0);\n  const totalEquityValue = totalShares * 1000000; // 1M VND per share\n  \n  return (\n    <div className=\"space-y-6\">\n      {/* Equity Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-2\">\n              <Share2 className=\"h-5 w-5 text-blue-500\" />\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Tổng cổ phần</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-total-shares\">\n                  {totalShares.toLocaleString()} cổ phần\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-2\">\n              <DollarSign className=\"h-5 w-5 text-green-500\" />\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Giá trị vốn chủ sở hữu</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-equity-value\">\n                  {formatCurrency(totalEquityValue)}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-2\">\n              <Users className=\"h-5 w-5 text-purple-500\" />\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Chủ sở hữu</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-shareholders\">\n                  {staff.filter((s: Staff) => (s.shares || 0) > 0).length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Share Distribution Alert */}\n      <Alert>\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertDescription>\n          <strong>Quy tắc cổ phần:</strong> ≥50 điểm/quý = 1 slot (50 cổ phần). \n          Giá trị: 1M VND/cổ phần. Chia lợi nhuận tự động từ 49% lợi nhuận cuối quý.\n        </AlertDescription>\n      </Alert>\n\n      {/* Staff Equity Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Award className=\"h-5 w-5\" />\n            Phân bổ cổ phần nhân viên\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table className=\"min-w-[700px]\">\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"whitespace-nowrap\">Nhân viên</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Vị trí</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Cổ phần</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Tỷ lệ (%)</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Giá trị vốn</TableHead>\n                  <TableHead className=\"whitespace-nowrap\">Ngày cập nhật</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n              {staff\n                .filter((s: Staff) => (s.shares || 0) > 0)\n                .sort((a: Staff, b: Staff) => (b.shares || 0) - (a.shares || 0))\n                .map((member: Staff) => {\n                  const shares = member.shares || 0;\n                  const percentage = totalShares > 0 ? (shares / totalShares * 100) : 0;\n                  const equityValue = shares * 1000000;\n                  \n                  return (\n                    <TableRow key={member.id}>\n                      <TableCell className=\"whitespace-nowrap\" data-testid={`text-member-name-${member.id}`}>\n                        {member.name}\n                      </TableCell>\n                      <TableCell className=\"whitespace-nowrap\" data-testid={`text-member-position-${member.id}`}>\n                        {member.position}\n                      </TableCell>\n                      <TableCell className=\"whitespace-nowrap\" data-testid={`text-member-shares-${member.id}`}>\n                        {shares.toLocaleString()}\n                      </TableCell>\n                      <TableCell className=\"whitespace-nowrap\" data-testid={`text-member-percentage-${member.id}`}>\n                        {percentage.toFixed(2)}%\n                      </TableCell>\n                      <TableCell className=\"whitespace-nowrap\" data-testid={`text-member-equity-${member.id}`}>\n                        {formatCurrency(equityValue)}\n                      </TableCell>\n                      <TableCell className=\"whitespace-nowrap\" data-testid={`text-member-updated-${member.id}`}>\n                        {member.updatedAt ? formatDate(typeof member.updatedAt === 'string' ? member.updatedAt : member.updatedAt.toISOString()) : 'N/A'}\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\n// Main Staff & Equity Tab Component\nexport default function StaffEquityTab() {\n  const { toast } = useToast();\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n          Nhân viên & Cổ phần\n        </h2>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Quản lý KPI nhân viên, giới thiệu và hệ thống cổ phần\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"kpi\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"kpi\" data-testid=\"tab-kpi\">\n            <TrendingUp className=\"h-4 w-4 mr-2\" />\n            KPI & Hiệu suất\n          </TabsTrigger>\n          <TabsTrigger value=\"referrals\" data-testid=\"tab-referrals\">\n            <Gift className=\"h-4 w-4 mr-2\" />\n            Giới thiệu\n          </TabsTrigger>\n          <TabsTrigger value=\"shares\" data-testid=\"tab-shares\">\n            <Share2 className=\"h-4 w-4 mr-2\" />\n            Cổ phần\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"kpi\">\n          <KpiPerformance />\n        </TabsContent>\n\n        <TabsContent value=\"referrals\">\n          <ReferralManagement />\n        </TabsContent>\n\n        <TabsContent value=\"shares\">\n          <ShareManagement />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":27239},"client/src/components/cash-flow-tab.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  ArrowUpCircle, \n  ArrowDownCircle, \n  PieChart, \n  FileText, \n  Upload, \n  Check, \n  X, \n  Clock,\n  DollarSign,\n  TrendingUp,\n  Download\n} from \"lucide-react\";\nimport jsPDF from \"jspdf\";\n\n// Types\ninterface InvestmentPackage {\n  id: string;\n  name: string;\n  minAmount: string;\n  maxAmount?: string;\n  description?: string;\n  expectedReturn: string;\n  duration: number;\n  isActive: boolean;\n}\n\ninterface Transaction {\n  id: string;\n  type: string;\n  amount: string;\n  description: string;\n  status: string;\n  taxAmount?: string;\n  packageId?: string;\n  documentPath?: string;\n  date: string;\n  approvedAt?: string;\n  approvedBy?: string;\n}\n\n// Utility functions\nconst formatCurrency = (amount: string | number) => {\n  const numAmount = typeof amount === \"string\" ? parseFloat(amount) : amount;\n  return numAmount.toLocaleString(\"vi-VN\") + \" VND\";\n};\n\nconst formatDate = (dateString: string) => {\n  return new Date(dateString).toLocaleDateString(\"vi-VN\");\n};\n\nconst getStatusBadgeVariant = (status: string) => {\n  switch (status) {\n    case \"completed\": case \"approved\": return \"default\";\n    case \"pending\": return \"secondary\";\n    case \"rejected\": return \"destructive\";\n    default: return \"secondary\";\n  }\n};\n\n// Deposit/Investment Component\nconst DepositInvestment = () => {\n  const [depositForm, setDepositForm] = useState({\n    type: \"deposit\",\n    amount: \"\",\n    description: \"\",\n    packageId: \"\",\n  });\n  const [documentFile, setDocumentFile] = useState<File | null>(null);\n  const { toast } = useToast();\n\n  const { data: investmentPackages = [] } = useQuery<InvestmentPackage[]>({ \n    queryKey: ['/api/investment-packages/active'] \n  });\n\n  const depositMutation = useMutation({\n    mutationFn: async (formData: any) => {\n      const response = await apiRequest('POST', '/api/cash-flow/deposit', formData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ description: \"Đã gửi yêu cầu nạp tiền thành công!\" });\n      setDepositForm({ type: \"deposit\", amount: \"\", description: \"\", packageId: \"\" });\n      setDocumentFile(null);\n      queryClient.invalidateQueries({ queryKey: ['/api/cash-flow/transactions'] });\n    },\n    onError: (error: any) => {\n      toast({ variant: \"destructive\", description: \"Lỗi: \" + (error.message || \"Không thể gửi yêu cầu\") });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!depositForm.amount || !depositForm.description || !depositForm.packageId) {\n      toast({ variant: \"destructive\", description: \"Vui lòng điền đầy đủ thông tin\" });\n      return;\n    }\n\n    const amount = parseFloat(depositForm.amount);\n    const selectedPackage = investmentPackages.find(p => p.id === depositForm.packageId);\n    \n    if (selectedPackage && amount < parseFloat(selectedPackage.minAmount)) {\n      toast({ \n        variant: \"destructive\", \n        description: `Số tiền tối thiểu cho gói này là ${formatCurrency(selectedPackage.minAmount)}` \n      });\n      return;\n    }\n\n    depositMutation.mutate({\n      ...depositForm,\n      amount: amount\n    });\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <ArrowUpCircle className=\"h-5 w-5 text-green-500\" />\n          Nạp tiền / Đầu tư\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Transaction Type */}\n          <div>\n            <Label htmlFor=\"type\">Loại giao dịch</Label>\n            <Select \n              value={depositForm.type} \n              onValueChange={(value) => setDepositForm(prev => ({ ...prev, type: value }))}\n            >\n              <SelectTrigger data-testid=\"select-transaction-type\">\n                <SelectValue placeholder=\"Chọn loại giao dịch\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"deposit\">Nạp tiền</SelectItem>\n                <SelectItem value=\"invest\">Đầu tư</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Investment Package */}\n          <div>\n            <Label htmlFor=\"packageId\">Chọn gói đầu tư</Label>\n            <Select \n              value={depositForm.packageId} \n              onValueChange={(value) => setDepositForm(prev => ({ ...prev, packageId: value }))}\n            >\n              <SelectTrigger data-testid=\"select-investment-package\">\n                <SelectValue placeholder=\"Chọn gói đầu tư\" />\n              </SelectTrigger>\n              <SelectContent>\n                {investmentPackages.map((pkg) => (\n                  <SelectItem key={pkg.id} value={pkg.id}>\n                    {pkg.name} - Tối thiểu: {formatCurrency(pkg.minAmount)} \n                    ({pkg.expectedReturn}% lãi suất/năm)\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Amount */}\n          <div>\n            <Label htmlFor=\"amount\">Số tiền (VND)</Label>\n            <Input\n              type=\"number\"\n              value={depositForm.amount}\n              onChange={(e) => setDepositForm(prev => ({ ...prev, amount: e.target.value }))}\n              placeholder=\"Nhập số tiền\"\n              min=\"0\"\n              data-testid=\"input-deposit-amount\"\n            />\n          </div>\n\n          {/* Description */}\n          <div>\n            <Label htmlFor=\"description\">Mô tả</Label>\n            <Textarea\n              value={depositForm.description}\n              onChange={(e) => setDepositForm(prev => ({ ...prev, description: e.target.value }))}\n              placeholder=\"Mô tả giao dịch...\"\n              rows={3}\n              data-testid=\"textarea-deposit-description\"\n            />\n          </div>\n\n          {/* Document Upload */}\n          <div>\n            <Label htmlFor=\"document\">Tài liệu đính kèm</Label>\n            <div className=\"flex items-center gap-4\">\n              <Input\n                type=\"file\"\n                accept=\".pdf,.jpg,.jpeg,.png,.doc,.docx\"\n                onChange={(e) => setDocumentFile(e.target.files?.[0] || null)}\n                data-testid=\"input-document-upload\"\n              />\n              <Upload className=\"h-4 w-4 text-gray-400\" />\n            </div>\n            <p className=\"text-sm text-gray-500 mt-1\">\n              Hỗ trợ: PDF, JPG, PNG, DOC, DOCX (tối đa 10MB)\n            </p>\n          </div>\n\n          <Button \n            type=\"submit\" \n            disabled={depositMutation.isPending}\n            className=\"w-full\"\n            data-testid=\"button-submit-deposit\"\n          >\n            {depositMutation.isPending ? \"Đang xử lý...\" : \"Gửi yêu cầu\"}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Withdrawal Component\nconst Withdrawal = () => {\n  const [withdrawalForm, setWithdrawalForm] = useState({\n    amount: \"\",\n    description: \"\",\n  });\n  const { toast } = useToast();\n\n  const withdrawalMutation = useMutation({\n    mutationFn: async (formData: any) => {\n      const response = await apiRequest('POST', '/api/cash-flow/withdraw', formData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ description: \"Đã gửi yêu cầu rút tiền thành công!\" });\n      setWithdrawalForm({ amount: \"\", description: \"\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/cash-flow/transactions'] });\n    },\n    onError: (error: any) => {\n      toast({ variant: \"destructive\", description: \"Lỗi: \" + (error.message || \"Không thể gửi yêu cầu\") });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!withdrawalForm.amount || !withdrawalForm.description) {\n      toast({ variant: \"destructive\", description: \"Vui lòng điền đầy đủ thông tin\" });\n      return;\n    }\n\n    const amount = parseFloat(withdrawalForm.amount);\n    if (amount < 5000000) {\n      toast({ variant: \"destructive\", description: \"Số tiền rút tối thiểu là 5,000,000 VND\" });\n      return;\n    }\n\n    withdrawalMutation.mutate({\n      amount: amount,\n      description: withdrawalForm.description\n    });\n  };\n\n  const calculateTax = (amount: string) => {\n    const numAmount = parseFloat(amount);\n    if (numAmount > 10000000) {\n      return numAmount * 0.1; // 10% tax\n    }\n    return 0;\n  };\n\n  const amount = parseFloat(withdrawalForm.amount || \"0\");\n  const taxAmount = calculateTax(withdrawalForm.amount);\n  const netAmount = amount - taxAmount;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <ArrowDownCircle className=\"h-5 w-5 text-blue-500\" />\n          Rút tiền\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Alert className=\"mb-6\">\n          <AlertDescription>\n            <strong>Quy định rút tiền:</strong> Số tiền tối thiểu 5,000,000 VND. \n            Thuế 10% áp dụng cho giao dịch trên 10,000,000 VND.\n          </AlertDescription>\n        </Alert>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Amount */}\n          <div>\n            <Label htmlFor=\"amount\">Số tiền rút (VND)</Label>\n            <Input\n              type=\"number\"\n              value={withdrawalForm.amount}\n              onChange={(e) => setWithdrawalForm(prev => ({ ...prev, amount: e.target.value }))}\n              placeholder=\"Nhập số tiền (tối thiểu 5,000,000 VND)\"\n              min=\"5000000\"\n              data-testid=\"input-withdrawal-amount\"\n            />\n          </div>\n\n          {/* Tax Calculation Display */}\n          {amount > 0 && (\n            <div className=\"bg-gray-50 p-4 rounded-lg space-y-2\">\n              <div className=\"flex justify-between\">\n                <span>Số tiền rút:</span>\n                <span className=\"font-medium\">{formatCurrency(amount)}</span>\n              </div>\n              {taxAmount > 0 && (\n                <div className=\"flex justify-between\">\n                  <span>Thuế (10%):</span>\n                  <span className=\"text-red-600 font-medium\">-{formatCurrency(taxAmount)}</span>\n                </div>\n              )}\n              <hr />\n              <div className=\"flex justify-between font-bold\">\n                <span>Số tiền thực nhận:</span>\n                <span className=\"text-green-600\">{formatCurrency(netAmount)}</span>\n              </div>\n            </div>\n          )}\n\n          {/* Description */}\n          <div>\n            <Label htmlFor=\"description\">Lý do rút tiền</Label>\n            <Textarea\n              value={withdrawalForm.description}\n              onChange={(e) => setWithdrawalForm(prev => ({ ...prev, description: e.target.value }))}\n              placeholder=\"Nhập lý do rút tiền...\"\n              rows={3}\n              data-testid=\"textarea-withdrawal-description\"\n            />\n          </div>\n\n          <Button \n            type=\"submit\" \n            disabled={withdrawalMutation.isPending || amount < 5000000}\n            className=\"w-full\"\n            data-testid=\"button-submit-withdrawal\"\n          >\n            {withdrawalMutation.isPending ? \"Đang xử lý...\" : \"Gửi yêu cầu rút tiền\"}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Transaction History Component\nconst TransactionHistory = () => {\n  const { data: transactions = [] } = useQuery<Transaction[]>({ \n    queryKey: ['/api/cash-flow/transactions'] \n  });\n\n  const generatePDFReport = () => {\n    const doc = new jsPDF();\n    \n    // Header\n    doc.setFontSize(20);\n    doc.text('Phúc An Đường - Báo cáo Giao dịch', 20, 20);\n    \n    // Date\n    doc.setFontSize(12);\n    doc.text(`Ngày tạo: ${formatDate(new Date().toISOString())}`, 20, 35);\n    \n    // Table header\n    let yPos = 50;\n    doc.setFontSize(10);\n    doc.text('Ngày', 20, yPos);\n    doc.text('Loại', 50, yPos);\n    doc.text('Số tiền', 80, yPos);\n    doc.text('Trạng thái', 120, yPos);\n    doc.text('Mô tả', 150, yPos);\n    \n    // Table data\n    yPos += 10;\n    transactions.slice(0, 20).forEach((transaction) => { // Limit to 20 transactions\n      if (yPos > 250) { // New page if needed\n        doc.addPage();\n        yPos = 20;\n      }\n      \n      doc.text(formatDate(transaction.date), 20, yPos);\n      doc.text(transaction.type, 50, yPos);\n      doc.text(formatCurrency(transaction.amount), 80, yPos);\n      doc.text(transaction.status, 120, yPos);\n      doc.text(transaction.description.substring(0, 20) + '...', 150, yPos);\n      \n      yPos += 10;\n    });\n    \n    // Save\n    doc.save(`phuc-an-duong-transactions-${new Date().toISOString().split('T')[0]}.pdf`);\n  };\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <CardTitle className=\"flex items-center gap-2\">\n          <FileText className=\"h-5 w-5 text-purple-500\" />\n          Lịch sử giao dịch\n        </CardTitle>\n        <Button \n          onClick={generatePDFReport}\n          variant=\"outline\" \n          size=\"sm\"\n          data-testid=\"button-download-pdf\"\n        >\n          <Download className=\"h-4 w-4 mr-2\" />\n          Tải PDF\n        </Button>\n      </CardHeader>\n      <CardContent>\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"whitespace-nowrap\">Ngày</TableHead>\n                <TableHead className=\"whitespace-nowrap\">Loại</TableHead>\n                <TableHead className=\"whitespace-nowrap\">Số tiền</TableHead>\n                <TableHead className=\"whitespace-nowrap\">Thuế</TableHead>\n                <TableHead className=\"whitespace-nowrap\">Trạng thái</TableHead>\n                <TableHead className=\"whitespace-nowrap\">Mô tả</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {transactions.map((transaction) => (\n                <TableRow key={transaction.id}>\n                  <TableCell className=\"whitespace-nowrap\" data-testid={`text-transaction-date-${transaction.id}`}>\n                    {formatDate(transaction.date)}\n                  </TableCell>\n                  <TableCell className=\"whitespace-nowrap\" data-testid={`text-transaction-type-${transaction.id}`}>\n                    <Badge variant=\"outline\">\n                      {transaction.type === \"deposit\" ? \"Nạp tiền\" : \n                       transaction.type === \"invest\" ? \"Đầu tư\" :\n                       transaction.type === \"withdraw\" ? \"Rút tiền\" : \n                       transaction.type}\n                    </Badge>\n                  </TableCell>\n                  <TableCell className=\"whitespace-nowrap\" data-testid={`text-transaction-amount-${transaction.id}`}>\n                    {formatCurrency(transaction.amount)}\n                  </TableCell>\n                  <TableCell className=\"whitespace-nowrap\" data-testid={`text-transaction-tax-${transaction.id}`}>\n                    {transaction.taxAmount ? formatCurrency(transaction.taxAmount) : \"-\"}\n                  </TableCell>\n                  <TableCell className=\"whitespace-nowrap\" data-testid={`badge-transaction-status-${transaction.id}`}>\n                    <Badge variant={getStatusBadgeVariant(transaction.status)}>\n                      {transaction.status === \"pending\" ? \"Chờ duyệt\" :\n                       transaction.status === \"approved\" ? \"Đã duyệt\" :\n                       transaction.status === \"completed\" ? \"Hoàn thành\" :\n                       transaction.status === \"rejected\" ? \"Từ chối\" :\n                       transaction.status}\n                    </Badge>\n                  </TableCell>\n                  <TableCell className=\"max-w-xs truncate\" data-testid={`text-transaction-description-${transaction.id}`}>\n                    {transaction.description}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n\n        {transactions.length === 0 && (\n          <div className=\"text-center py-8 text-gray-500\">\n            Chưa có giao dịch nào\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\n// Dashboard Component\nconst CashFlowDashboard = () => {\n  const { data: transactions = [] } = useQuery<Transaction[]>({ \n    queryKey: ['/api/cash-flow/transactions'] \n  });\n\n  // Calculate statistics\n  const totalDeposits = transactions\n    .filter(t => t.type === \"deposit\" && t.status === \"completed\")\n    .reduce((sum, t) => sum + parseFloat(t.amount), 0);\n\n  const totalWithdrawals = transactions\n    .filter(t => t.type === \"withdraw\" && t.status === \"completed\")\n    .reduce((sum, t) => sum + parseFloat(t.amount), 0);\n\n  const pendingTransactions = transactions.filter(t => t.status === \"pending\").length;\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-5 w-5 text-green-500\" />\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Tổng nạp tiền</p>\n              <p className=\"text-2xl font-bold text-green-600\" data-testid=\"text-total-deposits\">\n                {formatCurrency(totalDeposits)}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center gap-2\">\n            <ArrowDownCircle className=\"h-5 w-5 text-blue-500\" />\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Tổng rút tiền</p>\n              <p className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-total-withdrawals\">\n                {formatCurrency(totalWithdrawals)}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center gap-2\">\n            <Clock className=\"h-5 w-5 text-orange-500\" />\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Giao dịch chờ duyệt</p>\n              <p className=\"text-2xl font-bold text-orange-600\" data-testid=\"text-pending-transactions\">\n                {pendingTransactions}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\n// Main Cash Flow Tab Component\nexport default function CashFlowTab() {\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n          Dòng tiền & Giao dịch\n        </h2>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Quản lý nạp tiền, đầu tư, rút tiền và theo dõi giao dịch\n        </p>\n      </div>\n\n      <CashFlowDashboard />\n\n      <Tabs defaultValue=\"deposit\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"deposit\" data-testid=\"tab-deposit\">\n            <ArrowUpCircle className=\"h-4 w-4 mr-2\" />\n            Nạp tiền/Đầu tư\n          </TabsTrigger>\n          <TabsTrigger value=\"withdraw\" data-testid=\"tab-withdraw\">\n            <ArrowDownCircle className=\"h-4 w-4 mr-2\" />\n            Rút tiền\n          </TabsTrigger>\n          <TabsTrigger value=\"history\" data-testid=\"tab-history\">\n            <FileText className=\"h-4 w-4 mr-2\" />\n            Lịch sử\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"deposit\">\n          <DepositInvestment />\n        </TabsContent>\n\n        <TabsContent value=\"withdraw\">\n          <Withdrawal />\n        </TabsContent>\n\n        <TabsContent value=\"history\">\n          <TransactionHistory />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":20920},"deploy-postgres-storage.sh":{"content":"#!/bin/bash\n# Script deploy PostgresStorage lên VPS\n# Copy toàn bộ script này và paste vào VPS terminal\n\ncd /root/PhucAnDuongCMS-3\n\necho \"📦 Backup storage.ts cũ...\"\ncp server/storage.ts server/storage.ts.backup\n\necho \"📝 Tạo file postgres-storage.ts...\"\ncat > server/postgres-storage.ts << 'POSTGRES_END'\nCONTENT_HERE\nPOSTGRES_END\n\necho \"🔄 Update storage.ts...\"\ncat > server/storage.ts << 'STORAGE_END'\nexport { PostgresStorage as storage } from \"./postgres-storage\";\nexport type { IStorage } from \"./postgres-storage\";\nSTORAGE_END\n\necho \"🗄️ Push database schema...\"\nnpm run db:push --force\n\necho \"🔄 Restart PM2...\"\npm2 restart phuan-app\n\necho \"✅ Deploy hoàn tất!\"\npm2 logs phuan-app --lines 30\n","size_bytes":726},"deploy-to-vps.sh":{"content":"#!/bin/bash\n# Script deploy từ máy local lên VPS\n# Chạy script này trên máy tính của bạn (không phải trên VPS)\n\nset -e\n\necho \"🚀 Bắt đầu deploy lên VPS...\"\n\nVPS_HOST=\"103.72.96.173\"\nVPS_PORT=\"24700\"\nVPS_USER=\"root\"\nVPS_PATH=\"/root/PhucAnDuongCMS-3\"\n\necho \"📦 Đang build code...\"\nnpm run build\n\necho \"📤 Upload code lên VPS...\"\nrsync -avz --delete -e \"ssh -p $VPS_PORT\" \\\n  --exclude 'node_modules' \\\n  --exclude '.git' \\\n  --exclude '.env' \\\n  ./dist/ $VPS_USER@$VPS_HOST:$VPS_PATH/dist/\n\necho \"📤 Upload package files...\"\nscp -P $VPS_PORT package.json package-lock.json $VPS_USER@$VPS_HOST:$VPS_PATH/\n\necho \"🔧 Chạy setup trên VPS...\"\nssh -p $VPS_PORT $VPS_USER@$VPS_HOST \"bash -s\" < setup-vps.sh\n\necho \"✅ Deploy hoàn tất!\"\necho \"🌐 Truy cập: http://$VPS_HOST:5000\"\n","size_bytes":815},"server/postgres-storage.ts":{"content":"import { db } from \"./db\";\nimport { eq, and, desc, sql } from \"drizzle-orm\";\nimport * as schema from \"@shared/schema\";\nimport {\n  type User, type InsertUser,\n  type Card, type InsertCard,\n  type Branch, type InsertBranch,\n  type Staff, type InsertStaff,\n  type Transaction, type InsertTransaction,\n  type Kpi, type InsertKpi,\n  type StaffKpi, type InsertStaffKpi,\n  type Referral, type InsertReferral,\n  type ProfitSharing, type InsertProfitSharing,\n  type ProfitDistribution, type InsertProfitDistribution,\n  type InvestmentPackage, type InsertInvestmentPackage,\n  type SystemConfig, type InsertSystemConfig,\n  type AuditLog, type InsertAuditLog,\n  type UserBalance, type InsertUserBalance,\n  type DepositRequest, type InsertDepositRequest,\n  type UserSharesHistory, type InsertUserSharesHistory,\n  type BusinessTierConfig, type InsertBusinessTierConfig,\n} from \"@shared/schema\";\nimport { randomUUID, scrypt, randomBytes } from \"crypto\";\nimport { promisify } from \"util\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport { pool } from \"./db\";\n\nconst PgSession = connectPgSimple(session);\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nfunction toIntegerVnd(amountString: string): number {\n  return Math.floor(parseFloat(amountString || \"0\"));\n}\n\nfunction fromIntegerVnd(amountInteger: number): string {\n  return Math.floor(amountInteger).toString();\n}\n\ntype SessionStore = session.Store & {\n  get: (sid: string, callback: (err: any, session?: session.SessionData | null) => void) => void;\n  set: (sid: string, session: session.SessionData, callback?: (err?: any) => void) => void;\n  destroy: (sid: string, callback?: (err?: any) => void) => void;\n};\n\nimport type { IStorage } from \"./storage\";\n\nexport class PostgresStorage implements IStorage {\n  public sessionStore: SessionStore;\n\n  constructor() {\n    this.sessionStore = new PgSession({\n      pool,\n      tableName: \"session\",\n      createTableIfMissing: true,\n    }) as SessionStore;\n    \n    this.initializeDefaults().catch(err => {\n      console.error('⚠️ Failed to initialize defaults, will retry on first request:', err.message);\n    });\n  }\n\n  private async initializeDefaults() {\n    try {\n      if (process.env.NODE_ENV === 'development') {\n        const adminEmail = 'admin@phuan.com';\n        const existingAdmin = await this.getUserByEmail(adminEmail);\n        \n        if (!existingAdmin) {\n          const adminPassword = process.env.DEFAULT_ADMIN_PASSWORD || 'admin123';\n          const hashedPassword = await hashPassword(adminPassword);\n          \n          await db.insert(schema.users).values({\n            name: 'Admin',\n            email: adminEmail,\n            password: hashedPassword,\n            role: 'admin',\n            status: 'active',\n          });\n          console.log('✅ Created default admin user: admin@phuan.com (DEV mode)');\n        }\n      }\n      \n      const existingConfigs = await db.select().from(schema.systemConfigs);\n      if (existingConfigs.length === 0) {\n        await this.initializeSystemConfigs();\n      }\n    } catch (error) {\n      console.error('Database initialization error:', error instanceof Error ? error.message : 'Unknown error');\n      throw error;\n    }\n  }\n\n  private async initializeSystemConfigs() {\n    const configs = [\n      { configKey: \"maxout_limit_percentage\", configValue: \"210\", description: \"Maximum payout limit as percentage of card price\" },\n      { configKey: \"kpi_threshold_points\", configValue: \"50\", description: \"Minimum KPI points required per quarter for shares\" },\n      { configKey: \"profit_share_rate\", configValue: \"49\", description: \"Percentage of quarterly profit distributed to shareholders\" },\n      { configKey: \"withdrawal_minimum\", configValue: \"5000000\", description: \"Minimum withdrawal amount in VND\" },\n      { configKey: \"withdrawal_tax_rate\", configValue: \"10\", description: \"Tax rate percentage for withdrawals over 10M VND\" },\n      { configKey: \"corporate_tax_rate\", configValue: \"20\", description: \"Corporate tax rate percentage on gross profit\" },\n      { configKey: \"referral_commission_rate\", configValue: \"8\", description: \"Referral commission rate percentage\" },\n      { configKey: \"shares_per_slot\", configValue: \"50\", description: \"Number of shares awarded per slot\" },\n    ];\n\n    for (const config of configs) {\n      await db.insert(schema.systemConfigs).values(config).onConflictDoNothing();\n    }\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(schema.users).where(eq(schema.users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(schema.users).where(eq(schema.users.email, email));\n    return user;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const [created] = await db.insert(schema.users).values(user).returning();\n    return created;\n  }\n\n  async updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined> {\n    const [updated] = await db.update(schema.users)\n      .set({ ...user, updatedAt: new Date() })\n      .where(eq(schema.users.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(schema.users);\n  }\n\n  // Card operations\n  async getCards(): Promise<Card[]> {\n    return await db.select().from(schema.cards);\n  }\n\n  async getCard(id: string): Promise<Card | undefined> {\n    const [card] = await db.select().from(schema.cards).where(eq(schema.cards.id, id));\n    return card;\n  }\n\n  async createCard(card: InsertCard): Promise<Card> {\n    const [created] = await db.insert(schema.cards).values(card).returning();\n    return created;\n  }\n\n  async updateCard(id: string, card: Partial<InsertCard>): Promise<Card | undefined> {\n    const [updated] = await db.update(schema.cards)\n      .set(card)\n      .where(eq(schema.cards.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteCard(id: string): Promise<boolean> {\n    const result = await db.delete(schema.cards).where(eq(schema.cards.id, id)).returning({ id: schema.cards.id });\n    return result.length > 0;\n  }\n\n  // Branch operations\n  async getBranches(): Promise<Branch[]> {\n    return await db.select().from(schema.branches);\n  }\n\n  async getBranch(id: string): Promise<Branch | undefined> {\n    const [branch] = await db.select().from(schema.branches).where(eq(schema.branches.id, id));\n    return branch;\n  }\n\n  async createBranch(branch: InsertBranch): Promise<Branch> {\n    const [created] = await db.insert(schema.branches).values(branch).returning();\n    return created;\n  }\n\n  async updateBranch(id: string, branch: Partial<InsertBranch>): Promise<Branch | undefined> {\n    const [updated] = await db.update(schema.branches)\n      .set(branch)\n      .where(eq(schema.branches.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Staff operations\n  async getStaff(): Promise<Staff[]> {\n    return await db.select().from(schema.staff);\n  }\n\n  async getStaffMember(id: string): Promise<Staff | undefined> {\n    const [staff] = await db.select().from(schema.staff).where(eq(schema.staff.id, id));\n    return staff;\n  }\n\n  async createStaffMember(staff: InsertStaff): Promise<Staff> {\n    const [created] = await db.insert(schema.staff).values(staff).returning();\n    return created;\n  }\n\n  async updateStaffMember(id: string, staff: Partial<InsertStaff>): Promise<Staff | undefined> {\n    const [updated] = await db.update(schema.staff)\n      .set({ ...staff, updatedAt: new Date() })\n      .where(eq(schema.staff.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteStaffMember(id: string): Promise<boolean> {\n    const result = await db.delete(schema.staff).where(eq(schema.staff.id, id)).returning({ id: schema.staff.id });\n    return result.length > 0;\n  }\n\n  // Transaction operations\n  async getTransactions(): Promise<Transaction[]> {\n    return await db.select().from(schema.transactions).orderBy(desc(schema.transactions.date));\n  }\n\n  async getTransaction(id: string): Promise<Transaction | undefined> {\n    const [transaction] = await db.select().from(schema.transactions).where(eq(schema.transactions.id, id));\n    return transaction;\n  }\n\n  async createTransaction(transaction: InsertTransaction): Promise<Transaction> {\n    const [created] = await db.insert(schema.transactions).values(transaction).returning();\n    return created;\n  }\n\n  async getPendingTransactions(): Promise<Transaction[]> {\n    return await db.select().from(schema.transactions)\n      .where(eq(schema.transactions.status, 'pending'))\n      .orderBy(desc(schema.transactions.date));\n  }\n\n  // KPI operations\n  async getKpis(): Promise<Kpi[]> {\n    return await db.select().from(schema.kpis);\n  }\n\n  async getKpisByBranch(branchId: string): Promise<Kpi[]> {\n    return await db.select().from(schema.kpis).where(eq(schema.kpis.branchId, branchId));\n  }\n\n  async getKpisByPeriod(period: string, periodValue: string): Promise<Kpi[]> {\n    return await db.select().from(schema.kpis)\n      .where(and(eq(schema.kpis.period, period), eq(schema.kpis.periodValue, periodValue)));\n  }\n\n  async createKpi(kpi: InsertKpi): Promise<Kpi> {\n    const [created] = await db.insert(schema.kpis).values(kpi).returning();\n    return created;\n  }\n\n  async updateKpi(id: string, kpi: Partial<InsertKpi>): Promise<Kpi | undefined> {\n    const [updated] = await db.update(schema.kpis)\n      .set(kpi)\n      .where(eq(schema.kpis.id, id))\n      .returning();\n    return updated;\n  }\n\n  async calculateBranchKpi(branchId: string, period: string, periodValue: string): Promise<number> {\n    const kpis = await this.getKpisByPeriod(period, periodValue);\n    const branchKpi = kpis.find(k => k.branchId === branchId);\n    return branchKpi ? parseFloat(branchKpi.kpiScore || \"0\") : 0;\n  }\n\n  // Staff KPI operations\n  async getStaffKpis(): Promise<StaffKpi[]> {\n    return await db.select().from(schema.staffKpis);\n  }\n\n  async getStaffKpisByStaff(staffId: string): Promise<StaffKpi[]> {\n    return await db.select().from(schema.staffKpis).where(eq(schema.staffKpis.staffId, staffId));\n  }\n\n  async getStaffKpisByPeriod(period: string, periodValue: string): Promise<StaffKpi[]> {\n    return await db.select().from(schema.staffKpis)\n      .where(and(eq(schema.staffKpis.period, period), eq(schema.staffKpis.periodValue, periodValue)));\n  }\n\n  async createStaffKpi(staffKpi: InsertStaffKpi): Promise<StaffKpi> {\n    const [created] = await db.insert(schema.staffKpis).values(staffKpi).returning();\n    return created;\n  }\n\n  async updateStaffKpi(id: string, staffKpi: Partial<InsertStaffKpi>): Promise<StaffKpi | undefined> {\n    const [updated] = await db.update(schema.staffKpis)\n      .set(staffKpi)\n      .where(eq(schema.staffKpis.id, id))\n      .returning();\n    return updated;\n  }\n\n  async calculateStaffKpiPoints(staffId: string, period: string, periodValue: string): Promise<number> {\n    const kpis = await this.getStaffKpisByPeriod(period, periodValue);\n    const staffKpi = kpis.find(k => k.staffId === staffId);\n    return staffKpi ? parseFloat(staffKpi.totalPoints || \"0\") : 0;\n  }\n\n  async processQuarterlyShares(period: string, periodValue: string): Promise<void> {\n    const kpis = await this.getStaffKpisByPeriod(period, periodValue);\n    for (const kpi of kpis) {\n      if (!kpi.isProcessed) {\n        await db.update(schema.staffKpis)\n          .set({ isProcessed: true, processedAt: new Date() })\n          .where(eq(schema.staffKpis.id, kpi.id));\n      }\n    }\n  }\n\n  // Referral operations\n  async getReferrals(): Promise<Referral[]> {\n    return await db.select().from(schema.referrals);\n  }\n\n  async getReferralsByReferrer(referrerId: string): Promise<Referral[]> {\n    return await db.select().from(schema.referrals).where(eq(schema.referrals.referrerId, referrerId));\n  }\n\n  async getReferralByCode(referralCode: string): Promise<Referral | undefined> {\n    const [referral] = await db.select().from(schema.referrals).where(eq(schema.referrals.referralCode, referralCode));\n    return referral;\n  }\n\n  async createReferral(referral: InsertReferral): Promise<Referral> {\n    const [created] = await db.insert(schema.referrals).values(referral).returning();\n    return created;\n  }\n\n  async updateReferral(id: string, referral: Partial<InsertReferral>): Promise<Referral | undefined> {\n    const [updated] = await db.update(schema.referrals)\n      .set(referral)\n      .where(eq(schema.referrals.id, id))\n      .returning();\n    return updated;\n  }\n\n  async generateReferralCode(staffId: string): Promise<string> {\n    const staff = await this.getStaffMember(staffId);\n    if (!staff) throw new Error(\"Staff not found\");\n    \n    const code = `${staff.name.substring(0, 3).toUpperCase()}${randomUUID().substring(0, 6)}`;\n    return code;\n  }\n\n  async calculateReferralCommission(referralId: string): Promise<number> {\n    const referral = await db.select().from(schema.referrals).where(eq(schema.referrals.id, referralId));\n    if (!referral[0]) return 0;\n    return parseFloat(referral[0].commissionAmount || \"0\");\n  }\n\n  async processFirstTransaction(referralCode: string, transactionId: string): Promise<Referral | undefined> {\n    const [referral] = await db.select().from(schema.referrals).where(eq(schema.referrals.referralCode, referralCode));\n    if (!referral) return undefined;\n\n    const [updated] = await db.update(schema.referrals)\n      .set({ firstTransactionId: transactionId })\n      .where(eq(schema.referrals.referralCode, referralCode))\n      .returning();\n    return updated;\n  }\n\n  async markCommissionPaid(referralId: string, paidAmount: number): Promise<Referral | undefined> {\n    const [updated] = await db.update(schema.referrals)\n      .set({ \n        commissionPaid: paidAmount.toString(),\n        status: 'completed',\n        paidDate: new Date()\n      })\n      .where(eq(schema.referrals.id, referralId))\n      .returning();\n    return updated;\n  }\n\n  async processCommissionPayments(referrerId: string): Promise<number> {\n    const referrals = await this.getReferralsByReferrer(referrerId);\n    let totalPaid = 0;\n    for (const ref of referrals) {\n      if (ref.status === 'pending') {\n        const amount = parseFloat(ref.commissionAmount || \"0\");\n        await this.markCommissionPaid(ref.id, amount);\n        totalPaid += amount;\n      }\n    }\n    return totalPaid;\n  }\n\n  // Profit sharing operations\n  async getProfitSharings(): Promise<ProfitSharing[]> {\n    return await db.select().from(schema.profitSharing);\n  }\n\n  async getProfitSharing(id: string): Promise<ProfitSharing | undefined> {\n    const [sharing] = await db.select().from(schema.profitSharing).where(eq(schema.profitSharing.id, id));\n    return sharing;\n  }\n\n  async getProfitSharingByPeriod(period: string, periodValue: string): Promise<ProfitSharing | undefined> {\n    const [sharing] = await db.select().from(schema.profitSharing)\n      .where(and(eq(schema.profitSharing.period, period), eq(schema.profitSharing.periodValue, periodValue)));\n    return sharing;\n  }\n\n  async createProfitSharing(profitSharing: InsertProfitSharing): Promise<ProfitSharing> {\n    const [created] = await db.insert(schema.profitSharing).values(profitSharing).returning();\n    return created;\n  }\n\n  async updateProfitSharing(id: string, profitSharing: Partial<InsertProfitSharing>): Promise<ProfitSharing | undefined> {\n    const [updated] = await db.update(schema.profitSharing)\n      .set(profitSharing)\n      .where(eq(schema.profitSharing.id, id))\n      .returning();\n    return updated;\n  }\n\n  async calculateQuarterlyProfit(period: string, periodValue: string): Promise<{ revenue: number; expenses: number; profit: number }> {\n    const kpis = await this.getKpisByPeriod(period, periodValue);\n    const revenue = kpis.reduce((sum, kpi) => sum + parseFloat(kpi.totalRevenue || \"0\"), 0);\n    const expenses = kpis.reduce((sum, kpi) => sum + parseFloat(kpi.expenses || \"0\"), 0);\n    return { revenue, expenses, profit: revenue - expenses };\n  }\n\n  async processQuarterlyProfitSharing(period: string, periodValue: string): Promise<ProfitSharing> {\n    const { revenue, expenses, profit } = await this.calculateQuarterlyProfit(period, periodValue);\n    const profitSharePool = profit * 0.49;\n\n    const [created] = await db.insert(schema.profitSharing).values({\n      period,\n      periodValue,\n      totalRevenue: revenue.toString(),\n      totalExpenses: expenses.toString(),\n      netProfit: profit.toString(),\n      profitSharePool: profitSharePool.toString(),\n      distributionStatus: 'pending',\n    }).returning();\n\n    return created;\n  }\n\n  async processQuarterlyProfitSharingWithMaxout(period: string, periodValue: string, respectMaxout: boolean): Promise<ProfitSharing> {\n    return this.processQuarterlyProfitSharing(period, periodValue);\n  }\n\n  // Profit distribution operations\n  async getProfitDistributions(): Promise<ProfitDistribution[]> {\n    return await db.select().from(schema.profitDistribution);\n  }\n\n  async getProfitDistributionsBySharing(profitSharingId: string): Promise<ProfitDistribution[]> {\n    return await db.select().from(schema.profitDistribution).where(eq(schema.profitDistribution.profitSharingId, profitSharingId));\n  }\n\n  async createProfitDistribution(distribution: InsertProfitDistribution): Promise<ProfitDistribution> {\n    const [created] = await db.insert(schema.profitDistribution).values(distribution).returning();\n    return created;\n  }\n\n  async updateProfitDistribution(id: string, distribution: Partial<InsertProfitDistribution>): Promise<ProfitDistribution | undefined> {\n    const [updated] = await db.update(schema.profitDistribution)\n      .set(distribution)\n      .where(eq(schema.profitDistribution.id, id))\n      .returning();\n    return updated;\n  }\n\n  async markDistributionPaid(distributionId: string): Promise<ProfitDistribution | undefined> {\n    const [updated] = await db.update(schema.profitDistribution)\n      .set({ paymentStatus: 'paid', paidAt: new Date() })\n      .where(eq(schema.profitDistribution.id, distributionId))\n      .returning();\n    return updated;\n  }\n\n  async processAllDistributionPayments(profitSharingId: string): Promise<number> {\n    const distributions = await this.getProfitDistributionsBySharing(profitSharingId);\n    let totalPaid = 0;\n    for (const dist of distributions) {\n      if (dist.paymentStatus === 'pending') {\n        await this.markDistributionPaid(dist.id);\n        totalPaid += parseFloat(dist.distributionAmount || \"0\");\n      }\n    }\n    return totalPaid;\n  }\n\n  // Investment package operations\n  async getInvestmentPackages(): Promise<InvestmentPackage[]> {\n    return await db.select().from(schema.investmentPackages);\n  }\n\n  async getInvestmentPackage(id: string): Promise<InvestmentPackage | undefined> {\n    const [pkg] = await db.select().from(schema.investmentPackages).where(eq(schema.investmentPackages.id, id));\n    return pkg;\n  }\n\n  async getActiveInvestmentPackages(): Promise<InvestmentPackage[]> {\n    return await db.select().from(schema.investmentPackages).where(eq(schema.investmentPackages.isActive, true));\n  }\n\n  async createInvestmentPackage(packageData: InsertInvestmentPackage): Promise<InvestmentPackage> {\n    const [created] = await db.insert(schema.investmentPackages).values(packageData).returning();\n    return created;\n  }\n\n  async updateInvestmentPackage(id: string, packageData: Partial<InsertInvestmentPackage>): Promise<InvestmentPackage | undefined> {\n    const [updated] = await db.update(schema.investmentPackages)\n      .set(packageData)\n      .where(eq(schema.investmentPackages.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Cash flow operations\n  async createCashFlowTransaction(transaction: InsertTransaction): Promise<Transaction> {\n    return this.createTransaction(transaction);\n  }\n\n  async getCashFlowTransactions(userId?: string): Promise<Transaction[]> {\n    if (userId) {\n      return await db.select().from(schema.transactions).where(eq(schema.transactions.userId, userId));\n    }\n    return await db.select().from(schema.transactions);\n  }\n\n  async getCashFlowTransactionsByType(type: string): Promise<Transaction[]> {\n    return await db.select().from(schema.transactions).where(eq(schema.transactions.type, type));\n  }\n\n  async approveCashFlowTransaction(transactionId: string, approvedBy: string): Promise<Transaction | undefined> {\n    const [updated] = await db.update(schema.transactions)\n      .set({ status: 'approved', approvedBy, approvedAt: new Date() })\n      .where(eq(schema.transactions.id, transactionId))\n      .returning();\n    return updated;\n  }\n\n  async rejectCashFlowTransaction(transactionId: string, approvedBy: string, reason?: string): Promise<Transaction | undefined> {\n    const [updated] = await db.update(schema.transactions)\n      .set({ status: 'rejected', approvedBy, description: reason || '' })\n      .where(eq(schema.transactions.id, transactionId))\n      .returning();\n    return updated;\n  }\n\n  calculateWithdrawalTax(amount: number): number {\n    if (amount <= 10000000) return 0;\n    return Math.floor((amount - 10000000) * 0.1);\n  }\n\n  // System config operations\n  async getSystemConfigs(): Promise<SystemConfig[]> {\n    return await db.select().from(schema.systemConfigs);\n  }\n\n  async getSystemConfig(configKey: string): Promise<SystemConfig | undefined> {\n    const [config] = await db.select().from(schema.systemConfigs).where(eq(schema.systemConfigs.configKey, configKey));\n    return config;\n  }\n\n  async updateSystemConfig(configKey: string, configValue: string, description?: string, updatedBy?: string): Promise<SystemConfig> {\n    const existing = await this.getSystemConfig(configKey);\n    \n    if (existing) {\n      const [updated] = await db.update(schema.systemConfigs)\n        .set({ configValue, description: description || existing.description, updatedBy, updatedAt: new Date() })\n        .where(eq(schema.systemConfigs.configKey, configKey))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db.insert(schema.systemConfigs)\n        .values({ configKey, configValue, description, updatedBy })\n        .returning();\n      return created;\n    }\n  }\n\n  // Audit log operations\n  async getAuditLogs(limit: number = 100): Promise<AuditLog[]> {\n    return await db.select().from(schema.auditLogs).orderBy(desc(schema.auditLogs.createdAt)).limit(limit);\n  }\n\n  async createAuditLog(auditLog: InsertAuditLog): Promise<AuditLog> {\n    const [created] = await db.insert(schema.auditLogs).values(auditLog).returning();\n    return created;\n  }\n\n  async updateUserRole(userId: string, role: string, updatedBy: string): Promise<User | undefined> {\n    const user = await this.getUser(userId);\n    if (!user) return undefined;\n\n    await this.createAuditLog({\n      userId: updatedBy,\n      action: 'user_role_change',\n      entityType: 'user',\n      entityId: userId,\n      oldValue: user.role,\n      newValue: role,\n    });\n\n    return this.updateUser(userId, { role });\n  }\n\n  async exportReportData(reportType: string, dateFrom?: string, dateTo?: string): Promise<any[]> {\n    return [];\n  }\n\n  // User balance operations\n  async getUserBalance(userId: string): Promise<UserBalance | undefined> {\n    const [balance] = await db.select().from(schema.userBalances).where(eq(schema.userBalances.userId, userId));\n    return balance;\n  }\n\n  async createUserBalance(balance: InsertUserBalance): Promise<UserBalance> {\n    const [created] = await db.insert(schema.userBalances).values(balance).returning();\n    return created;\n  }\n\n  async updateUserBalance(userId: string, balance: Partial<InsertUserBalance>): Promise<UserBalance | undefined> {\n    const [updated] = await db.update(schema.userBalances)\n      .set({ ...balance, updatedAt: new Date() })\n      .where(eq(schema.userBalances.userId, userId))\n      .returning();\n    return updated;\n  }\n\n  async addToUserBalance(userId: string, amount: number, description: string): Promise<UserBalance> {\n    const existing = await this.getUserBalance(userId);\n    const currentBalance = existing ? parseFloat(existing.balance || \"0\") : 0;\n    const newBalance = currentBalance + amount;\n\n    if (existing) {\n      return (await this.updateUserBalance(userId, { balance: newBalance.toString() }))!;\n    } else {\n      return await this.createUserBalance({ userId, balance: newBalance.toString() });\n    }\n  }\n\n  // Deposit request operations\n  async getDepositRequests(): Promise<DepositRequest[]> {\n    return await db.select().from(schema.depositRequests);\n  }\n\n  async getDepositRequest(id: string): Promise<DepositRequest | undefined> {\n    const [request] = await db.select().from(schema.depositRequests).where(eq(schema.depositRequests.id, id));\n    return request;\n  }\n\n  async getUserDepositRequests(userId: string): Promise<DepositRequest[]> {\n    return await db.select().from(schema.depositRequests).where(eq(schema.depositRequests.userId, userId));\n  }\n\n  async createDepositRequest(request: InsertDepositRequest): Promise<DepositRequest> {\n    const [created] = await db.insert(schema.depositRequests).values(request).returning();\n    return created;\n  }\n\n  async approveDepositRequest(requestId: string, approvedBy: string): Promise<DepositRequest | undefined> {\n    const [updated] = await db.update(schema.depositRequests)\n      .set({ status: 'approved', approvedBy, approvedAt: new Date() })\n      .where(eq(schema.depositRequests.id, requestId))\n      .returning();\n    return updated;\n  }\n\n  async rejectDepositRequest(requestId: string, approvedBy: string, reason: string): Promise<DepositRequest | undefined> {\n    const [updated] = await db.update(schema.depositRequests)\n      .set({ status: 'rejected', approvedBy, rejectionReason: reason })\n      .where(eq(schema.depositRequests.id, requestId))\n      .returning();\n    return updated;\n  }\n\n  // User shares history operations\n  async getUserSharesHistory(userId: string): Promise<UserSharesHistory[]> {\n    return await db.select().from(schema.userSharesHistory).where(eq(schema.userSharesHistory.userId, userId));\n  }\n\n  async createUserSharesHistory(history: InsertUserSharesHistory): Promise<UserSharesHistory> {\n    const [created] = await db.insert(schema.userSharesHistory).values(history).returning();\n    return created;\n  }\n\n  // Business tier config operations\n  async getBusinessTierConfigs(): Promise<BusinessTierConfig[]> {\n    return await db.select().from(schema.businessTierConfigs);\n  }\n\n  async getBusinessTierConfig(tierName: string): Promise<BusinessTierConfig | undefined> {\n    const [config] = await db.select().from(schema.businessTierConfigs).where(eq(schema.businessTierConfigs.tierName, tierName));\n    return config;\n  }\n\n  async createBusinessTierConfig(config: InsertBusinessTierConfig): Promise<BusinessTierConfig> {\n    const [created] = await db.insert(schema.businessTierConfigs).values(config).returning();\n    return created;\n  }\n\n  async updateBusinessTierConfig(tierName: string, config: Partial<InsertBusinessTierConfig>): Promise<BusinessTierConfig | undefined> {\n    const [updated] = await db.update(schema.businessTierConfigs)\n      .set({ ...config, updatedAt: new Date() })\n      .where(eq(schema.businessTierConfigs.tierName, tierName))\n      .returning();\n    return updated;\n  }\n\n  // Business tier operations\n  async upgradeUserBusinessTier(userId: string, newTier: string, investmentAmount: number): Promise<User | undefined> {\n    const shareAmount = await this.calculateUserShares(userId, investmentAmount);\n    const [updated] = await db.update(schema.users)\n      .set({ \n        businessTier: newTier, \n        investmentAmount: investmentAmount.toString(),\n        totalShares: shareAmount.toString(),\n        updatedAt: new Date()\n      })\n      .where(eq(schema.users.id, userId))\n      .returning();\n    return updated;\n  }\n\n  async calculateUserShares(userId: string, amount: number): Promise<number> {\n    return Math.floor(amount / 1000000);\n  }\n\n  async updateUserShares(userId: string, shareAmount: number, description: string, transactionType: string): Promise<void> {\n    const user = await this.getUser(userId);\n    if (!user) return;\n\n    const currentShares = parseFloat(user.totalShares || \"0\");\n    const newShares = currentShares + shareAmount;\n\n    await db.update(schema.users)\n      .set({ totalShares: newShares.toString(), updatedAt: new Date() })\n      .where(eq(schema.users.id, userId));\n\n    await this.createUserSharesHistory({\n      userId,\n      transactionType,\n      shareAmount: shareAmount.toString(),\n      description,\n    });\n  }\n\n  async checkMaxoutLimit(userId: string): Promise<{ reached: boolean; limit: number; current: number }> {\n    return { reached: false, limit: 0, current: 0 };\n  }\n\n  // QR check-in operations\n  async createQrCheckin(checkin: { cardId: string; sessionType: string; notes?: string }): Promise<void> {\n    await db.update(schema.cards)\n      .set({ lastCheckIn: new Date() })\n      .where(eq(schema.cards.id, checkin.cardId));\n  }\n\n  async updateCardSessions(cardId: string, decrement: number): Promise<Card | undefined> {\n    const card = await this.getCard(cardId);\n    if (!card) return undefined;\n\n    const newSessions = Math.max(0, (card.remainingSessions || 0) - decrement);\n    return this.updateCard(cardId, { remainingSessions: newSessions });\n  }\n\n  // Withdrawal operations\n  async createWithdrawalRequest(userId: string, amount: number, description: string): Promise<Transaction> {\n    const tax = this.calculateWithdrawalTax(amount);\n    return this.createTransaction({\n      userId,\n      amount: amount.toString(),\n      type: 'withdraw',\n      description,\n      status: 'pending',\n      taxAmount: tax.toString(),\n    });\n  }\n\n  async validateWithdrawalBalance(userId: string, amount: number): Promise<{ valid: boolean; availableBalance: number }> {\n    const balance = await this.getUserBalance(userId);\n    const availableBalance = balance ? parseFloat(balance.balance || \"0\") : 0;\n    return { valid: availableBalance >= amount && amount >= 5000000, availableBalance };\n  }\n}\n","size_bytes":30288},"setup-vps.sh":{"content":"#!/bin/bash\n# Script chạy trên VPS để setup app\n# Script này được gọi tự động từ deploy-to-vps.sh\n\nset -e\n\nAPP_PATH=\"/root/PhucAnDuongCMS-3\"\n\necho \"📂 Di chuyển vào thư mục app...\"\ncd $APP_PATH\n\necho \"📦 Cài đặt dependencies (nếu cần)...\"\nif [ ! -d \"node_modules\" ]; then\n  npm install --production\nelse\n  echo \"   node_modules đã tồn tại, bỏ qua...\"\nfi\n\necho \"🔍 Kiểm tra file .env...\"\nif [ ! -f \".env\" ]; then\n  echo \"⚠️  CẢNH BÁO: File .env chưa tồn tại!\"\n  echo \"   Tạo file .env với nội dung sau:\"\n  echo \"\"\n  echo \"DATABASE_URL=postgresql://postgres:YOUR_PASSWORD@localhost:5432/phuanduong_db\"\n  echo \"SESSION_SECRET=$(openssl rand -hex 32)\"\n  echo \"NODE_ENV=production\"\n  echo \"\"\n  read -p \"Nhấn Enter sau khi đã tạo file .env...\"\nelse\n  echo \"✅ File .env đã tồn tại\"\nfi\n\necho \"🗄️  Push database schema...\"\nnpm run db:push --force || {\n  echo \"⚠️  Lỗi khi push database schema\"\n  echo \"   Kiểm tra kết nối database trong file .env\"\n  exit 1\n}\n\necho \"🔄 Restart PM2...\"\npm2 restart phuan-app || pm2 start dist/index.js --name phuan-app\n\necho \"📊 Trạng thái PM2:\"\npm2 list\n\necho \"\"\necho \"✅ Setup hoàn tất!\"\necho \"📝 Xem logs: pm2 logs phuan-app\"\necho \"🌐 App đang chạy tại: http://103.72.96.173:5000\"\n","size_bytes":1326},"update-storage-vps.sh":{"content":"#!/bin/bash\n# Script để update storage từ MemStorage sang PostgresStorage\n# Chạy script này trên VPS\n\nset -e\ncd /root/PhucAnDuongCMS-3\n\necho \"📦 Step 1: Backup file storage.ts cũ...\"\ncp server/storage.ts server/storage.ts.mem.backup\n\necho \"📝 Step 2: Update server/storage.ts để export PostgresStorage...\"\ncat > server/storage-new.ts << 'STORAGE_END'\nexport { PostgresStorage as storage } from \"./postgres-storage\";\nexport type { IStorage } from \"./postgres-storage\";\nSTORAGE_END\n\n# Replace old storage export\ntail -n +211 server/storage.ts > server/storage-interface.ts\ncat server/storage-new.ts > server/storage.ts\ncat server/storage-interface.ts >> server/storage.ts\nrm server/storage-new.ts server/storage-interface.ts\n\necho \"✅ Step 3: File storage.ts đã được update!\"\n\necho \"📤 Step 4: Download postgres-storage.ts...\"\necho \"   Copy nội dung từ Replit và paste vào file:\"\necho \"   nano server/postgres-storage.ts\"\necho \"\"\nread -p \"Nhấn Enter sau khi đã tạo file postgres-storage.ts...\"\n\necho \"🗄️  Step 5: Push database schema...\"\nnpm run db:push || npm run db:push -- --force\n\necho \"🔄 Step 6: Restart PM2...\"\npm2 restart phuan-app\n\necho \"📊 Step 7: Check logs...\"\npm2 logs phuan-app --lines 20\n\necho \"✅ Deploy hoàn tất!\"\n","size_bytes":1280},"DEPLOYMENT.md":{"content":"# VPS Deployment Guide - PhucAnDuongCMS-3\n\n## VPS Information\n- **Server IP**: 103.72.96.173\n- **OS**: Ubuntu 22.04\n- **Database**: PostgreSQL 14\n- **App Port**: 5000\n\n## Database Configuration\n- **Host**: localhost\n- **Port**: 5432\n- **Database**: phuanduong_db\n- **User**: postgres\n- **Password**: PhucAn2025!\n\n## Admin Credentials\n- **Email**: admin@phuan.com\n- **Password**: admin123\n\n---\n\n## Automated Deployment (Recommended)\n\n### Prerequisites\n1. SSH access to VPS (root@103.72.96.173)\n2. PostgreSQL 14 already installed and running\n3. Database `phuanduong_db` created\n\n### Deploy Command\n```bash\n./deploy-vps.sh\n```\n\nThis script will:\n- ✅ Package the application\n- ✅ Upload to VPS\n- ✅ Install Node.js 20 and PM2\n- ✅ Install dependencies\n- ✅ Build the application\n- ✅ Push database schema\n- ✅ Start with PM2 (auto-restart on reboot)\n\n### Post-Deployment\nAccess your application at: **http://103.72.96.173:5000**\n\n---\n\n## Manual Deployment (Alternative)\n\nIf automated deployment fails, follow these steps:\n\n### 1. Package Application\n```bash\ntar -czf phucAnduong.tar.gz \\\n  --exclude='node_modules' \\\n  --exclude='.git' \\\n  --exclude='dist' \\\n  .\n```\n\n### 2. Upload to VPS\n```bash\nscp phucAnduong.tar.gz root@103.72.96.173:/opt/\n```\n\n### 3. SSH to VPS\n```bash\nssh root@103.72.96.173\n```\n\n### 4. Extract and Setup\n```bash\ncd /opt\nmkdir -p phucAnduong\ntar -xzf phucAnduong.tar.gz -C phucAnduong\ncd phucAnduong\n```\n\n### 5. Create .env File\n```bash\nSESSION_SECRET=$(openssl rand -base64 32)\ncat > .env << EOF\nNODE_ENV=production\nDATABASE_URL=postgresql://postgres:PhucAn2025!@localhost:5432/phuanduong_db\nPGHOST=localhost\nPGPORT=5432\nPGUSER=postgres\nPGPASSWORD=PhucAn2025!\nPGDATABASE=phuanduong_db\nPORT=5000\nSESSION_SECRET=${SESSION_SECRET}\nEOF\n```\n\n### 6. Install Dependencies\n```bash\n# Install Node.js 20\ncurl -fsSL https://deb.nodesource.com/setup_20.x | bash -\napt-get install -y nodejs\n\n# Install PM2\nnpm install -g pm2\n\n# Install app dependencies\nnpm install\n```\n\n### 7. Build Application\n```bash\nnpm run build\n```\n\n### 8. Push Database Schema\n```bash\n# Push schema changes (adds new tables/columns without dropping existing data)\nnpm run db:push\n\n# If this is your FIRST deployment and database is empty, you can force:\n# npm run db:push -- --force\n```\n\n### 9. Start with PM2\n```bash\npm2 start npm --name phucAnduong-cms -- start\npm2 save\npm2 startup systemd\n```\n\n---\n\n## PM2 Management Commands\n\n```bash\n# View status\npm2 status\n\n# View logs\npm2 logs phucAnduong-cms\n\n# View real-time logs\npm2 logs phucAnduong-cms --lines 100\n\n# Restart application\npm2 restart phucAnduong-cms\n\n# Stop application\npm2 stop phucAnduong-cms\n\n# Delete from PM2\npm2 delete phucAnduong-cms\n```\n\n---\n\n## Features Deployed\n\n✅ **PAD Token System**\n- Automatic calculation: 100 PAD = 1 triệu VNĐ\n- Displayed on Dashboard and Cards\n\n✅ **Multi-Role System**\n- 7 roles: Sáng lập, Thiên thần, Phát triển, Đồng hành, Góp tài sản, Sweat Equity, Khách hàng\n- Auto-upgrade: Customer → Shareholder when total cards > 101M VNĐ\n\n✅ **Cards & Benefits**\n- Connection commission: 8%\n- VIP support: 5%\n- Profit share: 49%\n- Consultation sessions: 12-24 lượt/2 năm (based on card tier)\n\n✅ **Dashboard Analytics**\n- PAD Token value display\n- 6mo/1yr/3yr/5yr predictions\n- Profit allocation chart (30% capital vs 19% labor)\n- ROI prediction table\n\n✅ **Branch KPI Management**\n- Branch performance tracking\n- Staff equity distribution\n- Cash flow monitoring\n\n---\n\n## Troubleshooting\n\n### Application won't start\n```bash\n# Check logs\npm2 logs phucAnduong-cms\n\n# Check if port 5000 is available\nnetstat -tuln | grep 5000\n\n# Manually test\nnpm start\n```\n\n### Database connection issues\n```bash\n# Test PostgreSQL connection\npsql -U postgres -d phuanduong_db -c \"SELECT version();\"\n\n# Check if PostgreSQL is running\nsystemctl status postgresql\n```\n\n### View full application logs\n```bash\npm2 logs phucAnduong-cms --lines 500\n```\n\n---\n\n## Firewall Configuration\n\nIf you need to open port 5000:\n```bash\n# UFW\nufw allow 5000/tcp\n\n# Or iptables\niptables -A INPUT -p tcp --dport 5000 -j ACCEPT\n```\n\n---\n\n## Backup & Restore\n\n### Backup Database\n```bash\npg_dump -U postgres phuanduong_db > backup_$(date +%Y%m%d).sql\n```\n\n### Restore Database\n```bash\npsql -U postgres phuanduong_db < backup_20250102.sql\n```\n","size_bytes":4315},"deploy-vps.sh":{"content":"#!/bin/bash\n\n# Deployment script for PhucAnDuongCMS-3 to VPS\n# VPS: Ubuntu 22.04 at 103.72.96.173\n\nset -e\n\necho \"🚀 Starting deployment to VPS...\"\n\n# Configuration\nVPS_USER=\"root\"\nVPS_HOST=\"103.72.96.173\"\nVPS_PORT=\"22\"\nAPP_DIR=\"/opt/phucAnduong\"\nAPP_NAME=\"phucAnduong-cms\"\n\n# Colors for output\nGREEN='\\033[0;32m'\nBLUE='\\033[0;34m'\nRED='\\033[0;31m'\nNC='\\033[0m'\n\necho -e \"${BLUE}Step 1: Creating deployment package...${NC}\"\n# Exclude node_modules, .git, and other unnecessary files\ntar -czf deploy.tar.gz \\\n  --exclude='node_modules' \\\n  --exclude='.git' \\\n  --exclude='dist' \\\n  --exclude='.env.local' \\\n  --exclude='deploy.tar.gz' \\\n  --exclude='*.log' \\\n  .\n\necho -e \"${BLUE}Step 2: Uploading to VPS...${NC}\"\nscp -P ${VPS_PORT} deploy.tar.gz ${VPS_USER}@${VPS_HOST}:/tmp/\n\necho -e \"${BLUE}Step 3: Installing on VPS...${NC}\"\nssh -p ${VPS_PORT} ${VPS_USER}@${VPS_HOST} << 'ENDSSH'\n\n# Exit on error\nset -e\n\nAPP_DIR=\"/opt/phucAnduong\"\nAPP_NAME=\"phucAnduong-cms\"\n\necho \"📦 Setting up application directory...\"\nmkdir -p ${APP_DIR}\ncd ${APP_DIR}\n\n# Extract application\necho \"📂 Extracting application...\"\ntar -xzf /tmp/deploy.tar.gz -C ${APP_DIR}\nrm /tmp/deploy.tar.gz\n\n# Create .env file with VPS database credentials\necho \"🔧 Creating environment configuration...\"\nSESSION_SECRET=$(openssl rand -base64 32)\ncat > .env << EOF\nNODE_ENV=production\nDATABASE_URL=postgresql://postgres:PhucAn2025!@localhost:5432/phuanduong_db\nPGHOST=localhost\nPGPORT=5432\nPGUSER=postgres\nPGPASSWORD=PhucAn2025!\nPGDATABASE=phuanduong_db\nPORT=5000\nSESSION_SECRET=${SESSION_SECRET}\nEOF\n\n# Install Node.js 20 if not present\nif ! command -v node &> /dev/null; then\n    echo \"📥 Installing Node.js 20...\"\n    curl -fsSL https://deb.nodesource.com/setup_20.x | bash -\n    apt-get install -y nodejs\nfi\n\n# Install PM2 globally if not present\nif ! command -v pm2 &> /dev/null; then\n    echo \"📥 Installing PM2...\"\n    npm install -g pm2\nfi\n\n# Install dependencies\necho \"📥 Installing dependencies...\"\nnpm install --production=false\n\n# Build the application\necho \"🔨 Building application...\"\nnpm run build\n\n# Push database schema\necho \"🗄️  Pushing database schema...\"\nif npm run db:push; then\n    echo \"✅ Schema pushed successfully\"\nelse\n    echo \"⚠️  Schema push failed. If this is a fresh database, you can force push with:\"\n    echo \"   npm run db:push -- --force\"\n    echo \"   WARNING: Only use --force on empty databases!\"\n    exit 1\nfi\n\n# Stop existing PM2 process if running\necho \"🛑 Stopping existing process...\"\npm2 delete ${APP_NAME} 2>/dev/null || true\n\n# Start application with PM2\necho \"🚀 Starting application with PM2...\"\npm2 start npm --name ${APP_NAME} -- start\npm2 save\n\n# Setup PM2 to start on boot\npm2 startup systemd -u root --hp /root\n\necho \"✅ Deployment complete!\"\necho \"📊 Application status:\"\npm2 status\n\necho \"\"\necho \"🌐 Application should be running on: http://103.72.96.173:5000\"\necho \"👤 Admin login: admin@phuan.com / admin123\"\necho \"\"\necho \"Useful PM2 commands:\"\necho \"  pm2 status          - Check status\"\necho \"  pm2 logs ${APP_NAME}  - View logs\"\necho \"  pm2 restart ${APP_NAME} - Restart app\"\necho \"  pm2 stop ${APP_NAME}    - Stop app\"\n\nENDSSH\n\n# Clean up local deployment package\nrm deploy.tar.gz\n\necho -e \"${GREEN}✅ Deployment successful!${NC}\"\necho -e \"${GREEN}🌐 Access your app at: http://103.72.96.173:5000${NC}\"\necho -e \"${GREEN}👤 Admin: admin@phuan.com / admin123${NC}\"\n","size_bytes":3424}},"version":1}