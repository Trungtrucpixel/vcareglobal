root@cloud:~/PhucAnDuongCMS-3# grep -n "PostgresStorage" dist/index.js
653:var PostgresStorage = class {
1206:    store: PostgresStorage.sessionStore
1214:      const user = await PostgresStorage.getUserByEmail(username);
1224:    const user = await PostgresStorage.getUser(id);
1228:    const existingUser = await PostgresStorage.getUserByEmail(req.body.email);
1232:    const user = await PostgresStorage.createUser({
1290:      const cards2 = await PostgresStorage.getCards();
1299:      const card = await PostgresStorage.createCard(cardData);
1309:      const card = await PostgresStorage.updateCard(id, updateData);
1321:      const deleted = await PostgresStorage.deleteCard(id);
1332:      const branches2 = await PostgresStorage.getBranches();
1341:      const branch = await PostgresStorage.createBranch(branchData);
1349:      const staff2 = await PostgresStorage.getStaff();
1358:      const staffMember = await PostgresStorage.createStaffMember(staffData);
1368:      const staffMember = await PostgresStorage.updateStaffMember(id, updateData);
1380:      const deleted = await PostgresStorage.deleteStaffMember(id);
1391:      const transactions2 = await PostgresStorage.getTransactions();
1400:      const transaction = await PostgresStorage.createTransaction(transactionData);
1404:          const referral = await PostgresStorage.processFirstTransaction(referralCode, transaction.id);
1419:      const transactions2 = await PostgresStorage.getTransactions();
1420:      const cards2 = await PostgresStorage.getCards();
1421:      const branches2 = await PostgresStorage.getBranches();
1422:      const staff2 = await PostgresStorage.getStaff();
1484:      const card = await PostgresStorage.getCard(id);
1488:      const updatedCard = await PostgresStorage.updateCard(id, {
1513:      const card = await PostgresStorage.getCard(id);
1548:      const kpis2 = await PostgresStorage.getKpis();
1558:      const kpis2 = await PostgresStorage.getKpisByBranch(branchId);
1568:      const kpis2 = await PostgresStorage.getKpisByPeriod(period, periodValue);
1578:      const branches2 = await PostgresStorage.getBranches();
1581:        const kpiScore = await PostgresStorage.calculateBranchKpi(branch.id, period, periodValue);
1582:        const kpis2 = await PostgresStorage.getKpisByBranch(branch.id);
1604:      const branches2 = await PostgresStorage.getBranches();
1607:        const kpiScore = await PostgresStorage.calculateBranchKpi(branch.id, period, periodValue);
1637:      const kpi = await PostgresStorage.createKpi(kpiData);
1664:      const existingProfitSharing = await PostgresStorage.getProfitSharingByPeriod(period, periodValue);
1668:        profitData = await PostgresStorage.calculateQuarterlyProfit(period, periodValue);
1694:      const staffKpis2 = await PostgresStorage.getStaffKpis();
1704:      const staffKpis2 = await PostgresStorage.getStaffKpisByStaff(staffId);
1714:      const staffKpis2 = await PostgresStorage.getStaffKpisByPeriod(period, periodValue);
1724:      const staffKpi = await PostgresStorage.createStaffKpi(staffKpiData);
1735:      const staffKpi = await PostgresStorage.updateStaffKpi(id, updateData);
1748:      const points = await PostgresStorage.calculateStaffKpiPoints(staffId, period, periodValue);
1771:      await PostgresStorage.processQuarterlyShares(period, periodValue);
1784:      const referrals2 = await PostgresStorage.getReferrals();
1794:      const referrals2 = await PostgresStorage.getReferralsByReferrer(referrerId);
1817:      const referral = await PostgresStorage.getReferralByCode(referralCode);
1830:      const referral = await PostgresStorage.createReferral(referralData);
1841:      const referral = await PostgresStorage.updateReferral(id, updateData);
1857:      const referralCode = await PostgresStorage.generateReferralCode(staffId);
1871:      const commission = await PostgresStorage.calculateReferralCommission(referralId);
1886:      const referral = await PostgresStorage.processFirstTransaction(referralCode, transactionId);
1908:      const referral = await PostgresStorage.markCommissionPaid(referralId, paidAmount);
1926:      const totalPaid = await PostgresStorage.processCommissionPayments(referrerId);
1940:      const profitSharings = await PostgresStorage.getProfitSharings();
1950:      const profitSharing2 = await PostgresStorage.getProfitSharingByPeriod(period, periodValue);
1963:      const profitData = await PostgresStorage.calculateQuarterlyProfit(period, periodValue);
1993:      const profitSharing2 = await PostgresStorage.processQuarterlyProfitSharing(period, periodValue, forceReprocess);
1994:      const distributions = await PostgresStorage.getProfitDistributionsBySharing(profitSharing2.id);
2018:      const distributions = await PostgresStorage.getProfitDistributions();
2028:      const distributions = await PostgresStorage.getProfitDistributionsBySharing(profitSharingId);
2049:      const distribution = await PostgresStorage.markDistributionPaid(distributionId);
2081:      const totalPaid = await PostgresStorage.processAllDistributionPayments(profitSharingId);
2082:      const distributions = await PostgresStorage.getProfitDistributionsBySharing(profitSharingId);
2108:      const packages = await PostgresStorage.getInvestmentPackages();
2117:      const packages = await PostgresStorage.getActiveInvestmentPackages();
2131:      const newPackage = await PostgresStorage.createInvestmentPackage(packageData);
2141:      const transactions2 = await PostgresStorage.getCashFlowTransactions(user.id);
2154:      const transactions2 = await PostgresStorage.getCashFlowTransactions();
2168:      const transaction = await PostgresStorage.createCashFlowTransaction({
2192:      const taxAmount = PostgresStorage.calculateWithdrawalTax(amount);
2193:      const transaction = await PostgresStorage.createCashFlowTransaction({
2214:      const transaction = await PostgresStorage.approveCashFlowTransaction(transactionId, user.id);
2232:      const transaction = await PostgresStorage.rejectCashFlowTransaction(transactionId, user.id, reason);
2248:      const users2 = await PostgresStorage.getAllUsers();
2266:      const updatedUser = await PostgresStorage.updateUserRole(userId, role, user.id);
2282:      const transactions2 = await PostgresStorage.getPendingTransactions();
2295:      const configs = await PostgresStorage.getSystemConfigs();
2313:      const config = await PostgresStorage.updateSystemConfig(configKey, configValue, description, user.id);
2327:      const logs = await PostgresStorage.getAuditLogs(limit);
2344:      const data = await PostgresStorage.exportReportData(reportType, dateFrom, dateTo);
2345:      await PostgresStorage.createAuditLog({
root@cloud:~/PhucAnDuongCMS-3# 
